(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    296310,       6369]
NotebookOptionsPosition[    286987,       6076]
NotebookOutlinePosition[    287430,       6093]
CellTagsIndexPosition[    287387,       6090]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Import EP Packages", "Section",
 CellChangeTimes->{{3.422969177546875*^9, 3.422969199640625*^9}}],

Cell["Enter the list of required packages (*.m files):", "Text",
 CellChangeTimes->{{3.422976324015625*^9, 3.422976357*^9}, {
  3.422985360578125*^9, 3.422985367625*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"EPPackages", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<NumbersPackage.m\>\"", ",", "\"\<LevelStructurePackage.m\>\"", ",", 
     "\"\<HyperfineDipoleCoupling.m\>\"", ",", " ", 
     "\"\<xmlDataPackage.m\>\"", ",", " ", "\"\<absorptionImagePackage.m\>\"",
      ",", " ", "\"\<MagneticTrapAnalysisPackage.m\>\"", ",", 
     "\"\<MagnetometryPackage.m\>\"", ",", 
     "\"\<AbsorptionImageTypePackage.m\>\"", ",", "\"\<realTimeLoad.m\>\"", 
     ",", "\"\<prototypes.nb\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.422970015203125*^9, 3.42297002640625*^9}, 
   3.42297383675*^9, {3.422973866921875*^9, 3.422973880609375*^9}, {
   3.422973969359375*^9, 3.422973986171875*^9}, 3.422974122625*^9, 
   3.42297425409375*^9, {3.422974466796875*^9, 3.422974469796875*^9}, 
   3.422975735875*^9, {3.42297638546875*^9, 3.422976385625*^9}, 
   3.42297646309375*^9, 3.422979697546875*^9, {3.42298528940625*^9, 
   3.4229852896875*^9}, {3.422985344625*^9, 3.422985345171875*^9}, {
   3.422988275875*^9, 3.422988290359375*^9}, {3.475260831411625*^9, 
   3.475260874067875*^9}, {3.5034089789003177`*^9, 3.503409000576215*^9}, {
   3.5181859047031384`*^9, 3.5181859363731823`*^9}, {3.518193959256422*^9, 
   3.518193961716426*^9}, {3.559926801894369*^9, 3.5599268091907864`*^9}, {
   3.5604024344019923`*^9, 3.560402440378334*^9}, 3.5604025457693624`*^9, {
   3.5604029760739746`*^9, 3.5604029893617344`*^9}}],

Cell[CellGroupData[{

Cell["Load Packages", "Subsection",
 CellChangeTimes->{{3.422974488609375*^9, 3.42297449590625*^9}}],

Cell["\<\
In order for loading to work, $EPIncludeDirectory must be set to the local \
directory containing EP packages.  This can be done automatically at kernel \
starup by adding the definition in the user initialization file: \
$BaseDirectory\\Kernel\\init.m\
\>", "Text",
 CellChangeTimes->{{3.422975777734375*^9, 3.422975860296875*^9}, {
  3.422975914078125*^9, 3.422976021203125*^9}, {3.422976086515625*^9, 
  3.4229763009375*^9}}],

Cell[CellGroupData[{

Cell[BoxData["$BaseDirectory"], "Input"],

Cell[BoxData["\<\"C:\\\\ProgramData\\\\Mathematica\"\>"], "Output",
 CellChangeTimes->{{3.422975955609375*^9, 3.422975965578125*^9}, {
   3.422976057875*^9, 3.42297606934375*^9}, 3.4229763054375*^9, 
   3.422976389296875*^9, {3.422976460203125*^9, 3.4229764646875*^9}, 
   3.422979624953125*^9, {3.422979681703125*^9, 3.422979705546875*^9}, {
   3.422979815859375*^9, 3.422979826125*^9}, 3.422985292421875*^9, {
   3.4229853479375*^9, 3.422985349625*^9}, 3.422988306546875*^9, 
   3.42298848578125*^9, 3.42298859490625*^9, 3.42298908625*^9, 
   3.422989327265625*^9, 3.422991434921875*^9, 3.42299154790625*^9, 
   3.4232468240625*^9, 3.423593157994875*^9, 3.427125433109375*^9, 
   3.430490536288875*^9, 3.4306606870828996`*^9, 3.439491459703125*^9, 
   3.439651141953125*^9, 3.4525393659245663`*^9, 3.45347441935275*^9, 
   3.46308253296025*^9, 3.464725210890625*^9, 3.46896623112925*^9, 
   3.469371789140625*^9, 3.469897919828125*^9, 3.469898722328125*^9, 
   3.469904036546875*^9, 3.47441465784375*^9, 3.474643297890625*^9, 
   3.47465415446875*^9, {3.475260824442875*^9, 3.475260878974125*^9}, 
   3.475261016396*^9, 3.476113289572875*^9, 3.476116087330125*^9, 
   3.4764216723145*^9, 3.4770892195685*^9, 3.477089414927875*^9, 
   3.477262749546875*^9, 3.477274053234375*^9, 3.47732573265625*^9, 
   3.477325945109375*^9, 3.47732895678125*^9, 3.47733902628125*^9, 
   3.477339407859375*^9, 3.477340097734375*^9, 3.477340243765625*^9, 
   3.477355150984375*^9, 3.477355199515625*^9, 3.4774412765*^9, 
   3.477441611921875*^9, 3.47750625078125*^9, 3.47750870565625*^9, 
   3.477509715*^9, 3.47767063840625*^9, 3.477940187842375*^9, 
   3.4779461921705*^9, 3.47889479165625*^9, 3.479069129066875*^9, 
   3.479069422129375*^9, 3.479070166348125*^9, 3.479226491046875*^9, 
   3.4794834325*^9, 3.47957895853125*^9, 3.4796537917422266`*^9, 
   3.480358428804125*^9, 3.480460809147875*^9, 3.480460885429125*^9, {
   3.480460997772875*^9, 3.48046102044475*^9}, 3.480462121741625*^9, 
   3.48147523978125*^9, 3.482243637937625*^9, 3.482255692390625*^9, 
   3.482424901109375*^9, 3.482759562296875*^9, 3.4827603228125*^9, 
   3.482940954875*^9, 3.48303813509375*^9, 3.483114490546875*^9, 
   3.483803067620406*^9, 3.485810246742625*^9, 3.486216522148875*^9, 
   3.486413644953125*^9, 3.486738368515625*^9, 3.4869964754525003`*^9, 
   3.4870824106400003`*^9, 3.4874226319212503`*^9, 3.494946175875*^9, 
   3.495291244546875*^9, 3.495318362421875*^9, 3.4953203404411726`*^9, {
   3.4953764310183706`*^9, 3.4953764488363895`*^9}, 3.495382151359375*^9, 
   3.49538246746875*^9, 3.4954700558125*^9, 3.495570684904803*^9, 
   3.496521137209875*^9, 3.4966744849755*^9, 3.497640660935*^9, 
   3.497979898975422*^9, 3.498307171261875*^9, 3.498835399949375*^9, 
   3.4988387008893166`*^9, 3.498840595168125*^9, 3.499012519855625*^9, 
   3.49901274749625*^9, 3.49902322805875*^9, 3.499477544043125*^9, 
   3.50042785475*^9, 3.500428627671875*^9, 3.500495640022649*^9, 
   3.500575879015625*^9, 3.501873537109625*^9, 3.501880035203125*^9, 
   3.502035229953125*^9, 3.502065520421875*^9, 3.5030856995825*^9, 
   3.50335345236375*^9, 3.5034090122658844`*^9, 3.503873422070125*^9, 
   3.504364476382625*^9, 3.5052585944290285`*^9, 3.5052611164602785`*^9, 
   3.5063856724655*^9, 3.50983309321875*^9, 3.510063688078125*^9, 
   3.510411859578292*^9, 3.510594221734872*^9, 3.510626912322792*^9, 
   3.5106272003032637`*^9, 3.510627255418416*^9, 3.5127623274088125`*^9, 
   3.5127766894132724`*^9, 3.5128562764453907`*^9, 3.512856513970976*^9, 
   3.5128567085671062`*^9, 3.512856751135541*^9, 3.5128568946127477`*^9, 
   3.512857062528352*^9, 3.5128571439570093`*^9, 3.513459017747221*^9, 
   3.513461201177106*^9, 3.5136048671743307`*^9, 3.5139697968201127`*^9, 
   3.514035141544617*^9, 3.5140352159348717`*^9, 3.5140679791658216`*^9, 
   3.514123771648969*^9, 3.5142943109682603`*^9, 3.514556565893034*^9, 
   3.514590028076914*^9, 3.514726845669027*^9, 3.5147296264553165`*^9, 
   3.5148311336996098`*^9, 3.5151573574464426`*^9, 3.5152409694537754`*^9, 
   3.5153313414097557`*^9, 3.5160441832649775`*^9, 3.5165407001027937`*^9, 
   3.5169906108502164`*^9, 3.5170150652069254`*^9, 3.5170587557468815`*^9, 
   3.5177761865897045`*^9, 3.51785378307642*^9, 3.5178728879751596`*^9, 
   3.5179416649964523`*^9, 3.51818588466311*^9, 3.5181859400131874`*^9, 
   3.518186060285356*^9, 3.518193965506431*^9, 3.5184487556364913`*^9, 
   3.51846104163421*^9, 3.51947881095932*^9, 3.5201743060355635`*^9, 
   3.520623869941148*^9, 3.521217291926944*^9, 3.521733549723201*^9, 
   3.521902258679801*^9, 3.5375545254290724`*^9, 3.537560672243992*^9, 
   3.537801407008089*^9, 3.5378014823891945`*^9, 3.53780299330131*^9, 
   3.537803082621435*^9, 3.5379050686991916`*^9, 3.538149932647481*^9, 
   3.5382323382233076`*^9, 3.5383271049747343`*^9, 3.5397036555161386`*^9, 
   3.539967814032525*^9, 3.54082789376783*^9, 3.5408297381904125`*^9, 
   3.5411832846360264`*^9, 3.5413513666005373`*^9, 3.5414322163217883`*^9, 
   3.5415108276199613`*^9, 3.5415121357017927`*^9, 3.5415139525363216`*^9, 
   3.5415144100269675`*^9, 3.5418560920870075`*^9, 3.541948416852475*^9, 
   3.542035181606002*^9, 3.542043011734539*^9, 3.5420770362242146`*^9, 
   3.5420772584445257`*^9, {3.5423092019812984`*^9, 3.54230923865135*^9}, 
   3.5430107663053255`*^9, 3.5430723174418497`*^9, 3.543170184324724*^9, 
   3.543176346216772*^9, 3.543344537298608*^9, 3.5435849570788326`*^9, 
   3.5435949632881556`*^9, 3.5438698385885153`*^9, 3.5439328634210043`*^9, 
   3.5441932849772377`*^9, 3.544275730559663*^9, 3.54489992921875*^9, 
   3.5450644863381443`*^9, 3.545405896210436*^9, 3.545486376139122*^9, 
   3.545573275246834*^9, 3.5456789038410234`*^9, 3.54609210438785*^9, 
   3.5466115732453856`*^9, 3.5467945861621256`*^9, 3.5475607209305115`*^9, 
   3.547560764379997*^9, 3.5484300127223935`*^9, 3.548515576971002*^9, 
   3.549033089985512*^9, 3.5491160860378537`*^9, 3.5492046757889223`*^9, 
   3.5493106254582896`*^9, 3.549400264143329*^9, 3.5496367293351517`*^9, 
   3.551020163331151*^9, 3.5511898045910764`*^9, 3.551707419198593*^9, 
   3.5520739464967117`*^9, 3.552226481078905*^9, 3.55231214015546*^9, 
   3.552397827222443*^9, 3.5526805018163056`*^9, 3.5527435582544193`*^9, 
   3.5529160301016474`*^9, 3.553350052461754*^9, 3.5534365612983527`*^9, 
   3.5540423752678223`*^9, 3.555788604021822*^9, 3.556053627389292*^9, 
   3.556291186321556*^9, 3.5562912755916805`*^9, 3.5577680547423134`*^9, 
   3.558362666702343*^9, 3.5587175843974743`*^9, 3.5587942985732737`*^9, 
   3.5587945446113462`*^9, 3.5588829969565315`*^9, 3.5599252711778173`*^9, 
   3.559926868648187*^9, 3.5599282611138315`*^9, 3.560277549098962*^9, 
   3.5604020158320513`*^9, 3.560402401442107*^9, 3.560402446336675*^9, 
   3.5604025649314585`*^9, 3.5604026288371134`*^9, 3.560402666557271*^9, 
   3.560402729148851*^9, 3.56040291549751*^9, {3.5604029800572023`*^9, 
   3.560402994475027*^9}, 3.560403230858547*^9, 3.560403304946785*^9, 
   3.560523090177108*^9, 3.560551253651967*^9, 3.560694237879197*^9, 
   3.5607813805154705`*^9, 3.5608858320137544`*^9, 3.5611268343903017`*^9, 
   3.5611268783538165`*^9, 3.5611480874714622`*^9, {3.5611586336312304`*^9, 
   3.5611586468812494`*^9}, 3.5613131422796164`*^9, 3.5614763369688187`*^9, 
   3.5615166779461904`*^9, 3.564326308356061*^9, 3.565713345602221*^9, 
   3.5657220723504496`*^9, 3.56719021117435*^9, 3.5672651081442184`*^9, 
   3.5673010578986225`*^9, 3.567354140139944*^9, 3.567524666240797*^9, 
   3.567872948481406*^9, 3.568047245963532*^9, 3.568403218233043*^9, 
   3.568735903973566*^9, 3.569015030993046*^9, 3.5690775717046304`*^9, 
   3.569283601866992*^9, 3.5695116607065163`*^9, 3.569604264658308*^9, 
   3.5696242995114603`*^9, 3.569857221092656*^9, 3.5698737147588325`*^9, 
   3.5703183234556475`*^9, 3.570387430935402*^9, 3.570390310933463*^9, 
   3.5709803327766137`*^9, 3.571174296935189*^9, 3.571500693034165*^9, 
   3.571583515990119*^9, 3.572203882362686*^9, 3.572293463656171*^9, 
   3.572377672992126*^9, 3.5723777676622586`*^9, 3.5726323528357534`*^9, 
   3.572722694343248*^9, 3.572794180415347*^9, {3.572986754284979*^9, 
   3.572986784235021*^9}, 3.573228598840567*^9, 3.5733098478903275`*^9, 
   3.5734002739369383`*^9, 3.5734893261656156`*^9, 3.5739178727926273`*^9, 
   3.573999143415409*^9, 3.5744336038597116`*^9, 3.574609332465763*^9, 
   3.575828638591316*^9, 3.5762532774091115`*^9, 3.5762533914692717`*^9, 
   3.5764253602490497`*^9, 3.576509485392844*^9, 3.576592654852357*^9, 
   3.5769403915180655`*^9, 3.577112891833578*^9, 3.5771267567890053`*^9, 
   3.5771995667939577`*^9, 3.577474615058606*^9, 3.5775465237453876`*^9, 
   3.5781542556975155`*^9, 3.5782335495066*^9, 3.5782525338580174`*^9, {
   3.5784068131190944`*^9, 3.578406827869115*^9}, 3.5786695974548016`*^9, 
   3.5787526444230866`*^9, 3.5788422575470867`*^9, 3.5790104597456245`*^9, 
   3.5790104962956753`*^9, {3.579445553415434*^9, 3.579445568395455*^9}, 
   3.579491153378328*^9, 3.5795469535932584`*^9, {3.579616189081215*^9, 
   3.579616198781228*^9}, 3.580053145599017*^9, 3.58048453732057*^9, {
   3.580655330332728*^9, 3.580655342412745*^9}, 3.580737407743664*^9, 
   3.5808551367015533`*^9, {3.5810885813065033`*^9, 3.581088598756528*^9}, 
   3.5811703120309443`*^9, 3.581175131190702*^9, 3.581258353063246*^9, 
   3.5813459902699394`*^9, 3.581432260177724*^9, 3.581860933857936*^9, 
   3.5818859400159745`*^9, 3.582296754164505*^9, 3.5841260664878073`*^9, 
   3.5841965922525597`*^9, 3.5847411862225246`*^9, 3.5848119271099186`*^9, 
   3.5848127910631294`*^9, 3.5848168004367437`*^9, 3.5855134663487597`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Check", " ", "if", " ", "$EPIncludeDirectory", " ", "is", " ", "properly",
     " ", "initialized"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"includeDefined", "=", 
   RowBox[{"NameQ", "[", "\"\<$EPIncludeDirectory\>\"", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.422979335203125*^9, 3.4229793386875*^9}, 
   3.422979373140625*^9, 3.5604020120168333`*^9}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.422979373296875*^9, {3.422979510984375*^9, 3.422979523515625*^9}, 
   3.422979625125*^9, {3.4229796818125*^9, 3.42297970565625*^9}, {
   3.42297981590625*^9, 3.42297982615625*^9}, 3.422985292453125*^9, {
   3.42298534815625*^9, 3.422985349671875*^9}, 3.422988306625*^9, 
   3.422988485859375*^9, 3.422988595015625*^9, 3.4229890863125*^9, 
   3.422989327328125*^9, 3.4229914349375*^9, 3.422991547921875*^9, 
   3.423246824109375*^9, 3.423593158026125*^9, 3.427125433140625*^9, 
   3.430490536320125*^9, 3.430660687114149*^9, 3.439491459734375*^9, 
   3.439651141984375*^9, 3.4525393659401913`*^9, 3.453474419368375*^9, 
   3.4630825329915*^9, 3.464725210921875*^9, 3.4689662311605*^9, 
   3.46937178921875*^9, 3.46989791984375*^9, 3.46989872234375*^9, 
   3.469904036578125*^9, 3.474414657890625*^9, 3.4746432979375*^9, 
   3.4746541545*^9, {3.475260824474125*^9, 3.47526087898975*^9}, 
   3.47526101642725*^9, 3.476113289604125*^9, 3.47611608734575*^9, 
   3.476421672330125*^9, 3.477089219584125*^9, 3.477089414959125*^9, 
   3.4772627495625*^9, 3.477274053265625*^9, 3.477325732671875*^9, 
   3.477325945140625*^9, 3.477328956796875*^9, 3.4773390263125*^9, 
   3.477339407890625*^9, 3.477340097765625*^9, 3.477340243796875*^9, 
   3.477355151015625*^9, 3.47735519953125*^9, 3.477441276515625*^9, 
   3.4774416119375*^9, 3.477506250796875*^9, 3.477508705671875*^9, 
   3.477509715015625*^9, 3.477670638421875*^9, 3.477940187842375*^9, 
   3.477946192186125*^9, 3.478894791671875*^9, 3.4790691290825*^9, 
   3.479069422145*^9, 3.47907016636375*^9, 3.4792264910625*^9, 
   3.479483432515625*^9, 3.479578958546875*^9, 3.4796537917578516`*^9, 
   3.48035842881975*^9, 3.4804608091635*^9, 3.48046088544475*^9, {
   3.4804609977885*^9, 3.480461020460375*^9}, 3.48046212175725*^9, 
   3.481475239796875*^9, 3.48224363795325*^9, 3.48225569240625*^9, 
   3.482424901109375*^9, 3.4827595623125*^9, 3.482760322828125*^9, 
   3.482940954890625*^9, 3.483038135109375*^9, 3.4831144905625*^9, 
   3.483803067636033*^9, 3.48581024675825*^9, 3.4862165221645*^9, 
   3.48641364496875*^9, 3.48673836853125*^9, 3.4869964754681253`*^9, 
   3.4870824106712503`*^9, 3.4874226320306253`*^9, 3.494946175890625*^9, 
   3.4952912445625*^9, 3.4953183624375*^9, 3.495320340465174*^9, {
   3.4953764310373716`*^9, 3.4953764488533907`*^9}, 3.495382151390625*^9, 
   3.4953824675*^9, 3.495470055828125*^9, 3.4955706849204273`*^9, 
   3.4965211372255*^9, 3.496674484991125*^9, 3.497640660950625*^9, 
   3.49797989899105*^9, 3.4983071712775*^9, 3.498835399965*^9, 
   3.498838700910318*^9, 3.49884059518375*^9, 3.49901251987125*^9, 
   3.49901274749625*^9, 3.499023228074375*^9, 3.49947754405875*^9, 
   3.50042785478125*^9, 3.500428627671875*^9, 3.500495640053849*^9, 
   3.50057587903125*^9, 3.501873537140875*^9, 3.50188003521875*^9, 
   3.50203522996875*^9, 3.5020655204375*^9, 3.503085699598125*^9, 
   3.503353452379375*^9, 3.5034090122658844`*^9, 3.50387342208575*^9, 
   3.50436447639825*^9, 3.5052585944446535`*^9, 3.5052611164759035`*^9, 
   3.50638567249675*^9, 3.509833093234375*^9, 3.51006368809375*^9, 
   3.5104118596052933`*^9, 3.5105942217548723`*^9, 3.5106269123457932`*^9, 
   3.5106272003202643`*^9, 3.510627255430416*^9, 3.5127623274258137`*^9, 
   3.5127766894312735`*^9, 3.512856276478392*^9, 3.5128565140409803`*^9, 
   3.512856708585107*^9, 3.5128567511515417`*^9, 3.5128568946317487`*^9, 
   3.5128570625433526`*^9, 3.51285714397301*^9, 3.5134590177722225`*^9, 
   3.5134612012061076`*^9, 3.5136048671863317`*^9, 3.5139697968701153`*^9, 
   3.5140351415636187`*^9, 3.514035215950873*^9, 3.514067979189823*^9, 
   3.5141237716799707`*^9, 3.5142943110062623`*^9, 3.514556565903034*^9, 
   3.5145900280969133`*^9, 3.5147268457590265`*^9, 3.514729626475316*^9, 
   3.51483113371961*^9, 3.5151573574814444`*^9, 3.5152409694677763`*^9, 
   3.515331341417756*^9, 3.5160441832959795`*^9, 3.516540700115794*^9, 
   3.5169906108702173`*^9, 3.5170150652619286`*^9, 3.517058755754882*^9, 
   3.5177761866297045`*^9, 3.5178537831134214`*^9, 3.51787288799516*^9, 
   3.517941665006452*^9, 3.51818588467311*^9, 3.5181859400231876`*^9, 
   3.518186060295356*^9, 3.518193965526431*^9, 3.5184487556594925`*^9, 
   3.5184610416432104`*^9, 3.5194788109693203`*^9, 3.520174306053564*^9, 
   3.520623869950148*^9, 3.5212172919369445`*^9, 3.521733549733201*^9, 
   3.521902258698802*^9, 3.537554525440073*^9, 3.5375606722639923`*^9, 
   3.5378014070280895`*^9, 3.537801482409195*^9, 3.53780299332131*^9, 
   3.537803082621435*^9, 3.5379050687491913`*^9, 3.538149932657481*^9, 
   3.5382323382353086`*^9, 3.5383271049847345`*^9, 3.53970365554114*^9, 
   3.5399678140425253`*^9, 3.5408278937878294`*^9, 3.5408297382004128`*^9, 
   3.5411832846460266`*^9, 3.541351366621539*^9, 3.5414322164217887`*^9, 
   3.5415121357617927`*^9, 3.5415139525363216`*^9, 3.5415144100369673`*^9, 
   3.541856092107008*^9, 3.5419484168724747`*^9, 3.542035181616002*^9, 
   3.5420430117445393`*^9, 3.5420770362542143`*^9, 3.5420772584545255`*^9, {
   3.5423092020012984`*^9, 3.5423092386713495`*^9}, 3.5430107663193264`*^9, 
   3.54307231745685*^9, 3.543170184334724*^9, 3.5431763462367725`*^9, 
   3.5433445373146086`*^9, 3.5435849570908337`*^9, 3.543594963301156*^9, 
   3.5438698385985155`*^9, 3.5439328634310045`*^9, 3.544193284987238*^9, 
   3.544275731399664*^9, 3.54489992929875*^9, 3.5450644863481445`*^9, 
   3.5454058962304354`*^9, 3.545486376149122*^9, 3.5455732752568336`*^9, 
   3.545678903871024*^9, 3.5460921044038506`*^9, 3.5466115732563863`*^9, 
   3.5467945861771264`*^9, 3.5475607209425125`*^9, 3.547560764396998*^9, 
   3.5484300127323933`*^9, 3.548515576981002*^9, 3.549033089995512*^9, 
   3.5491160860478535`*^9, 3.5492046757989225`*^9, 3.5493106254682903`*^9, 
   3.54940026415633*^9, 3.549636729345152*^9, 3.551020163343152*^9, 
   3.5511898045990767`*^9, 3.551707419208593*^9, 3.5520739465167117`*^9, 
   3.5522264810889053`*^9, 3.55231214017546*^9, 3.552397827242443*^9, 
   3.552680501825306*^9, 3.5527435582644196`*^9, 3.552916030111648*^9, 
   3.553350052471755*^9, 3.5534365613113537`*^9, 3.554042375277822*^9, 
   3.555788604035823*^9, 3.556053627400292*^9, 3.5562911863315563`*^9, 
   3.5562912755916805`*^9, 3.5577680547563143`*^9, 3.5583626667113433`*^9, 
   3.5587175844124746`*^9, 3.5587942985842743`*^9, 3.558794544625347*^9, 
   3.5588829969655313`*^9, 3.559925271189818*^9, 3.559926868668188*^9, 
   3.559928261134833*^9, 3.5602775491129627`*^9, {3.560402013737932*^9, 
   3.5604020179261713`*^9}, 3.560402401457108*^9, 3.560402446351676*^9, 
   3.560402564947459*^9, 3.560402628855115*^9, 3.5604026665792723`*^9, 
   3.560402729165852*^9, 3.56040291550651*^9, {3.5604029800672026`*^9, 
   3.5604029944850273`*^9}, 3.5604032308705482`*^9, 3.5604033049577856`*^9, 
   3.560523090189109*^9, 3.5605512536689672`*^9, 3.560694237888197*^9, 
   3.560781380523471*^9, 3.560885832058757*^9, 3.5611268344033027`*^9, 
   3.561126878370817*^9, 3.5611480875014625`*^9, {3.561158633651231*^9, 
   3.561158646901249*^9}, 3.561313142307618*^9, 3.56147633699582*^9, 
   3.561516677969192*^9, 3.564326308356061*^9, 3.565713345602221*^9, 
   3.5657220723604493`*^9, 3.56719021118435*^9, 3.5672651081542187`*^9, 
   3.567301057918623*^9, 3.5673541401499443`*^9, 3.5675246662507973`*^9, 
   3.567872948491406*^9, 3.5680472459735317`*^9, 3.568403218243043*^9, 
   3.568735904053566*^9, 3.5690150310130463`*^9, 3.56907757171463*^9, 
   3.5692836018869925`*^9, 3.569511660716516*^9, 3.569604264678308*^9, 
   3.5696242995314603`*^9, 3.569857221092656*^9, 3.5698737147788324`*^9, 
   3.570318323485647*^9, 3.570387430945402*^9, 3.5703903109534626`*^9, 
   3.5709803327866135`*^9, 3.5711742969451885`*^9, 3.571500693034165*^9, 
   3.571583516000119*^9, 3.572203882362686*^9, 3.572293463666171*^9, 
   3.572377672992126*^9, 3.5723777676822586`*^9, 3.5726323528457537`*^9, 
   3.5727226943532476`*^9, 3.5727941804253473`*^9, {3.5729867543049793`*^9, 
   3.572986784255021*^9}, 3.573228598850567*^9, 3.5733098478903275`*^9, 
   3.5734002739469385`*^9, 3.5734893261856155`*^9, 3.573917872802627*^9, 
   3.5739991434254093`*^9, 3.574433603869712*^9, 3.574609332485763*^9, 
   3.5758286386013165`*^9, 3.5762532774291115`*^9, 3.5762533914892716`*^9, 
   3.57642536027905*^9, 3.5765094854028444`*^9, 3.5765926548723574`*^9, 
   3.576940391568065*^9, 3.5771128918435783`*^9, 3.5771267568090053`*^9, 
   3.577199566803958*^9, 3.577474615068606*^9, 3.5775465237553873`*^9, 
   3.578154255717516*^9, 3.5782335495266*^9, 3.5782525338780174`*^9, {
   3.5784068131390944`*^9, 3.578406827889115*^9}, 3.578669597474801*^9, 
   3.578752644433087*^9, 3.578842257557087*^9, 3.5790104597556243`*^9, 
   3.5790104963056755`*^9, {3.579445553415434*^9, 3.5794455684054546`*^9}, 
   3.5794911533883276`*^9, 3.579546953603258*^9, {3.579616189101215*^9, 
   3.5796161987912283`*^9}, 3.5800531456090174`*^9, 3.58048453733057*^9, {
   3.580655330362728*^9, 3.5806553424227448`*^9}, 3.5807374077736635`*^9, 
   3.5808551367315536`*^9, {3.5810885813265038`*^9, 3.581088598796528*^9}, 
   3.5811703120509443`*^9, 3.581175131220702*^9, 3.581258353073246*^9, 
   3.5813459902799397`*^9, 3.581432260197724*^9, 3.5818609338679357`*^9, 
   3.5818859400359745`*^9, 3.582296754174505*^9, 3.5841260664978075`*^9, 
   3.58419659226256*^9, 3.584741186232525*^9, 3.584811927129919*^9, 
   3.5848127910831294`*^9, 3.584816800446744*^9, 3.5855134663757615`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"nbFilenameQ", "[", "filename_String", "]"}], ":=", 
   RowBox[{"StringMatchQ", "[", 
    RowBox[{
     RowBox[{"Last", "[", 
      RowBox[{"StringSplit", "[", 
       RowBox[{"filename", ",", "\"\<.\>\""}], "]"}], "]"}], ",", 
     "\"\<nb\>\"", ",", 
     RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nbFilenameQ", "[", "anything_", "]"}], ":=", "False"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"runInitizationCellsInNotebook", "[", 
    RowBox[{"filename_String", "?", "nbFilenameQ"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "nb", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"nb", "=", 
       RowBox[{"NotebookOpen", "[", 
        RowBox[{
        "$EPIncludeDirectory", "<>", "\"\<\\\\\>\"", "<>", "filename"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SetSelectedNotebook", "[", "nb", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Head", "[", "nb", "]"}], "===", "NotebookObject"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"FrontEndExecute", "[", 
          RowBox[{"FrontEndToken", "[", 
           RowBox[{"nb", ",", "\"\<EvaluateInitialization\>\""}], "]"}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"NotebookClose", "[", "nb", "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.5604025848435974`*^9, 3.560402605979806*^9}, {
  3.560402647972208*^9, 3.5604026594998674`*^9}, {3.560402695979954*^9, 
  3.56040270273134*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"packageExists", ",", "loadPackage", ",", "errors"}], "}"}], ",",
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{"includeDefined", ",", "\[IndentingNewLine]", 
       RowBox[{"SetDirectory", "[", "$EPIncludeDirectory", "]"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
        "$EPIncludeDirectory", " ", "has", " ", "not", " ", "been", " ", 
         "defined"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MessageDialog", "[", 
         RowBox[{
          RowBox[{
          "\"\<Error:  $EPIncludeDirectory has not been defined.\\n\\n\>\"", 
           "<>", "\"\<$EPIncludeDirectory must be set to the local directory \
which contains the EP packages. This can be done automatically at kernel \
startup by adding the definition in the user initialization file:\\n\\n\>\"", 
           "<>", "$BaseDirectory", "<>", "\"\<\\\\Kernel\\\\init.m\>\""}], 
          ",", 
          RowBox[{"WindowTitle", "\[Rule]", "\"\<EP Package Error\>\""}]}], 
         "]"}], ";", 
        RowBox[{"Remove", "[", "$EPIncludeDirectory", "]"}], ";"}]}], "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"packageExists", "[", "packageName_", "]"}], ":=", 
      RowBox[{"If", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"FileNames", "[", "]"}], ",", 
            RowBox[{
             RowBox[{"#", "==", "packageName"}], "&"}]}], "]"}], "]"}], 
         "\[Equal]", "1"}], ",", "True", ",", "False"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"errors", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"loadPackage", "[", "package_", "]"}], ":=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"packageExists", "[", "package", "]"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"nbFilenameQ", "[", "package", "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"runInitizationCellsInNotebook", "[", "package", "]"}], 
           ",", " ", 
           RowBox[{"(*", 
            RowBox[{
            "Directly", " ", "run", " ", "initialization", " ", "cells", " ", 
             "in", " ", "*", 
             RowBox[{".", "nb"}], " ", "files"}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"Get", "[", 
            RowBox[{"Evaluate", "[", "package", "]"}], "]"}]}], "   ", 
          RowBox[{"(*", 
           RowBox[{"Get", " ", "package"}], "*)"}], "\[IndentingNewLine]", 
          "]"}], ";"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Package", " ", "not", " ", "found", " ", "in", " ", 
          "$EPIncludeDirectory"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"loadPackage", "::", "Error"}], "=", 
          RowBox[{
          "\"\<Missing EP package '\>\"", "<>", "package", "<>", 
           "\"\<'\\n\>\"", " ", "\[IndentingNewLine]", "<>", " ", 
           "\"\<Local EP Package directory is \\\"\>\"", "<>", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
            "includeDefined", ",", "$EPIncludeDirectory", ",", 
             "\"\<NULL\>\""}], "]"}], "<>", "\"\<\\\\\\\"\>\""}]}], 
         "\[IndentingNewLine]", ";", "\[IndentingNewLine]", 
         RowBox[{"Message", "[", 
          RowBox[{"loadPackage", "::", "Error"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"errors", "=", 
          RowBox[{"errors", "<>", "\"\<* \>\"", "<>", 
           RowBox[{"loadPackage", "::", "Error"}], "<>", "\"\<\\n\>\""}]}], 
         ";"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"includeDefined", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"loadPackage", "/@", "EPPackages"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ResetDirectory", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Popup", " ", "dialog", " ", "box"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"StringLength", "[", "errors", "]"}], ">", "0"}], ",", 
       RowBox[{
        RowBox[{"MessageDialog", "[", 
         RowBox[{"errors", ",", 
          RowBox[{"WindowTitle", "\[Rule]", "\"\<EP Package Error\>\""}]}], 
         "]"}], ";"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Remove", "[", "includeDefined", "]"}], ";"}]}], "Input",
 CellChangeTimes->{{3.422973402765625*^9, 3.422973448765625*^9}, {
   3.422973496921875*^9, 3.42297349775*^9}, {3.422973555421875*^9, 
   3.422973645765625*^9}, {3.42297372934375*^9, 3.42297384159375*^9}, {
   3.422973883265625*^9, 3.422973908828125*^9}, {3.4229739471875*^9, 
   3.422973971984375*^9}, {3.42297414725*^9, 3.4229741485*^9}, {
   3.422974195109375*^9, 3.422974243703125*^9}, {3.422974287859375*^9, 
   3.422974476421875*^9}, {3.42297520234375*^9, 3.42297520365625*^9}, {
   3.422975287390625*^9, 3.42297535084375*^9}, {3.422975429078125*^9, 
   3.422975450859375*^9}, {3.4229754893125*^9, 3.42297549178125*^9}, {
   3.4229755271875*^9, 3.42297553246875*^9}, {3.422975641859375*^9, 
   3.42297566740625*^9}, {3.422976409484375*^9, 3.422976449359375*^9}, {
   3.422977762515625*^9, 3.422977784296875*^9}, {3.42297783184375*^9, 
   3.422977883296875*^9}, {3.422978005734375*^9, 3.4229780085625*^9}, {
   3.422978130640625*^9, 3.422978132875*^9}, {3.422978176765625*^9, 
   3.422978192875*^9}, {3.422978290890625*^9, 3.422978294640625*^9}, {
   3.422978348640625*^9, 3.4229784021875*^9}, {3.422978729484375*^9, 
   3.422978756640625*^9}, 3.422979224703125*^9, {3.422979303234375*^9, 
   3.422979332328125*^9}, {3.422979380671875*^9, 3.42297940971875*^9}, {
   3.422979454359375*^9, 3.422979500828125*^9}, {3.4229795776875*^9, 
   3.4229796146875*^9}, 3.42299159590625*^9, {3.512763005389591*^9, 
   3.512763007556715*^9}, {3.560402041218504*^9, 3.5604020906723323`*^9}, {
   3.5604021919071226`*^9, 3.560402274116825*^9}, {3.560402306091654*^9, 
   3.560402342067711*^9}}],

Cell["\<\
Syntax::sntx: Invalid syntax in or before \"                                  \
                                                   
                                                                              \
                                                  
                                                                              \
                                                  
             ^\" (line 144 of \"HyperfineDipoleCoupling.m\").\
\>", "Message", "MSG",
 CellChangeTimes->{3.584741188152528*^9, 3.5848119285199203`*^9, 
  3.5848127923331313`*^9, 3.5848168017567463`*^9, 3.585513469658949*^9}],

Cell["\<\
Syntax::sntx: Invalid syntax in or before \
\"\\*UnderoverscriptBox[\\(\\[Sum]\\), \\(j = 1\\),
                                              \\(Length[image[\\([\\)\\(1\\)\\\
(]\\)]]\\)]massNorm[\\(image[\\([\\)\\(i\\)\\(]\\)]\\)[\\([\\)\\(j\\)\\
                                              (]\\)]]\\)\\);
                                                                              \
                                                  
                                                                              \
                  ^
      \" (line 203 of \"absorptionImagePackage.m\").\
\>", "Message", "MSG",
 CellChangeTimes->{3.584741188152528*^9, 3.5848119285199203`*^9, 
  3.5848127923331313`*^9, 3.5848168017567463`*^9, 3.5855134704139924`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Directories", "Section",
 CellChangeTimes->{{3.482243606797*^9, 3.482243609718875*^9}, {
  3.5129277019976983`*^9, 3.512927705148878*^9}, {3.5129290512458706`*^9, 
  3.5129290519339104`*^9}, {3.513452641275508*^9, 3.513452642771593*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$HistoryLength", "=", "10"}]], "Input",
 CellChangeTimes->{{3.561738225262972*^9, 3.561738225341977*^9}}],

Cell[BoxData["10"], "Output",
 CellChangeTimes->{
  3.5617382259980145`*^9, 3.564326311196065*^9, 3.5644147844360137`*^9, 
   3.5645007066223416`*^9, 3.5657133481022243`*^9, 3.567188878392484*^9, 
   3.567190214154354*^9, 3.567265113644226*^9, 3.567301063938631*^9, 
   3.5673541425099473`*^9, 3.567436724956601*^9, 3.5675246750008097`*^9, 
   3.567872954171414*^9, 3.5679564745983934`*^9, 3.568047259573551*^9, 
   3.5684032304630604`*^9, 3.5686428012161703`*^9, 3.5687359267335978`*^9, 
   3.56901503401305*^9, 3.5690775739546337`*^9, 3.569167263703232*^9, 
   3.5692580868192153`*^9, 3.569283617337014*^9, 3.5695116703765297`*^9, 
   3.5695957718484106`*^9, 3.5696042696883154`*^9, 3.569624301441463*^9, 
   3.569644885711317*^9, 3.569769118350302*^9, 3.569857223462659*^9, 
   3.56994527783505*^9, 3.5703018082254972`*^9, 3.570318332115659*^9, 
   3.5703360016003976`*^9, 3.5703874334554057`*^9, 3.570390313903467*^9, 
   3.570401170976693*^9, 3.5708919460398655`*^9, 3.5709803353366175`*^9, 
   3.5710646455266685`*^9, 3.5711742998751926`*^9, 3.571500697074171*^9, 
   3.571583518120122*^9, 3.5716688489825926`*^9, 3.5720984627730894`*^9, 
   3.57220388538269*^9, 3.572293465996174*^9, 3.57237767571213*^9, 
   3.5723777696122613`*^9, 3.5726323549057565`*^9, 3.5727226968232512`*^9, 
   3.57279418253535*^9, {3.572986756374982*^9, 3.572986786235024*^9}, 
   3.573228601830571*^9, 3.5733098498603306`*^9, 3.573400275976941*^9, 
   3.5734893282756186`*^9, 3.573833126597953*^9, 3.57391787486263*^9, 
   3.5739991476054153`*^9, 3.5744336061497154`*^9, 3.5745178205906363`*^9, 
   3.5746093363157682`*^9, 3.574691039518159*^9, 3.5756404311355715`*^9, 
   3.575828640751319*^9, 3.575902261347398*^9, 3.576253279579115*^9, 
   3.5762533949792767`*^9, 3.576334633805019*^9, 3.5764253755990715`*^9, 
   3.576509509742879*^9, 3.576592669652378*^9, 3.5769404230781097`*^9, 
   3.5770235193354497`*^9, 3.5771128961535845`*^9, 3.577126760749011*^9, 
   3.5771995709639635`*^9, 3.577474617218609*^9, 3.577546525875391*^9, 
   3.578063327139062*^9, 3.578154258097519*^9, 3.5782335555566087`*^9, 
   3.5782525284980097`*^9, 3.578322953740658*^9, {3.5784068277791147`*^9, 
   3.578406830049118*^9}, 3.578669609224818*^9, 3.578752648803093*^9, 
   3.5788422596170897`*^9, 3.5789221598309703`*^9, 3.5790104656856327`*^9, 
   3.5790104983556786`*^9, {3.5794455554754367`*^9, 3.5794455703154573`*^9}, 
   3.5794911553983307`*^9, 3.5795469565532627`*^9, {3.579616191081218*^9, 
   3.5796162020512333`*^9}, 3.580053149119022*^9, 3.5804845397505736`*^9, 
   3.580566986891035*^9, {3.5806553423627453`*^9, 3.5806553468027515`*^9}, 
   3.580737422833685*^9, 3.58082479574304*^9, 3.5808551504115725`*^9, {
   3.581088589356515*^9, 3.581088602016533*^9}, 3.5811703157709494`*^9, 
   3.5811751262306952`*^9, 3.5812570777604604`*^9, 3.5812583598632555`*^9, 
   3.5813459922899427`*^9, 3.581432262327727*^9, 3.58169131616873*^9, 
   3.5818609364779396`*^9, 3.582039247548058*^9, 3.582296774994534*^9, 
   3.5826486382613196`*^9, 3.584126074077818*^9, 3.5841965946325636`*^9, 
   3.584741191532532*^9, 3.584811643759522*^9, 3.5849038152540193`*^9, 
   3.584978391928359*^9, 3.599583167739888*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"todaysDate", "=", 
   RowBox[{"ToString", "/@", 
    RowBox[{"Drop", "[", 
     RowBox[{
      RowBox[{"Date", "[", "]"}], ",", 
      RowBox[{"-", "3"}]}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"dateDir", "=", 
  RowBox[{"\"\<\\\\\>\"", "<>", 
   RowBox[{
   "todaysDate", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
   "<>", "\"\<\\\\\>\"", "<>", 
   RowBox[{
   "todaysDate", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
   "<>", "\"\<\\\\\>\"", "<>", 
   RowBox[{
   "todaysDate", "\[LeftDoubleBracket]", "3", 
    "\[RightDoubleBracket]"}]}]}]}], "Input",
 CellChangeTimes->{{3.5382304271470003`*^9, 3.5382304792229786`*^9}, {
  3.5382320863359003`*^9, 3.538232111247325*^9}, {3.5382321951351233`*^9, 
  3.538232195280132*^9}}],

Cell[BoxData["\<\"\\\\2014\\\\1\\\\24\"\>"], "Output",
 CellChangeTimes->{
  3.5475607233096476`*^9, 3.547560766338109*^9, 3.5475608794815807`*^9, 
   3.547560959498157*^9, 3.5484300182524014`*^9, 3.5485155791910048`*^9, 
   3.5490330922755156`*^9, 3.549033135675576*^9, 3.5491160882878566`*^9, 
   3.549204677998925*^9, 3.5493106277304196`*^9, 3.5494002666144705`*^9, 
   3.549636733015157*^9, 3.5497221244408193`*^9, 3.5500810656822624`*^9, 
   3.5500907130067687`*^9, 3.5502411057233253`*^9, 3.5504225624674444`*^9, 
   3.5505004238953805`*^9, 3.550588661062258*^9, 3.5510201662333174`*^9, 
   3.5511041904512277`*^9, 3.551189806851206*^9, 3.551455125826583*^9, 
   3.5516228845308323`*^9, 3.5517074232385983`*^9, 3.551793621754919*^9, 
   3.5520739487667146`*^9, 3.55215251373872*^9, 3.5522264835789084`*^9, 
   3.5522265775490427`*^9, 3.5523121606454887`*^9, 3.5523978454024687`*^9, 
   3.552680506751588*^9, 3.5527435604444227`*^9, 3.5528304740501213`*^9, 
   3.5529160323407755`*^9, 3.5530049975922966`*^9, 3.5532698568898296`*^9, 
   3.5533500564519825`*^9, 3.5534365554940205`*^9, 3.5535213015022154`*^9, 
   3.5539697933211327`*^9, 3.554042378737827*^9, 3.55412668610896*^9, 
   3.555788601377671*^9, 3.556053629672422*^9, 3.556291190621562*^9, 
   3.556291277401684*^9, 3.5563743814666758`*^9, 3.5577680576274786`*^9, 
   3.557857860018881*^9, 3.5581047787479954`*^9, 3.558275608019871*^9, 
   3.558362669115481*^9, 3.5584511461480775`*^9, 3.5587175868476143`*^9, 
   3.558794295561102*^9, 3.55879454747451*^9, 3.558882999806694*^9, {
   3.5588833717889705`*^9, 3.5588833977974577`*^9}, 3.5590576083167295`*^9, 
   3.559316152264598*^9, 3.5594882809947977`*^9, 3.559574425200965*^9, 
   3.559772945230661*^9, 3.5599252761841035`*^9, 3.559926874623529*^9, 
   3.559928252815357*^9, 3.5602775509980707`*^9, 3.560522484306454*^9, 
   3.560522820355675*^9, 3.5605512566711397`*^9, 3.5606081364304757`*^9, 
   3.560694240571351*^9, 3.560781383237626*^9, 3.5608757106988487`*^9, 
   3.560885837453066*^9, 3.5611268408826733`*^9, 3.5611268806119456`*^9, 
   3.5611480994314795`*^9, 3.5612197908948565`*^9, 3.5613131572994757`*^9, {
   3.5613887331781683`*^9, 3.5613887587086287`*^9}, 3.5614763635593395`*^9, 
   3.5615167004334764`*^9, 3.56173653282417*^9, 3.564326311206065*^9, 
   3.5644147844460135`*^9, 3.5657133481122246`*^9, {3.5657134824824123`*^9, 
   3.565713499142436*^9}, 3.565722082020463*^9, 3.567188878412484*^9, 
   3.5671902141643543`*^9, 3.5672651136542263`*^9, 3.5673010639686313`*^9, 
   3.567354142519947*^9, 3.567436724966601*^9, 3.56752467501081*^9, 
   3.5678729541814137`*^9, 3.5679564746083937`*^9, 3.568003678540535*^9, 
   3.568047259603551*^9, 3.568134622580974*^9, 3.5684032304830604`*^9, 
   3.5685633092207313`*^9, 3.5686428016861706`*^9, 3.568735926823598*^9, 
   3.56899114722109*^9, 3.5690150340330505`*^9, 3.5690775739746337`*^9, 
   3.5691672642232323`*^9, 3.5692580868392153`*^9, 3.5692836178070145`*^9, 
   3.569511670396529*^9, 3.5695957718784103`*^9, 3.569604270128316*^9, 
   3.569624301461463*^9, 3.569644885721317*^9, 3.569769118880303*^9, 
   3.569857223472659*^9, 3.56994527784505*^9, 3.5703018087454987`*^9, 
   3.570318332135659*^9, 3.5703360029304*^9, 3.5703874334754057`*^9, 
   3.570390313913467*^9, 3.570401171006693*^9, 3.570891946139866*^9, 
   3.570980335346617*^9, 3.5710646455366683`*^9, 3.571174299895193*^9, 
   3.571500697084171*^9, 3.571583518120122*^9, 3.571668849012593*^9, 
   3.5720984628130894`*^9, 3.5722038853926897`*^9, 3.572293466006174*^9, 
   3.57237767572213*^9, 3.5723777696322613`*^9, 3.5723778239323373`*^9, 
   3.5726323549157567`*^9, 3.572722696833251*^9, 3.5727941825553503`*^9, {
   3.572986756384982*^9, 3.5729867862450237`*^9}, 3.572986819965071*^9, 
   3.5732286018405714`*^9, 3.5733098498703303`*^9, 3.5734002759869413`*^9, 
   3.5734893283056183`*^9, 3.573833126607953*^9, 3.5739178748826303`*^9, 
   3.573999147615415*^9, 3.574433606159715*^9, 3.5745178206006365`*^9, 
   3.5746093363257685`*^9, 3.574691039528159*^9, 3.5756404311455717`*^9, 
   3.575828640761319*^9, 3.5759022613673983`*^9, 3.576253279589115*^9, 
   3.5762533950092764`*^9, 3.576334633835019*^9, 3.576425375649071*^9, 
   3.576509509762879*^9, 3.576592669672378*^9, 3.57694042312811*^9, 
   3.57702351936545*^9, 3.5771128961635847`*^9, 3.577126760759011*^9, 
   3.5771995709839635`*^9, 3.577474617228609*^9, 3.5775465258853908`*^9, 
   3.5780633271490617`*^9, 3.578154258107519*^9, 3.5782335555666084`*^9, 
   3.57825252852801*^9, 3.578322953760658*^9, {3.5784068278091145`*^9, 
   3.578406830069118*^9}, 3.5786696092448177`*^9, 3.5787526488130927`*^9, 
   3.57884225962709*^9, 3.5789221598509703`*^9, 3.579010465695633*^9, 
   3.579010498365679*^9, {3.579445555485437*^9, 3.5794455703254576`*^9}, 
   3.579491155418331*^9, 3.579546956563263*^9, {3.5796161910912175`*^9, 
   3.579616202061233*^9}, 3.5800531491290216`*^9, 3.5804845397605734`*^9, 
   3.5805669869110355`*^9, {3.580655342372745*^9, 3.580655346822751*^9}, 
   3.5807374228536844`*^9, 3.5808247957630396`*^9, 3.580855150441573*^9, {
   3.581088589376515*^9, 3.5810886020465326`*^9}, 3.58117031579095*^9, 
   3.581175126270695*^9, 3.58125707777046*^9, 3.5812583598732553`*^9, 
   3.5813459922999425`*^9, 3.581432262347727*^9, 3.58169131617873*^9, 
   3.581860936497939*^9, 3.582039247568058*^9, 3.582296775004534*^9, 
   3.5826486382813196`*^9, 3.5841260740978174`*^9, 3.5841965946425633`*^9, 
   3.5847411915425324`*^9, 3.584811643789522*^9, 3.5849038152940197`*^9, 
   3.584978391968359*^9, 3.5995831677838907`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"dateDir", "=", "\"\<\\\\2012\\\\12\\\\13\>\""}], ";"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.564500699802332*^9, 3.5645007137023516`*^9}, {
  3.565713477772406*^9, 3.5657134945224295`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"pictureDir", "=", 
   RowBox[{
   "\"\<\\\\\\\\Epsrv1\\\\ep\\\\data\>\"", "<>", "dateDir", "<>", 
    "\"\<\\\\data\\\\\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xmlDataDir", "=", 
   RowBox[{
   "\"\<\\\\\\\\Epsrv1\\\\ep\\\\data\>\"", "<>", "dateDir", "<>", 
    "\"\<\\\\experiments\\\\\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"xmlSeqDir", "=", 
   RowBox[{
   "\"\<\\\\\\\\Epsrv1\\\\ep\\\\data\>\"", "<>", "dateDir", "<>", 
    "\"\<\\\\sequences\\\\\>\""}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.481475388640625*^9, 3.48147539346875*^9}, {
   3.48224362020325*^9, 3.482243625812625*^9}, {3.482430959640625*^9, 
   3.482430962171875*^9}, {3.482519006015625*^9, 3.48251901284375*^9}, {
   3.482759565390625*^9, 3.4827595668125*^9}, {3.482852755984375*^9, 
   3.48285276053125*^9}, {3.48292977715625*^9, 3.48292977853125*^9}, {
   3.483038115578125*^9, 3.48303811696875*^9}, {3.4831061195*^9, 
   3.48310612171875*^9}, {3.4838029967376947`*^9, 3.4838029990817*^9}, {
   3.485810250867625*^9, 3.48581025950825*^9}, {3.486216492602*^9, 
   3.486216494492625*^9}, {3.486309603742625*^9, 3.486309605492625*^9}, {
   3.486393614742625*^9, 3.486393618680125*^9}, {3.48649024821875*^9, 
   3.486490249453125*^9}, {3.486738348265625*^9, 3.486738349703125*^9}, {
   3.486842622359375*^9, 3.48684262515625*^9}, {3.48692736390625*^9, 
   3.486927368484375*^9}, {3.4869964645618753`*^9, 3.4869964714212503`*^9}, {
   3.4870824167806253`*^9, 3.4870824183275003`*^9}, {3.4874226123431253`*^9, 
   3.4874226150306253`*^9}, {3.494946181921875*^9, 3.4949461893125*^9}, {
   3.49521429546875*^9, 3.49521429840625*^9}, {3.49529123525*^9, 
   3.495291236375*^9}, {3.4953819704002047`*^9, 3.495381971399262*^9}, {
   3.4954700475625*^9, 3.49547004896875*^9}, {3.4955706712641773`*^9, 
   3.4955706750454273`*^9}, {3.496521129022375*^9, 3.496521131663*^9}, {
   3.49658856888175*^9, 3.496588571678625*^9}, {3.496674485928625*^9, 
   3.496674487209875*^9}, {3.496758525928625*^9, 3.49675852706925*^9}, {
   3.497640638294375*^9, 3.497640642325625*^9}, {3.497814635669375*^9, 
   3.49781463696625*^9}, {3.49787336159125*^9, 3.497873364263125*^9}, {
   3.497979902179264*^9, 3.4979799037889996`*^9}, {3.4983071745275*^9, 
   3.498307177793125*^9}, {3.49840420834*^9, 3.498404210699375*^9}, {
   3.4985139227775*^9, 3.49851392487125*^9}, {3.498835377355625*^9, 
   3.498835378699375*^9}, {3.4989389672775*^9, 3.498938972293125*^9}, {
   3.499009237465*^9, 3.49900923874625*^9}, {3.499089979761875*^9, 
   3.499089980949375*^9}, {3.499194975136875*^9, 3.49919497618375*^9}, {
   3.499284994261875*^9, 3.49928499787125*^9}, {3.49936266199625*^9, 
   3.49936266359*^9}, {3.49944527537125*^9, 3.49944527659*^9}, {
   3.499530775918125*^9, 3.49953077959*^9}, {3.500063182545*^9, 
   3.50006318370125*^9}, {3.50013008582625*^9, 3.50013008845125*^9}, {
   3.500218166435625*^9, 3.50021817220125*^9}, {3.500300759466875*^9, 
   3.500300761341875*^9}, {3.500427849734375*^9, 3.50042785159375*^9}, {
   3.500478939046875*^9, 3.500478940140625*^9}, {3.5005670619526715`*^9, 
   3.500567064043075*^9}, {3.500655092125*^9, 3.500655094359375*^9}, {
   3.500740797078125*^9, 3.5007407983125*^9}, {3.5009220758125*^9, 
   3.5009220775625*^9}, {3.5010988243328753`*^9, 3.5010988271922503`*^9}, {
   3.5011896422860003`*^9, 3.5011896444266253`*^9}, {3.5012630485985003`*^9, 
   3.5012630515828753`*^9}, {3.5014438248485003`*^9, 
   3.5014438264735003`*^9}, {3.5015462451297503`*^9, 
   3.5015462469110003`*^9}, {3.5016129312844353`*^9, 3.501612933425457*^9}, {
   3.501706687515875*^9, 3.5017066889065*^9}, {3.501873523594*^9, 
   3.501873526984625*^9}, {3.501907915796875*^9, 3.501907916859375*^9}, {
   3.5020290925*^9, 3.502029093640625*^9}, {3.50213428390625*^9, 
   3.502134284890625*^9}, {3.503085705223125*^9, 3.50308571455125*^9}, {
   3.50314926886375*^9, 3.5031492717075*^9}, {3.503351677598125*^9, 
   3.5033516787075*^9}, {3.503408537098125*^9, 3.503408538285625*^9}, {
   3.503673931992*^9, 3.503673934538875*^9}, {3.503755754538875*^9, 
   3.503755756288875*^9}, {3.503837720757625*^9, 3.503837723695125*^9}, {
   3.503944675163875*^9, 3.503944678132625*^9}, {3.504295810632625*^9, 
   3.504295812367*^9}, {3.504364489445125*^9, 3.50436449046075*^9}, {
   3.50447405002325*^9, 3.504474051226375*^9}, {3.504995954875*^9, 
   3.50499595865625*^9}, {3.50501829265625*^9, 3.50501829425*^9}, {
   3.50516891459375*^9, 3.505168916203125*^9}, {3.5052237802884035`*^9, 
   3.5052237814759035`*^9}, {3.505314212835*^9, 3.505314219381875*^9}, {
   3.505419907585*^9, 3.50541991024125*^9}, {3.505483356163125*^9, 
   3.505483357756875*^9}, {3.505568902131875*^9, 3.505568907835*^9}, {
   3.5063856679655*^9, 3.50638566955925*^9}, {3.506534088637375*^9, 
   3.506534089731125*^9}, {3.50661890743425*^9, 3.506618909168625*^9}, {
   3.5098330988125*^9, 3.509833105578125*^9}, {3.50999110425*^9, 
   3.509991105734375*^9}, {3.510063682625*^9, 3.510063683609375*^9}, {
   3.5102517464604454`*^9, 3.510251749028592*^9}, {3.51035510490021*^9, 
   3.5103551060262747`*^9}, {3.51040596392618*^9, 3.51040596637432*^9}, {
   3.510490801603904*^9, 3.510490805132106*^9}, {3.510543792487809*^9, 
   3.510543794039898*^9}, {3.5105438299909544`*^9, 3.5105438313590326`*^9}, {
   3.510546733216009*^9, 3.510546735735153*^9}, {3.5105941997775755`*^9, 
   3.5105942192548685`*^9}, {3.5107120087224174`*^9, 
   3.5107120147067595`*^9}, {3.5107174086322746`*^9, 
   3.5107174094703226`*^9}, {3.5127623208254366`*^9, 
   3.5127623218154926`*^9}, {3.51285627154211*^9, 3.512856272645173*^9}, {
   3.512929055359106*^9, 3.512929056374164*^9}, {3.5134526468538265`*^9, 
   3.5134526509650617`*^9}, {3.513534312935859*^9, 3.5135343210003204`*^9}, {
   3.5136048635721245`*^9, 3.5136048649952064`*^9}, {3.5136903504086924`*^9, 
   3.5136903514237504`*^9}, {3.5139698555124693`*^9, 3.513969859151678*^9}, {
   3.51403517830872*^9, 3.514035182587965*^9}, {3.514123767053706*^9, 
   3.514123768589794*^9}, {3.5142132090034933`*^9, 3.5142132111076136`*^9}, {
   3.5142943034078283`*^9, 3.514294304631898*^9}, {3.5145565098429556`*^9, 
   3.514556515402963*^9}, {3.5146392930439243`*^9, 3.514639295613928*^9}, {
   3.514726715948845*^9, 3.514726722968855*^9}, {3.5148313244558783`*^9, 
   3.5148313260058804`*^9}, {3.5149038912235126`*^9, 3.514903893793516*^9}, {
   3.5151573695161324`*^9, 3.5151573710042176`*^9}, {3.515240700120371*^9, 
   3.5152407014964495`*^9}, {3.5153313371975145`*^9, 3.515331338301578*^9}, {
   3.5159607398022847`*^9, 3.515960748761797*^9}, {3.5160227958686886`*^9, 
   3.5160227973007703`*^9}, {3.5164823231418223`*^9, 
   3.5164823243098893`*^9}, {3.516540703818006*^9, 3.5165407049770727`*^9}, {
   3.5167116350697145`*^9, 3.5167116390209403`*^9}, {3.516990633362504*^9, 
   3.5169906352516117`*^9}, {3.517058468574456*^9, 3.517058470302555*^9}, {
   3.5171474245214453`*^9, 3.517147426856579*^9}, {3.5177761902197104`*^9, 
   3.517776193769715*^9}, {3.5178535129519625`*^9, 3.5178535160419674`*^9}, {
   3.517941291715926*^9, 3.517941296895934*^9}, {3.5181826663189087`*^9, 
   3.5181826683510246`*^9}, {3.518377929927492*^9, 3.518377931343573*^9}, {
   3.5184610453814244`*^9, 3.5184610499486856`*^9}, {3.518524274352915*^9, 
   3.518524279137188*^9}, {3.519057914511386*^9, 3.5190579158634634`*^9}, {
   3.5191557964369116`*^9, 3.5191557985480323`*^9}, {3.519323090014557*^9, 
   3.5193230926697087`*^9}, {3.519478814279325*^9, 3.5194788158693275`*^9}, {
   3.519741437466897*^9, 3.5197414400420446`*^9}, {3.519932842429635*^9, 
   3.5199328442867413`*^9}, {3.519964517743359*^9, 3.519964518911426*^9}, {
   3.520047751453055*^9, 3.520047753620179*^9}, {3.5201703275070047`*^9, 
   3.5201703324752884`*^9}, {3.520623918013897*^9, 3.520623920797056*^9}, {
   3.520706799601453*^9, 3.520706800561508*^9}, {3.520783766926732*^9, 
   3.5207837695578823`*^9}, {3.5212172969332304`*^9, 3.521217304776679*^9}, {
   3.521298082444897*^9, 3.5212980834689555`*^9}, {3.5213809578420987`*^9, 
   3.5213809591221724`*^9}, {3.52173355373343*^9, 3.5217335549254985`*^9}, {
   3.521834113939145*^9, 3.5218341150352077`*^9}, {3.521912664487979*^9, 
   3.521912668015181*^9}, {3.5304605573328047`*^9, 3.530460564282815*^9}, {
   3.5306315773169236`*^9, 3.5306315789969263`*^9}, {3.5309807139282722`*^9, 
   3.5309807175082774`*^9}, {3.5375544532259426`*^9, 
   3.5375544682238007`*^9}, {3.537554701304132*^9, 3.537554706471428*^9}, 
   3.537568063666354*^9, {3.5375681102664194`*^9, 3.537568146208471*^9}, {
   3.5376340391517267`*^9, 3.5376340554417496`*^9}, {3.5377349269259872`*^9, 
   3.537734929295991*^9}, {3.537803052871393*^9, 3.537803058491401*^9}, {
   3.537893034463376*^9, 3.5378930397433834`*^9}, {3.538149942097494*^9, 
   3.538149945227499*^9}, {3.538230490184606*^9, 3.538230498631089*^9}, {
   3.5382320553361273`*^9, 3.538232066271753*^9}, {3.5382321693436484`*^9, 
   3.5382322342153587`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Threshold peak finder", "Section",
 CellChangeTimes->{{3.584972800283499*^9, 3.5849728100535126`*^9}}],

Cell[CellGroupData[{

Cell["Functions", "Subsection",
 CellChangeTimes->{{3.5849746921741543`*^9, 3.5849746975241623`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"GetFormatedScopeMeasurement", "[", 
   RowBox[{"meas_List", ",", 
    RowBox[{"vScale_:", "1"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"verticalScale", ",", "timeBase"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verticalScale", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"meas", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<VerticalScale\>\"", ",", "_"}], "}"}]}], "]"}], 
         "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "//", "N"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"timeBase", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"meas", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<TimeBase\>\"", ",", "_"}], "}"}]}], "]"}], 
         "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "//", "N"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"i", "*", "timeBase"}], ",", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], "*",
              "vScale"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}], "&"}], "@", 
       RowBox[{"Last", "[", "meas", "]"}]}]}]}], "\[IndentingNewLine]", "]"}],
    "/;", 
   RowBox[{"NumberQ", "[", "vScale", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.553354727388867*^9, 3.5533547490631065`*^9}, {
  3.5533547807979217`*^9, 3.553354837887187*^9}, {3.55335486924098*^9, 
  3.553354999507431*^9}, {3.558985877156485*^9, 3.5589858852999506`*^9}, {
  3.5589859510747128`*^9, 3.5589859511347165`*^9}, {3.5589860300012274`*^9, 
  3.5589860301972384`*^9}, {3.5589867530775847`*^9, 3.5589867775769863`*^9}, {
  3.5595139322267475`*^9, 3.5595139325727673`*^9}, {3.5595713205862966`*^9, 
  3.559571320738305*^9}, {3.5599210958809605`*^9, 3.559921097067028*^9}, {
  3.55992122857655*^9, 3.559921228741559*^9}, {3.5618373369204826`*^9, 
  3.5618373763005376`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"GetFormatedScopeMeasurement", "[", 
   RowBox[{"meas_List", ",", 
    RowBox[{"vScale_:", "1"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"verticalScale", ",", "timeBase"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"verticalScale", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"meas", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<VerticalScale\>\"", ",", "_"}], "}"}]}], "]"}], 
         "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "//", "N"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"timeBase", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Cases", "[", 
          RowBox[{"meas", ",", 
           RowBox[{"{", 
            RowBox[{"\"\<TimeBase\>\"", ",", "_"}], "}"}]}], "]"}], 
         "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "//", "N"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"i", "*", "timeBase"}], "+", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
              ",", 
              RowBox[{
               RowBox[{"#", "\[LeftDoubleBracket]", 
                RowBox[{"2", ",", "i"}], "\[RightDoubleBracket]"}], "*", 
               "vScale"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               "]"}]}], "}"}]}], "]"}], "&"}], "/@", 
         RowBox[{"Last", "[", "meas", "]"}]}], ",", "1"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}], "/;", 
   RowBox[{"NumberQ", "[", "vScale", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.553354727388867*^9, 3.5533547490631065`*^9}, {
  3.5533547807979217`*^9, 3.553354837887187*^9}, {3.55335486924098*^9, 
  3.553354999507431*^9}, {3.558985877156485*^9, 3.5589858852999506`*^9}, {
  3.5589859510747128`*^9, 3.5589859511347165`*^9}, {3.5589860300012274`*^9, 
  3.5589860301972384`*^9}, {3.5589867530775847`*^9, 3.5589867775769863`*^9}, {
  3.5595139322267475`*^9, 3.5595139325727673`*^9}, {3.5595713205862966`*^9, 
  3.559571320738305*^9}, {3.5599210958809605`*^9, 3.559921097067028*^9}, {
  3.55992122857655*^9, 3.559921228741559*^9}, {3.5618373369204826`*^9, 
  3.5618373763005376`*^9}, {3.584907323045942*^9, 3.5849073572259893`*^9}, {
  3.584907398856048*^9, 3.584907433946097*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gatherDataByThresholdCut", "[", "formatedData_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"deltaXs", ",", "dx", ",", "breaks"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"deltaXs", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", "-", 
          RowBox[{"RotateLeft", "[", 
           RowBox[{"#", ",", "1"}], "]"}]}], ")"}], "&"}], "@", 
       RowBox[{"formatedData", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dx", "=", 
      RowBox[{"Abs", "[", 
       RowBox[{
        RowBox[{"Commonest", "[", "deltaXs", "]"}], "\[LeftDoubleBracket]", 
        "1", "\[RightDoubleBracket]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"breaks", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", "0", "}"}], "}"}], "~", "Join", "~", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Abs", "[", "#", "]"}], ">", 
                 RowBox[{"2", "*", "dx"}]}], ",", "1", ",", "0"}], "]"}], 
              "&"}], ")"}], "/@", "deltaXs"}], ",", "1"}], "]"}]}], ")"}]}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{"formatedData", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "+", 
            RowBox[{
            "breaks", "\[LeftDoubleBracket]", "i", 
             "\[RightDoubleBracket]"}]}], ",", 
           RowBox[{"breaks", "\[LeftDoubleBracket]", 
            RowBox[{"i", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}]}], 
        "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{
          RowBox[{"Length", "[", "breaks", "]"}], "-", "1"}]}], "}"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.5849730771038866`*^9, 3.58497314412398*^9}, {
  3.584973188354042*^9, 3.5849732659241505`*^9}, {3.5849734428404055`*^9, 
  3.584973455030422*^9}, {3.584973862440993*^9, 3.5849738883210287`*^9}, {
  3.584973953733121*^9, 3.5849740487832537`*^9}, {3.584974100433326*^9, 
  3.584974151093397*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getPeakInfoInSection", "[", "data_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"peakLoc", ",", "sectionRange"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"peakLoc", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Position", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Max", "[", "#", "]"}]}], "]"}], "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "&"}], "@", 
       "data"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sectionRange", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Min", "[", "#", "]"}], ",", 
          RowBox[{"Max", "[", "#", "]"}]}], "}"}], "&"}], "@", 
       RowBox[{"data", "\[LeftDoubleBracket]", 
        RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
       "data", "\[LeftDoubleBracket]", "peakLoc", "\[RightDoubleBracket]"}], 
       ",", "sectionRange"}], "}"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5849742848535843`*^9, 3.5849743973337417`*^9}, {
  3.5849744574438257`*^9, 3.584974457833826*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getBiggestPeakFromPeakInfo", "[", "allPeaks_List", "]"}], ":=", 
  RowBox[{
   RowBox[{"First", "[", 
    RowBox[{"Sort", "[", 
     RowBox[{"allPeaks", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"#1", "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ">", 
        RowBox[{"#2", "\[LeftDoubleBracket]", 
         RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], "&"}]}], "]"}],
     "]"}], "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]], "Input",
 CellChangeTimes->{{3.58497503185463*^9, 3.584975073354688*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findClosestPeakToTargetFromPeakInfo", "[", 
   RowBox[{"allPeaks_List", ",", "targetXLocation_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
            RowBox[{"Min", "[", 
             RowBox[{"Abs", "[", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
               "-", "targetXLocation"}], "]"}], "]"}]}], "}"}], "&"}], "/@", 
         "allPeaks"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{
          "#1", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "<", 
          RowBox[{
          "#2", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
         "&"}]}], "]"}], "]"}], "\[LeftDoubleBracket]", "1", 
     "\[RightDoubleBracket]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.5849753444950676`*^9, 3.5849754015251474`*^9}, {
  3.58497554286237*^9, 3.584975659252533*^9}, {3.584975705692598*^9, 
  3.584975742112649*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCalibrationUsingAllPeaks", "[", 
   RowBox[{"allPeaks_List", ",", "fsrXdistance_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "biggestPeak", ",", "bigPeakXVal", ",", "candidatePeaks", ",", 
      "allPairs"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"biggestPeak", "=", 
      RowBox[{"getBiggestPeakFromPeakInfo", "[", "allPeaks", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"bigPeakXVal", "=", 
      RowBox[{
      "biggestPeak", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"candidatePeaks", "=", 
      RowBox[{"{", "biggestPeak", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"candidatePeaks", ",", "\[IndentingNewLine]", 
       RowBox[{"findClosestPeakToTargetFromPeakInfo", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Drop", "[", 
             RowBox[{"#", ",", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"biggestPeak", ",", "_"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             "]"}], "&"}], "@", "allPeaks"}], ")"}], ",", 
         RowBox[{"bigPeakXVal", "-", "fsrXdistance"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"candidatePeaks", ",", "\[IndentingNewLine]", 
       RowBox[{"findClosestPeakToTargetFromPeakInfo", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Drop", "[", 
             RowBox[{"#", ",", 
              RowBox[{
               RowBox[{"Position", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"biggestPeak", ",", "_"}], "}"}]}], "]"}], 
               "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
             "]"}], "&"}], "@", "allPeaks"}], ")"}], ",", 
         RowBox[{"bigPeakXVal", "+", "fsrXdistance"}]}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"allPairs", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#1", ",", "#2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"#3", ",", "#2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"#1", ",", "#3"}], "}"}]}], "}"}], "&"}], "@@", 
       RowBox[{"Sort", "[", 
        RowBox[{"candidatePeaks", ",", 
         RowBox[{
          RowBox[{
           RowBox[{
           "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "<", 
           RowBox[{
           "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "&"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "candidatePeaks", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Pick", " ", "the", " ", "pair", " ", "that", " ", "has", " ", "the", 
       " ", "separation", " ", "most", " ", "similar", " ", "to", " ", 
       RowBox[{"fsrXdistance", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"Sort", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Abs", "[", 
             RowBox[{
              RowBox[{"Abs", "[", 
               RowBox[{
                RowBox[{"#", "\[LeftDoubleBracket]", 
                 RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
                RowBox[{"#", "\[LeftDoubleBracket]", 
                 RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], "]"}], 
              "-", "fsrXdistance"}], "]"}], ",", "#"}], "}"}], "&"}], "/@", 
         "allPairs"}], "]"}], "]"}], "\[LeftDoubleBracket]", "2", 
      "\[RightDoubleBracket]"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Take", "[", 
     RowBox[{
      RowBox[{"Sort", "[", 
       RowBox[{"candidatePeaks", ",", 
        RowBox[{
         RowBox[{
          RowBox[{
          "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "<", 
          RowBox[{
          "#2", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
         "&"}]}], "]"}], ",", 
      RowBox[{"Min", "[", 
       RowBox[{"2", ",", 
        RowBox[{"Length", "[", "candidatePeaks", "]"}]}], "]"}]}], "]"}], 
    "*)"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.584974802524309*^9, 3.5849748199543333`*^9}, {
   3.58497486026439*^9, 3.584974892304435*^9}, {3.584974929884487*^9, 
   3.5849749583145275`*^9}, {3.584974998814584*^9, 3.5849750287446256`*^9}, {
   3.5849750854347053`*^9, 3.5849751957248597`*^9}, {3.5849752786349754`*^9, 
   3.584975323155038*^9}, {3.584975836252781*^9, 3.5849759050428767`*^9}, {
   3.5849761182331753`*^9, 3.584976260083374*^9}, {3.5849929016723895`*^9, 
   3.584992906072396*^9}, 3.584993045302591*^9, {3.584993739823563*^9, 
   3.5849937451435704`*^9}, {3.584993862903735*^9, 3.5849939908439145`*^9}, {
   3.584994035473977*^9, 3.5849940746940317`*^9}, {3.585353684797001*^9, 
   3.585353688387006*^9}, 3.5853537450770855`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCalibration", "[", 
   RowBox[{"formatedCalibrationData_List", ",", "fsrXdistance_"}], "]"}], ":=", 
  RowBox[{"findCalibrationUsingAllPeaks", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"getPeakInfoInSection", "/@", 
      RowBox[{
      "gatherDataByThresholdCut", "[", "formatedCalibrationData", "]"}]}], 
     ")"}], ",", "fsrXdistance"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.584977438557024*^9, 3.5849774925270996`*^9}, 
   3.5849869725791144`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCarrierPeakUsingAllPeaks", "[", 
   RowBox[{"allPeaks_List", ",", "calibrationPeaks_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "calXPos", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"calXPos", "=", 
      RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
       RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"findClosestPeakToTargetFromPeakInfo", "[", 
      RowBox[{"allPeaks", ",", "calXPos"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5849763169234533`*^9, 3.584976322213461*^9}, {
  3.584976368643526*^9, 3.5849764246536045`*^9}, {3.584986728988182*^9, 
  3.5849867369186354`*^9}, {3.5849870172346687`*^9, 3.5849870178777056`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findSidebandPeaksUsingAllPeaks", "[", 
   RowBox[{
   "allPeaks_List", ",", "calibrationPeaks_List", ",", "sidebandSpacing_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"calXPos", ",", "sideband1", ",", "sideband2"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"calXPos", "=", 
      RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
       RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sideband1", "=", 
      RowBox[{"findClosestPeakToTargetFromPeakInfo", "[", 
       RowBox[{"allPeaks", ",", 
        RowBox[{
         RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
         "sidebandSpacing"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sideband2", "=", 
      RowBox[{"findClosestPeakToTargetFromPeakInfo", "[", 
       RowBox[{"allPeaks", ",", 
        RowBox[{
         RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
         "sidebandSpacing"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"sideband1", ",", "sideband2"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.5849765625337973`*^9, 3.58497675001406*^9}, {
  3.584977337936883*^9, 3.5849774056069775`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCarrierAndSidebands", "[", 
   RowBox[{
   "formatedSidebandData_List", ",", "calibrationPeaks_List", ",", 
    "sidebandSpacing_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allPeaks", ",", "carrier", ",", "sidebands"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allPeaks", "=", 
      RowBox[{"(", 
       RowBox[{"getPeakInfoInSection", "/@", 
        RowBox[{
        "gatherDataByThresholdCut", "[", "formatedSidebandData", "]"}]}], 
       ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"carrier", "=", 
      RowBox[{"findCarrierPeakUsingAllPeaks", "[", 
       RowBox[{"allPeaks", ",", "calibrationPeaks"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sidebands", "=", 
      RowBox[{"findSidebandPeaksUsingAllPeaks", "[", 
       RowBox[{"allPeaks", ",", "calibrationPeaks", ",", "sidebandSpacing"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "carrier", "}"}], "~", "Join", "~", "sidebands"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.5849775501771803`*^9, 3.584977692487379*^9}, {
  3.5849940810340405`*^9, 3.584994081944042*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getFeedbackSignals", "[", "peaks_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "carrier", ",", "sidebands", ",", "sidebandDifference", ",", 
      "modulationDepth"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"carrier", "=", 
      RowBox[{
      "peaks", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sidebands", "=", 
      RowBox[{"Drop", "[", 
       RowBox[{"peaks", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sidebandDifference", "=", 
      FractionBox[
       RowBox[{"(", 
        RowBox[{
         RowBox[{"sidebands", "\[LeftDoubleBracket]", 
          RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
         RowBox[{"sidebands", "\[LeftDoubleBracket]", 
          RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], ")"}], 
       RowBox[{"Mean", "[", 
        RowBox[{"sidebands", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Constructing", " ", "a", " ", "quantity", " ", "that", " ", "is", " ", 
       "linear", " ", "in", " ", "\[Beta]", " ", "up", " ", "to", " ", "5", 
       "th", " ", "order", " ", "corrections"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"modulationDepth", "=", 
        SqrtBox[
         FractionBox[
          RowBox[{"Mean", "[", 
           RowBox[{"sidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
          RowBox[{
           RowBox[{
           "carrier", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
           "+", 
           RowBox[{"Mean", "[", 
            RowBox[{"sidebands", "\[LeftDoubleBracket]", 
             RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], 
            "]"}]}]]]}], ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"modulationDepth", "=", 
      FractionBox[
       RowBox[{"Mean", "[", 
        RowBox[{"sidebands", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
       RowBox[{
       "carrier", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"sidebandDifference", ",", "modulationDepth"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.5849963985612855`*^9, 3.58499648743141*^9}, {
   3.5849978233857527`*^9, 3.584997833005766*^9}, 3.5849978787058296`*^9, {
   3.584998047526066*^9, 3.5849981192261667`*^9}, {3.5849981543562155`*^9, 
   3.584998156116218*^9}, {3.5849984758366656`*^9, 3.58499849291669*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Test", "Subsection",
 CellChangeTimes->{{3.5849746921741543`*^9, 3.5849747015941677`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"calibrationData2", "=", 
   RowBox[{"GetDeviceMeasurements", "[", 
    RowBox[{
     RowBox[{"GetXMLFileName", "[", 
      RowBox[{"727", ",", "xmlDataDir"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<epscope2\>\"", ",", "\"\<epmezzanine1.stanford.edu\>\"", ",", 
       "\"\<0\>\""}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5849038018830004`*^9, 3.584903832944044*^9}, {
   3.5849039016041403`*^9, 3.5849039111241536`*^9}, {3.5849078735867124`*^9, 
   3.584907888006733*^9}, 3.584907969056846*^9, {3.584909027520328*^9, 
   3.584909115940452*^9}, 3.5849091656405215`*^9, {3.584909259490653*^9, 
   3.5849092637406588`*^9}, 3.5849125099392033`*^9, 3.5849125804093027`*^9}],

Cell[CellGroupData[{

Cell[BoxData["cal"], "Input",
 CellChangeTimes->{{3.585072426609329*^9, 3.585072432409337*^9}, 
   3.585072621619602*^9, 3.585072685289691*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.01314816`", ",", "4.06`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02777184`", ",", "4.06`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5850724327993374`*^9, 3.585072621989602*^9, 
  3.5850726855696917`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"formatedScopeCalData2", "=", 
   RowBox[{"GetFormatedScopeMeasurement", "[", 
    RowBox[{"calibrationData2", "\[LeftDoubleBracket]", 
     RowBox[{"1", ",", "3"}], "\[RightDoubleBracket]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"cal", "=", 
  RowBox[{"findCalibration", "[", 
   RowBox[{"formatedScopeCalData2", ",", "0.015"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"ListPlot", "[", 
  RowBox[{"formatedScopeCalData2", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"(", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Red", ",", 
          RowBox[{"PointSize", "[", "0.02", "]"}]}], "}"}], "~", "Join", "~", 
        RowBox[{"(", 
         RowBox[{"Point", "/@", "cal"}], ")"}]}], ")"}], ")"}], "}"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.584909398950848*^9, 3.5849094298608913`*^9}, {
   3.584909502540993*^9, 3.5849095030309935`*^9}, {3.584909716011292*^9, 
   3.584909729521311*^9}, {3.5849097719313707`*^9, 3.5849098112014256`*^9}, {
   3.584909898461548*^9, 3.5849099047115564`*^9}, {3.584910060421774*^9, 
   3.5849100606517744`*^9}, 3.584910130732873*^9, {3.5849102046429763`*^9, 
   3.5849102178829947`*^9}, {3.5849102504330406`*^9, 3.5849102549830465`*^9}, 
   3.584910301954112*^9, {3.584910731114713*^9, 3.584910738084723*^9}, {
   3.5849119671284437`*^9, 3.584911999398489*^9}, {3.584912140928687*^9, 
   3.5849121621787167`*^9}, {3.584912595049323*^9, 3.584912600609331*^9}, 
   3.584975865872822*^9, {3.584975959202953*^9, 3.5849759718329706`*^9}, {
   3.584977509047123*^9, 3.584977525737146*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.01236864`", ",", "4.06`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.027292800000000002`", ",", "4.06`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.584974734674214*^9, {3.584975869462827*^9, 3.5849759104828844`*^9}, 
   3.5849759763429766`*^9, 3.5849762304833326`*^9, 3.584976262943378*^9, 
   3.5849764620136566`*^9, 3.5849775261571465`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxN23k4Vk0bAHBrlghlSbQpUYlECmlOIiWJLEmKJGVJKiKkSHhCC5J4CqUS
LUjJEiGyJAoJ2ZIlssuSpW/6eufM+Oe9ftecN89zzpx77vuesdT6xJ4jbCws
LA85WFj+/rd4vXP55tkMEHXr708J+Olb8iCXsECl1AWKD3vdQq99eYRN7GvW
afIzQGX92jQf/TJwNl2erwB6eMH4Q36XUsDkCGzfOgeP5xq25ryFXmlxNf+X
7HvQdkctUlsAe9bPsJNFAvj6laq9ujqCeFzPf9vyYsLOVTHT24Www5ZMfC4h
/PL4nmTduQzwatGlHsNXH0B9ZhKjjPA0F+dhvXkMYHl7RWNjYzlYYnJwU/k8
PL71brqIvjD20X7B/g/Qc2PbJgpDK8DlTfbFu0Xw+BNGQVwl4Y+fJT0NRfH1
I8vOGH+CHlOYw35bpRKInaxYYySGx9VyZLmqCR+c7dtiPJ8B4p01eGvvVQIf
s4aMGsLx95XDTMUZwDDFUUhI6CMoHgpxrBXH4z2gU9tsAfacEGpx3QJ8vWL9
rfF9EgwAhBhiO70/AhOZ4Y/1Enjc3UUvab8kHo/Ou+/3lXDunD8HDizE/rbf
bEMT9E/Dv3fgI+B8lCJouQiPy47ydjdDR4Z2SueafQJ6W20KrBbj609ce81s
JRzaKHrGegkDKP3/pwq8XOW8uw3af4hdbqLwE6hzK5G1WYo99VaKrX0pvn7x
XK+GI1LYWy1r0jqgW05bqx2PrQK2j+WvHF3GAJ7CT3VaPaoBYyLgaNcyfP2T
ba2U3XI8XhmmtqAbWtakUV+iqxoMt4QN20vjcVH53vc90nhczXPbA8cV2AeK
Y873Qhf8koUztAZcEJkwc5LBjrfes64f+oSK2eEShc/g3bOk2c6yDAAf3t8n
CLqnONoHCPPrHsw5uRJb8Wb6zSHo+27951K+1wLj74InT69igD3/n5BfgJui
ve4I4WjvgmWuqxngz/iuYOncLyCnTHL6F3SvmX2opVwdaJ1/5vMZOQbYVl8c
WzWrHnDYVjwbg271+PuF64Hsc1mG+xoGuJK19YWPfgPYyeJrPUHYaVeDuoc8
eh+/gtAoZZFJwi86Q/o8FRjgMzOnRCHiK/ii3PluCvrtVH2FHXsjmPSh4s6t
ZYCTf6evcyNYXHHLYwaar8nku9jOJqApOWx0XhH7iJ3eGpZ16P1rAoyX92f5
QB+xTBsKkm4Gj9n/NLMqMYBRbuV4YWgzqDAwy/CFZvn/TwsYup0Syq7MAKax
N+H72QJEe3gd/ZTR+9MCVDfaaHOuZ4DfgjX8LvUtwOLS60X+0Nv/3RBw4ZPo
+CwV7HuLnT8GQN/xmTt/p3crKHIsSeTewAA3UpZIdKW1gu4MKT/GBjTfWwE/
l9cB3o0MoCp1EL4f38Ba4xqVIOi/d8vi6jdgFCcvyKeK5mcbcOsL+BFMOEq9
NZ9fDft1oBrzCvS/6dEGWmrCXAXUsTmW9epfg5Z2EdXS0voOZJy3yQptQvP5
O9B9HcMaCr347+1c1A6ceCfq52owgKv0RRMTk3Zwfe+etDANNH/bQVp8Uojw
ZgYQLPpgXaLQAb4Mchy9AW37/58OMLn5ICUK0HztBIuC08VvQps93OHm5tYJ
ttQJDotRDDAlFuADXxhwZIX9+0gKzdcuEHi64L74FgbQKxmG8/MHSHojeT5q
C1qPfoAK/jNmEpoM8P/potENhswrFJmaaL52A5EE2dkLtzJAQ9CPrKysHrDx
l8/329Dnp1YUhVr+BBaaDa8XaTHAgtunqmap9YLzV5VvxkDn8CfD9aEX3P0a
4rxEG82vPlC0snNHHHSi5bEp65J+8OMMtUxqG4xvuX5st1UGAN/bW1N3oQ/a
1cL3awAoCA3XLNNB82MQGB3UexYPrbhvEVOlchCcSbofKL2dAcbZTq7INRsC
t8ZnDj2Ajj79dG3E1BB4rW2mLrODARYmfc7MyhoGLaEpwgnQ6/m3lypEjAD2
Ft4+WV30vvwCK9bYvHsEXfGgFcaTUaDr8Tp21U4GuBshe7qeGgPH34l6JO1E
93ccXBN2NpLTg/Ex9o/oTu8JkHaoRO6JHpp/v0HtU6lZ8rsY4DqT943Z0CT4
PenZ/BQ6XcvZ2MRkGizcUfNKQR893z9gS4R8aLI+mk8slE1bgIPibvT5WKmA
ta1aqdA/czTt2W+zUUnn1BYpGTDA36uFn7JTH0rDxp5DryoRn+NSz0ENivVW
Khui5zuLEj6yLfEF9P+n5yUuamNqzEWVPfD9ln5UacfOQ+3/M26RDr2uKKEz
zYeX8tbbo7LRiAHeW2rC+cVH3b2VJJABbTvRsKArjZ8q7OD4oWrMABlBAhsq
7QSoLqWD+ZnG6PcJUrN90qPVTbAVPgi6ZhPeI2Gvr2GK7XqsQCaH8K0Xkqxg
L3Y225n6XMLNuyueU2bYbLdlQ/IIr+j2sdXch71jQwMoIAyDlbiWOfa1jyFD
bwk/X9RZpr0f+7MDdb+I8MSrW946FtgLZw3vLSZMGekp7jiAfTj2Pm8p4YDe
mTbdg9iJamavywiXB6RE6FliD1TzOpcTFpay2aFvhb3hxGupCsLm2aJTuw9h
e/M411QSjjMteWpojf32nlTgJ8KdA56HjA4Tz3NzjVo1YfkgeWETG2zDLwG9
NYRdpVuLTI9gR55Si60lnJUbdtbMFruJr3dPHWE2821y5kexpR/GcDYQ3j4y
3rT/GPE8t+x59ZXw1StJ1w/YYac2cDg0Ea6RPahlaU88T9f0hS2EJQsEx6wc
sIGgfWUr4cMHCh5ZO2L7J0pebCP8aMzVwuY49nutivXthAeuywrYOmHPa/bp
6iCsIteQd/QE8TzPKkd3ET5XFOJi54wdO69zVzfhAitKxuEk8Tyf3GL5SZh3
cqjO8RT2mu16z3sJG964H+x0Gq33gpTLt5kj/dCb3Q719/XNoW4qmAFnF5i/
mDjAeM9PZXqlzB+ELn//94ePairhHTrpitbP2RSrmE3ZkCtaX3ip5Tav40+f
YYD/hzthXmp7iqj3yBkU73koh5kTe13dUDzkpq7sLFk76ob+PS4qJVKK180d
rd9cVE27Z9uYO4q/s6jxdTXZ7mcZYIc+p5XcBCclcUE+YuIsiqecFCgPOOHh
wQC35ATg8slBWS9o3T4J/SzNAa5vHNSlo2pSXp7o97FTCWlhk1OeKH6yU+9Z
e6vPeTHAk3pThYgpNqpff9vTGS8UP9moucyYgPPn0Pdjo1R+jFuxeKP4yUrt
U9mj5uONvi8r5XUxaR7beRS/WaiYSo5eX2gdl4FihQgWqmDhwSL2CzB/N/sK
8y0WqsM+PcYP+hjlOW1d8gfwvBI8y+mD15M1nPZ7/H1QPjEDDPYUrObyZQDu
6St11MNpcDpGkjMQ+kiwIcwfp0HET9cm7osM0Ga8UltLawpkqlakM6DB9x6Y
/0+CRn/Z67x+aH39DViqfeyDoGtK9j/gd/kNli9t2Mp3iQGMQ5Uku9ImgI6T
8sIQ6NG/6c6vcWCfFTLK7w/zz5RXXGrHx0EId2fFFX80v8ZBign1SCCAAf6f
7lqMgeq7t3yvQZ8SW+wUWzUKxvqH9gsFMsDj4+/bxHaOAgkNvfWhgej7/AKb
L9+fM4+B1tdf4FDtTGcYdECh7W6JrhHgt9wsT/gyA+RJCBeGWo6AhJMpUTcu
o/V5GJTl8LqIBjFA2VD6+kq7YdA322bXzSCcT8zd93rF/GA0v4bA+geiLLeg
H+juiauaNQTMhk/UiYeg7z8IvKiS1Chotnrhm1PWgyAmRCpY4goDbFqbz+dS
PwDy6z2PMK+g+zEA2mVqNi+8ivMhHlf5+XegnyuYw/q2H8jlBwwuusYAArmS
8P3rA7sFWktjrqH51QdOWajFL7mO87GIR2Hn4q6j9/EnyBj9aSoVygBVWWM5
ZkM94OvWbWvvhaL53ANYrsfwLA9jgKB6r8TExG6wrGn8Wzx0px2A9Uw32LZ6
T7Z0OM4n7d2TbjyATjB7GRgY2AVCCjlOyNxgAI4ud++U750gee7B7QnQh9zU
XeqpTlBlmb50ZQQDpKnwwXKyA4w9Fpx8BC0e8cZSbqIdLPhtV73qJs6PNXQK
niTdxPm0VbhkgFwkA3xM094JfwHwa3W1egK9Rot7y0P+7+ChfIWq/C2cr5d6
ys57dgvn933FPj8VohigwzoE1r/fgJBoQ2FyFK4XlA8rxyhG4/rCLDnEPTUa
1yOe0x2GSkxcr9zRpVanMXG9k3fzFsf629jt34caXxDmXqeXrnIH10+rz9+/
ln4H11e738/YbYzB9dgpcbOtGTG4XrthmyKpFgvzWW/VJhhwwavnvKOZsbje
+8piU6Eeh+vBP7teJ2TH4XpRKlrUV+Murie3dZ3Yn0PYbn2JMriH69FgX6k5
b+7h+vVZhWcnFQ/zZ7V2+L7XgyrJmjd58bjeHbWTj9K8j+qLOiCeHgArEGwN
jlY9rQe4XrYyVFtRSPjinbA/2g9xvf2g5+eXIsKlG7el6iRg916KCSqGTher
gvVQLRCsGrfZ8QjX98pL9mwuJbz3eJLYzkRYX0S42LHf/gw8MjkGyxJxP+E2
18FSvSTsPOP0e+WEv8cJntN/zACiLyZgfKkBXP12phWPcb9i9aYCBYMn2PoM
SZ6PhE9+dv1m+BT3P8KXVWR9gv5Q5U095K8Gr5xlbxg9w/2Uhtc+TtWEZ3gb
dEyScf9Gykx56edkPK59P+S3aQr2saGOqtoU3D8KAtQTs1TsZ8G3/OtScf/o
U92Qpflz3H/6tUJPteE57oeJu9yfa5GGr9+UN9PzNQ1fbznHrPDAC9wP892f
cqfpBf7/HyTwulu+xP28kl+HDVsI/9R8vepQOrbgNVGOb+m4v6fUeKLR+hW2
6aqSl22vcD/yrJvUNZsM3E+8/dbTrj0Dj78RqtG0zST6qQflJTuhfRt7Yf1T
DrgeB/w6moXHV020fOjKwv3VXdvUEuyysZ3Dwny6s/H14S0/zR1e435u+ppt
yj9f4/5vvUcM//Ec7Jl34x29hKmuj+qp2uG0P17xThgifHj9ahGlbdi/Gmp9
ThP29/Xre054/krF/SOEEysa3ynrhNOfX/3MZWVXaPT5yyU3xL0gfLCgjX+U
8IDdNQ+V7di+ghqdZ6DR/Z2X/sMonfD9AxFvxghv4Ni6ZuOOcPr5FCf233In
bG7InJUBTc+Hse2nJ4jxc3d+NavqhtPzSUD7rp4H4bge/YxMaDT/1oVOSk9C
o/n5dmNCqPrOcPr9MWk2/uNJuPMSq2M2NOp3npV7+mWKMG+VubaGXjj9/jLP
cqWeg0bvt/yStEU5xHhukVXQDDSKF4bH+cc37wqn40nbvEyb89AoPrlk2n7M
hUbxadaheZtZ9PF4JNebRIrwyqeOYj7QKB5mGYv75UGj/qTeZOEA6+5wOr42
xZ06oLk7nI7HztsXl/pCo3jO2l+mUgCN4n3YDfd77Abh9HogvUlaUMsAj7/8
9tHLzyCcXj+2M7x/vCVcr7DalNMwnF6fHD7X5mtDo/Vr2stPwd8wnF7vri5T
ZBYRXlLayM21J5zuR6Y6X3bVgUbr51axDd8CCNe8btMvJnzU5loWt1E4vf6O
82rI7iB8OeVHOIOwpFkEayk0Wt+fzGg68Rpjg/v99brQqB/5cSdTJwhac2i3
lJTUN2A9tD2tDBrlEyORv5bwmYSDxtBoWB98A/7gbogeNMpHxDr0fwdDo3zl
UfCkbTk0ymfUlBKq+E2x39cZU/qm4XS/8eAF1idXoFF+1L/iqXgFYZ9yc3+B
veF0PjXPhWt4NzTqN8YvSLO8Bo3yMZU8q/eV0P/6SZ2g+Ci/qpBZON1P3Dcn
874hdEzg2yDp3C7Qk2Y7NxR66wRrxJT1D3Bu/7zzn6BRvjiH7U3P3H3hdD4Z
m+BoZgSN8k3F3eKFYfvQfPkJP2ehYjU0yldNmKfuCJuj+dMLOjQXzzaBRvmu
+48ytxvQ1t69sN7qA7zX3L/XmIfT/cZoFWlD0f3hdP68pvHja9P9aH4MgNyL
3qtuQqN822DV6pu1+9H3HQDfKmvZ51tgu7j5OZtZoPkyADgXKTZGEr75tnFH
HTTK72UdLr8UPxD+X/0zADKFNiwzP4DH9V61XY0ixhsPXpuqJ3yCU8NO4iB8
/7parlvKDQLWxz9q9h8Mp/uhoXsiNJmEl09oPvtK+GVMv8RCy3C6/tDZxgw8
QLju5/Zfty1RPBgEDmG/DjURnlK9+2GRFfaVFn11S8KLAyYfxhBOWZMg3EJ4
a7Wxz5JD4XQ9VO3B2md1CI/bLn1qHkd4/J35u1bCDCcuZSnr8P/6q4NAQiQt
1toaf/4nWVb896zx991sze/RRriSO7Nj2WF8P62f2RrZHMb3f9hk3pv4w/j5
XZrKlWuH7na7FxAYOABE7znekrbB8yNhh/gsWxs8f9QGCk89sMHzqyziVHMH
NKrPDmgs1pM5gudjf1vZq6PQqD9+4bK7dMIRPL/nKkqHdh3B8z++9uOMrG04
Xa+t9/Z2sLPF78+75au/PLINp/v1+8pqtbqhUT+/+6Rfyqqj4XS/32u+4iKH
o+h+dAH+3MbLSUfx+x1z5PJYDzSq3xT5NtjIHQun9xvyU9sqHY+F0/sRxvuu
aTyBfj1rBq5XHaDjz6bEXmhUz7k9+CEqb4fNsyviopMdjkfRw5oDT6HR/ohc
VL9Fvx2OXzkUs0TBPpyu9ww6t6s4E24N+XU32R7Hw9PKdwUG7XG85GjQ91J0
wPE1wmey66QDHpeVTTBJJcYzPhjnDxHe6cqqoOQYDi5XlapU2rWBRomn0acJ
O+Wbc6c54njOYsflOkI4VCCtVfk49rKXVvqux/F68MKCP+vFcbxe6LBnyowS
/vtwVZzC6f0te4N5rG7QqD6dHM09nk445LZj/Rg0qlcXa4nrbDyB16/k7sLn
7tCDVJugkFAr0Lx+akkGNNqfq96wOGSC8JGmsglVZ7w+jvm523oQZqyWrsp0
xuvtgk8fwSQ02g987O79WP1kOF3fbl68WtzrJF7PKwprL2UTPuToNzRFeGiu
oqXGKWy/jMayc6fwvydqdXljDjH+cNaG+zOEVZ+0CYHTOJ8oM7rmff40Hrf4
vaknl3Bf7I+9LC7YF3Qi3lIu+PcJ9Wkq+hC+F95/O88Ff//16kxeNlfsotbt
bpqu+HqzwF9tvsR4t/xdgwJi3LNG/zX7GTzO7zW5UusMHr8jlRDhR4yvLTFm
LyScf4LVmdMNf34j0adftQm3Z5vv8CfsdpjrZZEbvj/cvGlSXO7hdL8hKtnq
qo47Hpfbyz8VQPj1dMaxYuL63fG2Ndxncb7XqjtPcwfhU4O5TxmEOSIdJUoJ
39gsHsjrgS3TXjii64HzyYygU4eCCOuuW/yhDNpLwiorK6sBfP1SpsbnifNV
p/PuD/UI/5GWFg7xxPnu9fcfL5QTXnbau5ffCztNfLW5vhfOn7e9qS264oXz
6y+2fkoVXjj/tuNXjBU4F06fJ5h83shnQDjY/PLZa+dw/r6IdUNHJeHkh217
hLxx/r9F/1quoTeuF6pGNsmFEj4S/SPyEzTqH4xuieCcdx47sEvzlBHhBVf7
m8LO43omaT1zZ/V5XP9ofN3+SvhCON0fqPD9tdzkQjhd71utvHv9BuGhCv2Z
mgu43rp4ZtJe1AfXWyILE2pNfXB99rDAWOsm4Y32rCm1Pri+KxV8unC+L7ZF
uvllM8K9B7jGIqFRvX6eI+1wHWGhJKtK8Yu4Pr1ryK9hfhHXv8rjGY+iiPGi
O7aiDdCoXt+rPe+ihB++fnJPIq/8p2jawROmbk6EF8Wyf39KOHlbskE/4S29
Fq8VqrCrwnhWOUOj+vuI2suIZGj0eUZbrNkHCQcGCDgrVmOLy2d/PUk4qfrY
jlTCGp4iL4cIf1iaL6VUE03X31bFTldPEx5ykph6Do3u70WR4mMjhEWyXWqU
P0fT9fhD66WaroQ38nx4+gIaPc/SZx4So4QtTGUCVWqxe6eqRs4QPn/vwqF0
aDRfBHXXfBgjfHegTm3jl2h6finf9H/o/gWPF2ooCWdAo/m493vzhQloNH9/
XA7uVa2Lpue3h6KquQc06o/xfWkvyiR8xztUaRIavS8K0iBWvT6arufzynr4
vAgbnYo8m034+3ztjinCZ3IH92g0YHPZ3sk9B436Abf4dsrlQKP3efXzscgZ
wtn74jnBV2x9FsNT56FRfGh5MN2UC43ix8ldiTtZGrHZR0xfUY34+htR7NI+
xPiKLcnX86BR//RVp8UMa1M0Ha90r/A4aEKjeNeg/LLWFxrFu+MN1loFxPiM
j0AKe3M0HS+vyWYv1GqOpvsNUhXHLvsRfu4qMvYWGsVbbcn8w5wt0XR/oTbf
qVKb8DE7CQ1/aBTvfwsUPypqiabXg+CXLqJcrdF0v3vhgaUXdaDRevKM/UN/
AOEtiR4WxdBo/fpkIFPC/S2aXt9sxqrW74BG6++v2xfuMggHaK0RKIVG+Y54
T50nbxt24nX/Lt22aDpf2rRRySQIGuVfH5qa88qgUb5meSlYnu97NJ3PDa5W
jdaDRv2Fi5/auUKg0f6F8NlQl/Lv0XR++WAxaOVvj6bz141FPbv026Pp/LjE
MTLzCuH987RlKqCLvxvpS3R9Bz8zBsMEOqKBo8l1s6GgduBtdYfFoCOaztcF
uXYevwaNzifFPRmrq+yIpusBJeP4bUKd0XS9UPjb4LlhZzRdX5jGTS8OhUb9
gy6dxOBPndF0feLRZzoxtysahCc6wXjcDWbfYLc1gt4o8Tjlu1gPuK2e/CkM
Gp1HUvhmAaqh0XmkN4E8j4V/RINlx23getAL9ii8nG8CjfoFbTXWl25Ao/rM
1UtgqAb6335jP+Baln1QtDuaru8iS46VmUKjenCVs8jGm9ConswWzY+vhUb1
6K7XTkLze6Lp80nNhyW8zaD/7Y8OgZO8xd2R0GfVbiV/FxsGbCkue+ug/+2v
DoPwvUvfiv+M/m//dQSsmClfaw79rx4cAenxHrejfkbT55V27JThbfiJnsco
qB+sOiPRi57HGHCMvNC2vzea3l+d2bzGgNkbTe/HXm2vy/7ai+bbBFga7L9y
YR96336D5+uUIg70ofdrCmjVNbPdgUbnlz6fDz7R1IfelxlwbIXq10X90f+d
F2KhJt63b7eE/re/zkIFnQ59EQO9ZMgVLh+s1MIFQKoFWkTiE5zPbNTTNz1X
lgxEg9la8tlZWewUdTRy0moAfX8O6iO/9rE46H/nDTipw2mD1a3Qn1U6BoOk
uahf5ne2SA1G/7d/z035s+58ag39b7+dh5qfMLbgHvS//XpeKlE/PqBtEL0P
fJT6L4ORZUPw+6X8jqmaNYcqj562soH+1nkH1vcClKVmYnk8NH1+o8tUrZ2w
71X2h9LD2MIqyfNsCd//anHhAeENF3l6OwgXr3y5T2YE27zSuugo4Z9nBJQS
CJ9bmB3TRVjg7TG+lb+w4+xFztoRXieU3/6I8Nt0pz3dhE0PSuSuGsXu5Che
7UD4bJJLZBLh2XuWcv4kzBwvPyk3hi0f49HkSDhXW2bnE8KGP6vSewm3hV5Y
Lj+O7aK65roT4VktddNPCUf6+9v3E165RqlWYQI7q6p5qzPhXR7BycmEm5ao
Lhwk7PyunaH4G5vNKXT0JOEwYXA4lbB0Vk/FEOGXhyI3KU1ib+fWfnSacP3T
QZE0wg4md3xHCE9P6vYrT2FfvTu235Xwkh3xxS8Ip/YbrB8lrBUxHacyjV2z
KXGOG+Gjbaae6YQnGOxdY4Qvr0023jiDLVlrkedO+Ok5HvkMwmD5y6gJwh9L
rbnU/mBbnxRw8SA8IpbdkknYP+fYrknCYkdEMtVZmPj81Oz8FV6E1VOdwrKh
/8VzQeq9mQTLNPTRqgG4PghQB/+8c9RgReNzqIH7LnXnoPMD78D1lp/y0Vu6
LQf6Xzzjo+YNl6fOQP9bP2dT8bc8FgM2Jiiwfg7XH15KhZIJPg89dqOjnnrI
QxV3VI3nQv87n8NN7Qu5cISFnflfvOOmepTWfKKgZfs54PrHRZ2rr9vsA+3n
/c4xtmoWNcfHPykP+lRiOFzPZ1GxMkrz2Tjg97utB9dbTmrdh2Y/Teh/8ZmD
KnAJHvSF/hefOCgTCdWDBdD32J/nmA2xU5157aXsnEz6PJL7sdANWtD/4j87
xSsA4v040fdho5gvegQLof+dh2Kl1lhEnuOcxfxv/WWlctm0u7Wh//XfWCmD
R4Om/tD/8hcW6tvuOwVF0Oj8kcuo7louLuZ/+wV/AOftMaYOtEETD1xeZ8DN
rfE8gdD/ztPOgJXdBmeKof+tX9Mg89r0N25u5n/xfQrobUjcvQP6X/4yCZoa
TbMZ3Oj5TIITfuwrS6HR+VrW1ck3eHmY/623EyDsowXbTuh//a4JsNyd50QQ
9L/zxOPg5aKXDWXQ//q540Cn0Ho7Hy8TiAZauLu5jYE6B4EXetDovJHD3Oyl
IdBofZ16dexKOfS5vvymxsZf4IqlyCT/bCaoO3epepbaL7BkVv5R/dlMer1O
eexUfQUanTfaaiSxpWI2+n7DoGbi3RMBPiZ93sg21mWBATQ6bzS+bWnANWiU
P1zuLR+uhL4opLFUSmoISIR7WAnxM+l++RM1mXJDaJSPbG6tUg2FTl46Cuun
QVAZcOHBJ34m3e+2ll8zb94cJr2/MVxdd94IGuU/lzz9f4ZBo/62mJTSvmpo
lD8lFDcXCgsw6f0XtRPB60yg3zXGwfelF7wXUY25AY3ysQPZ7bM/Q5+RWw/z
85+g3zrUXVSQSfe3fXhAu6kgk+5vz03uMbwJjfrb8aaRObXQaH9p/bTW6vlC
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
gctOORH+H+SdrRc=
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0.01222848, 0.2},
  Epilog->{{
     RGBColor[1, 0, 0], 
     PointSize[0.02], 
     PointBox[{0.01236864, 4.06}], 
     PointBox[{0.027292800000000002`, 4.06}]}},
  Method->{},
  PlotRangeClipping->True]], "Output",
 CellChangeTimes->{
  3.584974734674214*^9, {3.584975869462827*^9, 3.5849759104828844`*^9}, 
   3.5849759763429766`*^9, 3.5849762304833326`*^9, 3.584976262943378*^9, 
   3.5849764620136566`*^9, 3.5849775261871467`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"sidebandData2", "=", 
   RowBox[{"GetDeviceMeasurements", "[", 
    RowBox[{
     RowBox[{"GetXMLFileName", "[", 
      RowBox[{"728", ",", "xmlDataDir"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<epscope2\>\"", ",", "\"\<epmezzanine1.stanford.edu\>\"", ",", 
       "\"\<0\>\""}], "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"formatedSidebandData2", "=", 
   RowBox[{"GetFormatedScopeMeasurement", "[", 
    RowBox[{"sidebandData2", "\[LeftDoubleBracket]", 
     RowBox[{"1", ",", "3"}], "\[RightDoubleBracket]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.584912638299383*^9, 3.5849126439993916`*^9}, {
  3.584912686799451*^9, 3.584912695749464*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"formatedSidebandData2", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{3.5849128672897043`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, GraphicsComplexBox[CompressedData["
1:eJxN3Hk4VU0YAHBbtEdpkZQUSaTIkmSukAgha0RRUqgUhUp2bpTsZSlLJVok
kqJEqaQkKlFCdpJ93763fHPm9E/P75lz3bPMvPPOnJm70uqY/kE2FhaWdZws
LH//f8fRl8Ji54+ir/79V4T+6Gl7e4J7lw4lz3F6h3iu3zJns/dHpVUbMj11
itGm35My3uC15sEF/aLvkfFm03kcDv4oe7lvu152CTrj97DFh+Zr5bMKph31
RzeOb51ZkVSK8gUPxvjR3Ojw3InrmD/6rff3E5/Q9JzFOgHgK6HNwnkmZWjd
dMc1M44T6xi+Y7kArj1ppeAQX45OJK6qmulIHNF5NiMQfIb3vnqd22eUrfg1
aPYJ4h9MSZuL4Jf9onAFX9Dk1wA09ySx0OpfS4LBx2RNrIskvyI1xy0985xI
+eHn4cWXaQ6a9ecGjzNxmom6e6gz+Xz5zXjjBaf8EVzs3ytGAz3DG8Jp5mPs
nrnwtD+yiHQ6zB73FSlevFsfQfO+qmnPFrmQ473XWEZG0XzLKfvYElfid/k8
Glddyec75toJLXUj58dt/mo02o2US6cIfOE/Qz5vPHDqfizNbiql/gJnyfXE
XV67/9pZ8vn8ai+FFedIeYPYjwXxNHO5yHQIupPvFyu89DrBnXxeZ37LdaHz
5HhHS2XXpPPk+PC70fqrPUh59nDvupsepPz7du1pIp7k702E3fp5y5Oc/8q6
ycdrvEi52nrTkNtepNz2zMMja72JA9/OUk31JsenLTwosM6HfH+Z1fOBOz7k
+P60xaXivuT4JePHU+75knJFzXde6/2ILaNWmafR7NVwVmaDvz96vLj89OnT
8Dw3fp2bTnORu2TLxgBy/O/igPyHNM/j+xUtzSSWttnilEmzUUa4tswFcr9c
Wf6IZF0g5xunrc4iF0iu70V0fOXjQHJ8ffPwQ/kg0n44ZXYHPQki7U3M6+5B
hYukfWp/nIZyLpL2fHyZ5RLFS6S9hx/O7s4FD0rOZY+TLUWPs3iKtwb7o/nx
9cOFoR9RFbvdjedgr+qO0sPsH9C47qtz6DLxymsCxi8uk/ij2n5qg3II8SH5
0hkFNAf6rq3fFkri2f0yr9yXoSSefVrxI0I1jLjPXuZYYRg5fsnTSzu2h5P4
uIWrZeUbmi0MlEfVI4jnhglUHrhFLN/v2RCnwqRsvu37s+WqTOrvnw/eFHUd
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
9fFq0ZHdEVS+/XXvp3AFA2JbDnfWMwYk/xpOFTuaY0Dyt0C9iqpRA5LfCQx5
qysaRlD59/1rGzLPGpJyhlq14DNDkk+WtTMvjoPx/Ld1qOzIViNS3i9fb+Nu
RPJTv5rg8uc0L/FTZEzSnCreehcZk/x2S3kEnwfNH1y3+b2g2VKws4fFhOTL
Xa9jLJVNSL7s5bDjvSfNvLz98gU0q+TWXu2WiqZ8aIbCyRPS0dR8+FBaU81D
MD6/C0ZhWr1gfH3LxtET6U3R1PXfS/ot7ATG4xWkeTU0E4zv/6cutck+MB4v
WUX12MnIRFPjr76t1785g3F98W3YqZYFxvVtceBQ+gAY18eUjTeXy8lGU/ms
wje9wNOy0VR9fu8+MfgYjOu7hfCdA0Ng3D46i40/yctFU+uTPE9wKLmCcXtb
8G/BBvGNvL2LR2iWtZnpoyAfjWb/NGxYvPMnejv7cZebfDTVnk0zrPfmgPH7
xXZT7nejYJwPn2V5Jqu4OZqKD3OTDyedpTleexH3MzB+/7ixr+DsOM0vo4+1
blUgxxsqLzNyp7mp+W3Bc5pdLjlLTtI8U0YoFm0hjvleMt1jCzk/Ca8zzi9o
5Xmior9YFMn16H78rKOsSK73l7NnjifNJ5etFy1QJPdn2suqcLat0dR8Q9Rh
f1aVreR+inJvOupN89Os2qqXYDwfobX3ojqHUjQV76rZFTJVaT6W2iToC8bz
D6x6YRcLaYaUeWQaIvVh9bXfNtsRqS9ZqlfL/WhWb1djvEGkvlWG9NzlYkRT
46kj8tf5dtA89nOnXwAYj88u+Q71vAXj+LZC/KblDOVoKp6ll+m916BZxXVC
/gIYx6/PK+7cfEezzWvj+bO2RVPxa8ie4/xOmpkL0tsDwThe8T/da/Ke5nv7
ZhbOViHtVYnr8UZtFdKeS+9ZX7sIxu+/9htwzypRiabiTe9I7um5qtFUvPFN
ONygo0rix6Idi/SC6fZSW2A1J4ZysmjP+USaN3+89vsXzcXOO01XzY2h/r75
sqFC67mk/E/BDakbYByfPA7rXW+gmYd7YpbwPOKkrFSXg2B8/pv2GjfeBON4
9pqdQ78JjK/XJPXBcxFu4lbdvesOgan9PP/Wt8VQ92/OtSyOFjC+v9dUrR1F
eYg3tM/7aQvGz6fg33q4GGp+YLf84cetYBwfp9bHxVDP+7RvweUjYNzfTa2X
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
    "], {{{}, {}, 
      {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJwl2UMQGMgSANDYtm3b2di2zY1t27Zt27axsW3b/6X+4dVU9akvPdPTnbBh
24ptAgYIECB1sAAB/p6BCEwQgiIcIDghCEkoQhOGsIQjPBGISCQiE4WoRCM6
MYhJLGITh7jEIz4JSEgiEpOEpCQjOSlISaq/uZKGtKQjPRnISCYyk4WsZCM7
OchJLnKTh7z8Qz7yU4CCFKIwRShKMYpTgpKUojRlKEs5ylOBilSiMlWoSjWq
U4Oa1KI2dahLPerTgIY0ojFNaEozmvMvLWhJK1rThra0oz0d6EgnOtOFrnSj
Oz3oSS9604e+9KM/AxjIIAYzhKEMYzgjGMkoRjOGsYxjPBOYyCQmM4WpTGM6
M5jJLGYzh7nMYz4LWMgiFrOEpSxjOStYySpWs4a1rGM9G9jIJjazha1sYzs7
2MkudrOHvexjPwc4yCEOc4SjHOM4JzjJKU5zhrOc4zwXuMh/XOIyV7jKNa5z
g5vc4jZ3uMs97vOAhzziMU94yjOe84KXvOI1b3jLO97zgY984jNf+Mo3vvOD
n/ziN3/4W/wBCURgghCUYAQnBCEJRWjCEJZwhCcCEYlEZKIQlWhEJwYxiUVs
4hCXeMQnAQlJRGKSkJRkJCcFKUlFatKQlnSkJwMZyURmspCVbGQnBznJRW7y
kJd/yEd+ClCQQhSmCEUpRnFKUJJSlKYMZSlHeSpQkUpUpgpVqUZ1alCTWtSm
DnWpR30a0JBGNKYJTWlGc/6lBS1pRWv+Xt5taUd7OtCRTnSmC13pRnd60JNe
9KYPfelHfwYwkEEMZghDGcZwRjCSUYxmDGMZx3gmMJFJTGYKU5nGdGYwk1nM
Zg5zmcd8FrCQRSxmCUtZxnJWsJJVrGYNa1nHejawkU1sZgtb2cZ2drCTXexm
D3vZx34OcJBDHOYIRznGcU5wklOc5gxnOcd5LnCR/7jEZa5wlWtc5wY3ucVt
7nCXe9znAQ95xGOe8JRnPOcFL3nFa97wlne85wMf+cRnvvCVb3znBz/5xW/+
8PfhD0ggAhOEoAQjOCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQj
PglISCISk4SkJCM5KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e8/EM+
8lOAghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q
04CGNKIxTWhKM5rzLy1oSSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSj
PwMYyCAGM4ShDGM4IxjJKEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+
C1jIIhazhKUsYzkrWMkqVrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8H
OMghDnOEoxzjOCc4ySlOc4aznOM8F7jIf1ziMle4yjWuc4Ob3OI2d7jLPe7z
gIc84jFPeMoznvOCl7ziNW94yzve84GPfOIzX/jKN77zg5/84jd/+Nv0ByQQ
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe/iEf+SlAQQpR
mCIUpRjFKUFJSlGaMpSlHOWpQEUqUZkqVKUa1alBTWpRmzrUpR71aUBDGtGY
JjSlGc35lxa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCD
GcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZ
wlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznC
UY5xnBOc5BSnOcNZznGeC1zkPy5xmStc5RrXucFNbnGbO9zlHvd5wEMe8Zgn
POUZz3nBS17xmje85R3v+cBHPvGZL3zlG9/5wU9+8Zs//P3wByQQgQlCUIIR
nBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJSUJSkpGc
FKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe/iEf+SlAQQpRmCIUpRjF
KUFJSlGaMpSlHOWpQEUqUZkqVKUa1alBTWpRmzrUpR71aUBDGtGYJjSlGc35
lxa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQhjGc
EYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKWsZwV
rGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc
5BSnOcNZznGeC1zkPy5xmStc5RrXucFNbnGbO9zlHvd5wEMe8ZgnPOUZz3nB
S17xmje85R3v+cBHPvGZL3zlG9/5wU9+8Zs//B32BSQQgQlCUIIRnBCEJBSh
CUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJSUJSkpGcFKQkFalJ
Q1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe/iEf+SlAQQpRmCIUpRjFKUFJSlGa
MpSlHOWpQEUqUZkqVKUa1alBTWpRmzrUpR71aUBDGtGYJjSlGc35lxa0pBWt
aUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQhjGcEYxkFKMZ
w1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nD
Wtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZ
znGeC1zkPy5xmStc5RrXucFNbnGbO9zlHvd5wEMe8ZgnPOUZz3nBS17xmje8
5R3v+cBHPvGZL3zlG9/5wU9+8Zs//B30ByQQgQlCUIIRnBCEJBShCUNYwhGe
CEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJSUJSkpGcFKQkVbD/7yr+B3pR
Esw=
        "]]}}, {
      {RGBColor[0.24720000000000014`, 0.24, 0.6], PointBox[CompressedData["
1:eJwl2UMQGMgSANDYtm3b2di2zY1t27Zt27axsW3b/6X+4dVU9akvPdPTnbBh
24ptAgYIECB1sAAB/p6BCEwQgiIcIDghCEkoQhOGsIQjPBGISCQiE4WoRCM6
MYhJLGITh7jEIz4JSEgiEpOEpCQjOSlISaq/uZKGtKQjPRnISCYyk4WsZCM7
OchJLnKTh7z8Qz7yU4CCFKIwRShKMYpTgpKUojRlKEs5ylOBilSiMlWoSjWq
U4Oa1KI2dahLPerTgIY0ojFNaEozmvMvLWhJK1rThra0oz0d6EgnOtOFrnSj
Oz3oSS9604e+9KM/AxjIIAYzhKEMYzgjGMkoRjOGsYxjPBOYyCQmM4WpTGM6
M5jJLGYzh7nMYz4LWMgiFrOEpSxjOStYySpWs4a1rGM9G9jIJjazha1sYzs7
2MkudrOHvexjPwc4yCEOc4SjHOM4JzjJKU5zhrOc4zwXuMh/XOIyV7jKNa5z
g5vc4jZ3uMs97vOAhzziMU94yjOe84KXvOI1b3jLO97zgY984jNf+Mo3vvOD
n/ziN3/4W/wBCURgghCUYAQnBCEJRWjCEJZwhCcCEYlEZKIQlWhEJwYxiUVs
4hCXeMQnAQlJRGKSkJRkJCcFKUlFatKQlnSkJwMZyURmspCVbGQnBznJRW7y
kJd/yEd+ClCQQhSmCEUpRnFKUJJSlKYMZSlHeSpQkUpUpgpVqUZ1alCTWtSm
DnWpR30a0JBGNKYJTWlGc/6lBS1pRWv+Xt5taUd7OtCRTnSmC13pRnd60JNe
9KYPfelHfwYwkEEMZghDGcZwRjCSUYxmDGMZx3gmMJFJTGYKU5nGdGYwk1nM
Zg5zmcd8FrCQRSxmCUtZxnJWsJJVrGYNa1nHejawkU1sZgtb2cZ2drCTXexm
D3vZx34OcJBDHOYIRznGcU5wklOc5gxnOcd5LnCR/7jEZa5wlWtc5wY3ucVt
7nCXe9znAQ95xGOe8JRnPOcFL3nFa97wlne85wMf+cRnvvCVb3znBz/5xW/+
8PfhD0ggAhOEoAQjOCEISShCE4awhCM8EYhIJCIThahEIzoxiEksYhOHuMQj
PglISCISk4SkJCM5KUhJKlKThrSkIz0ZyEgmMpOFrGQjOznISS5yk4e8/EM+
8lOAghSiMEUoSjGKU4KSlKI0ZShLOcpTgYpUojJVqEo1qlODmtSiNnWoSz3q
04CGNKIxTWhKM5rzLy1oSSta04a2tKM9HehIJzrTha50ozs96EkvetOHvvSj
PwMYyCAGM4ShDGM4IxjJKEYzhrGMYzwTmMgkJjOFqUxjOjOYySxmM4e5zGM+
C1jIIhazhKUsYzkrWMkqVrOGtaxjPRvYyCY2s4WtbGM7O9jJLnazh73sYz8H
OMghDnOEoxzjOCc4ySlOc4aznOM8F7jIf1ziMle4yjWuc4Ob3OI2d7jLPe7z
gIc84jFPeMoznvOCl7ziNW94yzve84GPfOIzX/jKN77zg5/84jd/+Nv0ByQQ
gQlCUIIRnBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJ
SUJSkpGcFKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe/iEf+SlAQQpR
mCIUpRjFKUFJSlGaMpSlHOWpQEUqUZkqVKUa1alBTWpRmzrUpR71aUBDGtGY
JjSlGc35lxa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCD
GcJQhjGcEYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZ
wlKWsZwVrGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznC
UY5xnBOc5BSnOcNZznGeC1zkPy5xmStc5RrXucFNbnGbO9zlHvd5wEMe8Zgn
POUZz3nBS17xmje85R3v+cBHPvGZL3zlG9/5wU9+8Zs//P3wByQQgQlCUIIR
nBCEJBShCUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJSUJSkpGc
FKQkFalJQ1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe/iEf+SlAQQpRmCIUpRjF
KUFJSlGaMpSlHOWpQEUqUZkqVKUa1alBTWpRmzrUpR71aUBDGtGYJjSlGc35
lxa0pBWtaUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQhjGc
EYxkFKMZw1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKWsZwV
rGQVq1nDWtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc
5BSnOcNZznGeC1zkPy5xmStc5RrXucFNbnGbO9zlHvd5wEMe8ZgnPOUZz3nB
S17xmje85R3v+cBHPvGZL3zlG9/5wU9+8Zs//B32BSQQgQlCUIIRnBCEJBSh
CUNYwhGeCEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJSUJSkpGcFKQkFalJ
Q1rSkZ4MZCQTmclCVrKRnRzkJBe5yUNe/iEf+SlAQQpRmCIUpRjFKUFJSlGa
MpSlHOWpQEUqUZkqVKUa1alBTWpRmzrUpR71aUBDGtGYJjSlGc35lxa0pBWt
aUNb2tGeDnSkE53pQle60Z0e9KQXvelDX/rRnwEMZBCDGcJQhjGcEYxkFKMZ
w1jGMZ4JTGQSk5nCVKYxnRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nD
Wtaxng1sZBOb2cJWtrGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZ
znGeC1zkPy5xmStc5RrXucFNbnGbO9zlHvd5wEMe8ZgnPOUZz3nBS17xmje8
5R3v+cBHPvGZL3zlG9/5wU9+8Zs//B30ByQQgQlCUIIRnBCEJBShCUNYwhGe
CEQkEpGJQlSiEZ0YxCQWsYlDXOIRnwQkJBGJSUJSkpGcFKQkVbD/7yr+B3pR
Esw=
        "]]}, {}, {}}}], {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0.01143456, 0.2},
  Method->{},
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.584976453723645*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"carrier", "=", 
  RowBox[{"findCarrierPeakUsingAllPeaks", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"getPeakInfoInSection", "/@", 
      RowBox[{
      "gatherDataByThresholdCut", "[", "formatedSidebandData2", "]"}]}], 
     ")"}], ",", "cal"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5849126731694326`*^9, 3.5849127002294703`*^9}, {
  3.584912955179827*^9, 3.584912955759828*^9}, {3.5849764598036537`*^9, 
  3.5849764676436644`*^9}, {3.5849765111737256`*^9, 3.5849765191737366`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.01237824`", ",", "1.28`"}], "}"}]], "Output",
 CellChangeTimes->{3.584976468053665*^9, 3.5849765196637373`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sidebands", "=", 
  RowBox[{"findSidebandPeaksUsingAllPeaks", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"getPeakInfoInSection", "/@", 
      RowBox[{
      "gatherDataByThresholdCut", "[", "formatedSidebandData2", "]"}]}], 
     ")"}], ",", "cal", ",", "0.007"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.584976772834092*^9, 3.584976808614142*^9}, {
  3.584977723577423*^9, 3.584977730807433*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.01903104`", ",", "2.56`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02074368`", ",", "2.6`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5849768004641304`*^9, 3.5849768091141424`*^9}, 
   3.584977387656953*^9, 3.5849777313574343`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findCarrierAndSidebands", "[", 
  RowBox[{"formatedSidebandData2", ",", "cal", ",", "0.007"}], "]"}]], "Input",
 CellChangeTimes->{{3.584977706357399*^9, 3.584977738957444*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.01237824`", ",", "1.28`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.01903104`", ",", "2.56`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02074368`", ",", "2.6`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.584977741587448*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"formatedSidebandData2", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Red", ",", 
           RowBox[{"PointSize", "[", "0.02", "]"}]}], "}"}], "~", "Join", "~", 
         RowBox[{"(", 
          RowBox[{"Point", "/@", "sidebands"}], ")"}]}], ")"}], "~", "Join", 
       "~", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"{", "Black", "}"}], "~", "Join", "~", 
         RowBox[{"{", 
          RowBox[{"Point", "@", "carrier"}], "}"}]}], ")"}]}], ")"}], 
     "}"}]}]}], "]"}]], "Input"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxN3Hk4VU0YAHBbtEdpkZQUSaTIkmSukAgha0RRUqgUhUp2bpTsZSlLJVok
kqJEqaQkKlFCdpJ93763fHPm9E/P75lz3bPMvPPOnJm70uqY/kE2FhaWdZws
LH//f8fRl8Ji54+ir/79V4T+6Gl7e4J7lw4lz3F6h3iu3zJns/dHpVUbMj11
itGm35My3uC15sEF/aLvkfFm03kcDv4oe7lvu152CTrj97DFh+Zr5bMKph31
RzeOb51ZkVSK8gUPxvjR3Ojw3InrmD/6rff3E5/Q9JzFOgHgK6HNwnkmZWjd
dMc1M44T6xi+Y7kArj1ppeAQX45OJK6qmulIHNF5NiMQfIb3vnqd22eUrfg1
aPYJ4h9MSZuL4Jf9onAFX9Dk1wA09ySx0OpfS4LBx2RNrIskvyI1xy0985xI
+eHn4cWXaQ6a9ecGjzNxmom6e6gz+Xz5zXjjBaf8EVzs3ytGAz3DG8Jp5mPs
nrnwtD+yiHQ6zB73FSlevFsfQfO+qmnPFrmQ473XWEZG0XzLKfvYElfid/k8
Glddyec75toJLXUj58dt/mo02o2US6cIfOE/Qz5vPHDqfizNbiql/gJnyfXE
XV67/9pZ8vn8ai+FFedIeYPYjwXxNHO5yHQIupPvFyu89DrBnXxeZ37LdaHz
5HhHS2XXpPPk+PC70fqrPUh59nDvupsepPz7du1pIp7k702E3fp5y5Oc/8q6
ycdrvEi52nrTkNtepNz2zMMja72JA9/OUk31JsenLTwosM6HfH+Z1fOBOz7k
+P60xaXivuT4JePHU+75knJFzXde6/2ILaNWmafR7NVwVmaDvz96vLj89OnT
8Dw3fp2bTnORu2TLxgBy/O/igPyHNM/j+xUtzSSWttnilEmzUUa4tswFcr9c
Wf6IZF0g5xunrc4iF0iu70V0fOXjQHJ8ffPwQ/kg0n44ZXYHPQki7U3M6+5B
hYukfWp/nIZyLpL2fHyZ5RLFS6S9hx/O7s4FD0rOZY+TLUWPs3iKtwb7o/nx
9cOFoR9RFbvdjedgr+qO0sPsH9C47qtz6DLxymsCxi8uk/ij2n5qg3II8SH5
0hkFNAf6rq3fFkri2f0yr9yXoSSefVrxI0I1jLjPXuZYYRg5fsnTSzu2h5P4
uIWrZeUbmi0MlEfVI4jnhglUHrhFLN/v2RCnwqRsvu37s+WqTOrvnw/eFHUd
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
9fFq0ZHdEVS+/XXvp3AFA2JbDnfWMwYk/xpOFTuaY0Dyt0C9iqpRA5LfCQx5
qysaRlD59/1rGzLPGpJyhlq14DNDkk+WtTMvjoPx/Ld1qOzIViNS3i9fb+Nu
RPJTv5rg8uc0L/FTZEzSnCreehcZk/x2S3kEnwfNH1y3+b2g2VKws4fFhOTL
Xa9jLJVNSL7s5bDjvSfNvLz98gU0q+TWXu2WiqZ8aIbCyRPS0dR8+FBaU81D
MD6/C0ZhWr1gfH3LxtET6U3R1PXfS/ot7ATG4xWkeTU0E4zv/6cutck+MB4v
WUX12MnIRFPjr76t1785g3F98W3YqZYFxvVtceBQ+gAY18eUjTeXy8lGU/ms
wje9wNOy0VR9fu8+MfgYjOu7hfCdA0Ng3D46i40/yctFU+uTPE9wKLmCcXtb
8G/BBvGNvL2LR2iWtZnpoyAfjWb/NGxYvPMnejv7cZebfDTVnk0zrPfmgPH7
xXZT7nejYJwPn2V5Jqu4OZqKD3OTDyedpTleexH3MzB+/7ixr+DsOM0vo4+1
blUgxxsqLzNyp7mp+W3Bc5pdLjlLTtI8U0YoFm0hjvleMt1jCzk/Ca8zzi9o
5Xmior9YFMn16H78rKOsSK73l7NnjifNJ5etFy1QJPdn2suqcLat0dR8Q9Rh
f1aVreR+inJvOupN89Os2qqXYDwfobX3ojqHUjQV76rZFTJVaT6W2iToC8bz
D6x6YRcLaYaUeWQaIvVh9bXfNtsRqS9ZqlfL/WhWb1djvEGkvlWG9NzlYkRT
46kj8tf5dtA89nOnXwAYj88u+Q71vAXj+LZC/KblDOVoKp6ll+m916BZxXVC
/gIYx6/PK+7cfEezzWvj+bO2RVPxa8ie4/xOmpkL0tsDwThe8T/da/Ke5nv7
ZhbOViHtVYnr8UZtFdKeS+9ZX7sIxu+/9htwzypRiabiTe9I7um5qtFUvPFN
ONygo0rix6Idi/SC6fZSW2A1J4ZysmjP+USaN3+89vsXzcXOO01XzY2h/r75
sqFC67mk/E/BDakbYByfPA7rXW+gmYd7YpbwPOKkrFSXg2B8/pv2GjfeBON4
9pqdQ78JjK/XJPXBcxFu4lbdvesOgan9PP/Wt8VQ92/OtSyOFjC+v9dUrR1F
eYg3tM/7aQvGz6fg33q4GGp+YLf84cetYBwfp9bHxVDP+7RvweUjYNzfTa2X
I44u4z/STvPU+rkYqj49+/t6keZd/9bTxVD1sda+ZFkHGMfbqfV1pJzj6ZoB
BzCOz1Pr7Uj5Gi7Pj394yeef/Ft/R6xpUHX7GM1T6/GIjyZIe3XRPLU+jzjk
T5CZI81T6/ViqPwhc0vTph4wzje2/1u/R8or/m5nonlqPR85fvTLleZeMG6v
U+v7yPHLV/W8cFpCjn/wb70fsfLxndH9tOOn1v+R8oN/l6fSPLUekDhg5oTW
IB/5/qn1gcR3jI1FXGje+m+9IHHJjQeTQ0vJ90+tHyT3q6d7RqUrzVPrCYkX
IuuHI/zk+Sb/W19I6ot8UG7gGZqn1hvGUP23+d/lA8tIfZ1af0h8XuSY0jkB
Ur+n1iOS+p948u3iCZo3/VufGEPlX4UvVna70zy1XjGGyi9a55x5N7mctLep
9YvEs80+J3mA8XzftX/rGUl7lrwtcY5VkHhqfSPx7n4/Iy9BEj+m1juS+HJq
W60k+0riqfWPJH5dDd48w4fmdf/WQ5J4lvsj9BeHECmfWh9JymvX/s7xpZn9
tFoE5yriqfWSxCKvrh31p3lq/SSxBs+Q+vTVxA4WeiuZNE+tpyTWl8xaYthK
XP/FyjeCZuez83q+tJLz51qVa7GojdyvK0W2xUZtJN6KHV8oH9VGnkfuooIb
FW0knmo/O8qzpJ08vxprfneTdvL8j89823alndQXtnQn48p2Uh/DjVe+4vtN
6qvwxIcNe36T+v74hltc9G/SfjR2rpn5HYz776ru8lP8HTHU+wj7Kx71ZmCc
L0woSejGdsRQ+UZwY2XuDzB+P7IyyG+twJ8YKt/JkJKO3AvG+ZpqZQ3bNXA3
o56bh6cOfT0fdOwnGI83D4ls/rG8M4Yanw6/b9xhCcbj18CToY+ug+0NQ0x6
AhvRsqVIqBb8jHMCrqcJ3X/RfkmwK4YaXzMOXRndB8bj8U9z1GwTwHi8bp3Z
/bkOPJUftaH+PdeUhbpjqP0Nfqw771uB8fznktuDS5PA1HyCzg3/ejDeP7Gl
X7dvVU8Mejp01UuHvwt9iBnfdwA8Oz2bS8GhC1lsS/1wA4znL7pajBQawZda
akMsxbuRVzB7snAvrl/daIHsgwU2YLwf5OYPc49bYLx/RM57RkcTGO8vebs2
y3RNXwy1P2hPqdXrQ2D8fvP3qXnSt/tiqPmXcwK511vA+H3ovFe2s9f2x1D7
XxKOLHQ9DMb7h6R4ChpTaH71+Kh+Gxg1tEP960WGFvx5YgOkvJnj7Tq7AVLu
esfpyp0B8vdn6q+c9nuAfH/s0AdH8cEYar/N+utuP+0Hyfnmqa3ZeY9mvd/l
jzsGyfXVh3qsXj9Ert9ps0TI0SFyfzhrK8fvg/H73St+fkc6wXi+aa2EdIXk
cAz1vjenvEblOLg2fnLRTvdupOUW9OABGM9H/RTcLNANxu9/j79pZG4ciaH2
37AeDR1wBOP5qTDevx1OzP/jiS4knNP+sWeE1J+s/VcUpUdj/p9f+4N2TFdL
OQnG81VV97sXZoLx+2E7w2tefeDvga0wfmtH46OanZvGYqj3w8GJg2bOYDy/
L6hx4+0jMN6P87BTV2ZgLIaan1KJHE+QHY+h3gd/UUydexqM56cO1RudeQzG
73+HmOwtg2A8H3VhwwMD+YkY6v3vsgrzfBcwXn9579yM9U/AeH0nWp0VPQzG
7zs+vbPiUpgk8cDKcZ6TGxjPN/Utzq19CsbzTX7PbbVHJ2Oo8dnigwufbmGJ
pZwyq0DkLBiPxxQeHg3LBePx1XsTfpZxMB5fWUy+sd/KGkvFs86bTpXnwDje
eWqt3P4cjOPhgt4PDyfAeH7pxlW3FYgtlho/yTLWBJ2n+W1T+VAeGI+nTC96
HGRhj6XyoXZpiTIGzeeqKpU8wThez/X0u5MPxvE8fo30EjaOWCof3VhS47MN
jPPhl05B3V5g3D8Y8m+2eAnG+UhTfuM79mnELrahcqpg3L/MnIdu+IBxvhHz
qJ27EIz7JwnzK+emcRLnsam1qYFxf6ab0m3kxxlL5RO/dl17+ZpmpwHNDVxc
sVT/OC1uMFadK5bqP6NUbswIAOP8QrRN99Rbrliq/316efzX9OnEWnKpuzRo
rq42ymXSvHfz4Hrud8R/apJidGn28NOdHgLG/fl8iXGnT+/I+SSVp9TxFJNy
GTcjHf1icn5vBNlzQovJ8SZv0taU09zmYB6+4H0sNb46wzuD1eA9uR9zch45
hL8n9+/6fquqzzRvmD5PfeEHcr8L7udkGH4gz8fA0FYwEozzhcZR3otfwXj8
dToxf3hRCXneMzSO2hiDcb4a3bm0PKqE1B/xyDfoWwmpP88Vne4u+RhLxlP1
gnymH8nxdcwPvlfBOJ8+scGtp/IjqZ8cFSKWS0uJI8+VF+8pJfV5zWoP+Ria
n7wTv/md5p2OlTzLPsVS+f6PxX7u5jQffS7VHvuJHM9ysMa4muaQWUGvBMrI
8aseym+0KCPt65FJY9w1Wvn2yZCZNTR/u6l0ekU5aZ+HtdrrLcvJ50d7onTj
ab54VfVZLc3LGd1rV34mn3/QFBe5n+ZtFzXZE2kulx489ovmg1VJP4S+EA96
6GpY0xywZvxREs1LS1KEGmi+62QUvPoruZ6t/OxjB76S+/MxP832Jq18n635
l0aae+bO2CZSQY73efTovg3NC82t+JNpTmabF9BcQZ735pScvjXfSP14t8t2
v+03Up/MB3hLbtP8JzZfofUbqX/nVY4mr60k9ZWnbSnvkUpSn5Muv/FIpZVv
knPqaKsk8ex1teCedVXExj4fXttVkfbRKuYmfZfmM59E4n9XkfY0tZ+EtL9r
yz1cHb7T2ue//SXE+XaV+n9ontpvQtp7Y7aU+LEfJB5M7T8h8XA6Z9C0Lpqj
/+1HIfFk3e7Gn8erSTya2p9CrBOvlN1N89R+FRLvTnREhZygeWr/CnGEQveR
Xpqn9rMQZ/trqjrR/ONzkkA/zVP7W4gnV44PONMc8m+/C7HQMaPSAfrxZuJP
dqTEUb7MVinMBOPrF0rxDS0C4/uXuUtqckZqHDW+Uhv4aacJxs+rIjbw2wUw
jpeHVeTVisG4Poy0NqTPuhNH1Z+gyyHLtcC4PgrIKQUGgXF9TqtuG3wPxu1D
2SfqwJy7cdR4qkxM9ZM2GM/PH/jUtfUSGOcPA6fjUkvAeH7Wf7nm4nn34qj5
eL7CAe9dYJyf3LFL6goG4/xFcb7u3lIwzm9KsseKuO/HUfPT+yxTZPXAOB/q
nmaUFHI/jlov532XjbsMjPMp3t1pZ+enxVHr624Nm7Xqg3H+JR8/3SgMjPeb
FG1/VFAOxvmbWcd+Sd4HcdR68Y6wubEGNLsr5EyPAOP3jdx1h5y/gHE+mOjP
+2thehy13kV6fb6OUTo5vvCzQ04krdz4zFLRinTy+b+/xrH4ISl3e3uS1eQh
KZ91TPDolYfkfOIWfqj6RrNkrqs6XwbxCyuRTNMMcn36M8oFozPI9Teknb9Y
RbOzkfjI0kxyv7jGv9mYgfF492qSb3kMzWKaUowfmeR55Hb9vLvsEbFOVCDf
3kfk+dVslfeLo9mxoaGn+hF53myBIZbLs+Ko8Xf4RqX3Flmkvoh8a5O/nkXq
02P3qJs1WXFUfqshrDpf8DGpf9+Lu9z3PSb10/5EXHv84zgqn51YomlSB8bz
BZfzBl6tzI6j8tuVNkkbrcC4/8mYrXstEUz9/k7G2Mx6MO4vvpqmnF71JI7q
H2xZjBqswTi/GL7FpncDjPuDQO20Zw1PSHsV6DMTE34aR8Xv+9HTow6Ccfxm
KD9iv/WUxIOy5v3Hm56SeGF9aW61SA5x/6YcjUM5cVS89v9+KCsZTL2/9OJd
1QLG8TVVND9YNDeOygcVPzqM2eaS+PXBeenhFJotl7350kqzYbZkusr2BMrX
Zvk1W9PcZPFDwIdmyYdSBjfA+PtdpjEvvALj+JhvUvOiAYzPd+ZdmUEO9QQy
vzcZKCFMc4z+L2s1mhtuykcfBFP5/vClUl8w7s9OaTVy3qKV513fsvU1GMfX
6b0hJ5vA+P7rbm9J4dyRQD2fq1eVakXA+Pn9+h2+SJ3mdYx2rUNg/PydwpS9
/cE4Huc2RT1JBuP6M03hT+cbmnUuqoq0gHH9i6qNNp+ukUDF51rp7lBRMK6/
a/3Vi3bQ7FgVN2kLxvH7qUSfDBOM2wO7p6Z9Chi3F63P8YlFGglUe4pYM/it
FYzbX7Wb9ryZmglUvBYpSVITA+P3jcdWjpzRBOP5smwn3YdHwDhesL691XJB
M4GKN5r848vvgHG8Cj2627AYjOfPvuenBLaD8fzZ6oUsBbN2JlDjdQdbo6F1
YLzeJCvn7notMJ4/m5zLftAejPfnqFuZxgSB8XzC5Udpn+6C8fqYyumc0z+A
8fyEkLm5UsfOBLLePe2h0xytBGp+LINtxh0JMN6fM2ZoWaetlUDtz1FLebT4
qFYCNZ9zaWyWziUwnl+q2GXlcx/sX2izi7+lDwkmZT8tAVPrkwbmdv/Rws9/
EKVrHFwzTzuB2m8wEpuzV1Ibt6dhpNLFE74LjNdLBanYvjsGnpq/GkWfI5+z
XNbG1zeGBNp45R6Ap49fqmQkjyObrXYOpdr4eidQ2uX8pC4w3m8xVL+4ilsn
4f/9LiwMZbmj3BvBeP3g39arBz7rKR9mKc7KKKtees5RB58fK4N/o2NGCPhx
+sj1ck42xgGfN63p4BlH+KB/YmPcqxAQLAPj9WsDYk5GPWC8f0fJ/V3Q/F0J
1Po3/0+CL6XATwLnyUGAYJSuPj2sD8b7efhcPkieBLslrxqzKmJnWBWvsgkD
4/09qcvdYjNo7nUsLSsH4/WHioUiM/rAeH2e75JziFeXHF9iV+68SZf8/cV5
a+8agPH6Pcv5Hr+cdMn53D74dUmELjnf7mzxXY90cbxgZyjM9vb9okuu19uy
MqcfvJC/DPIHNkbxQ8mehXpQv55vO8Iex8bg5fQTldUj92+v6Q8LIz1yf2/d
lYo4BbYZ/r60JZOV0TkZUBwJ5lV+FjFmxcqQ313D+hiM1/t53JKRr9Ajz7No
OPDooF4Ctd5vvvavG4v1cXxgYZjFy3+X0yf140bvJR4T/QRq/V/H9kZ1F/0E
av2fTPQW9yvgqfWx48i9IyQzGzy132UMvWG0tH3Tx+1jFHGHK60cBuP9ZqbN
4cZ8uxP+X487ghIU2i9uBuP1gG0XlV+Z7k6g1tNK10WNuIKn8o0hdHbTnw3R
u0l7KvRXPfQUjPfDzf0eHVe1G7eHfmS0vrt8ZDduL33ouqf6TH6DBOr3m1o+
xzG2GCRQ88MbRftOmRmQ9u52RvPeGYMEar62oCS+PgaM58NnCQ3y5YLx/LmB
s7buDwN8/l0o7m2S35gBiTdN/CO5ywwT/l8/24kkj+n2KhqS+HS64NbavWA8
3/pi4bjlOTBeHzjj8O7IODB+P6Cfm/L+GRivl46Zx8L+E4x/T6zBymjzBBi/
bxDPuntsuVECNf/qPIP9lpIRia/Pzf9WwATE0eIC7acZcT1Im38ejNdv67Jz
alwH4/2UV4zMz+cZkfhdl/LwUY0Rie9i49N/T4Lx+sCTupZCgsYJ1PrA3KRH
Jgyapw3OCt5nTPoPbU2rQg8wzr8j47JH48F4frama65UvjHpj0RVD9rWGZP+
yjEq5xqrSQKVzz5p4/my0oT0b2xKtrO2mZD+b2fIc2UrE9I/hjfwuniZ0PpP
Obv7iTSLBOY3FIDxfO3Rn4v5601I//t441E9dtMEarzF4vvKfxUYz9dqfFv6
XMU0gcpnQ9c59lmbkv7/u/sbMR+aV5UJ7L9hmkDlt/bCTlGvTEk+8cjl3YcG
U5JvTBQLckzbk0Dlu+orTisIg/F4MfjEh+NqNH8rXJV8cA/JX1byuVX7gnE+
fMS+dMGtPST/ycgT0Xy9h+RHY/PPeTTRrGpTnsVplkDlyxefrO0QMSP51dfZ
HqvUwXj8u2LfV9NDZiRfs80Qv+xvRvK1B5zer5PNSH43bFo59obmbfckpVto
DmTxOzzdnOSLn3f/uC4Kxvm1QLLU1x00HxwJmH0YjMfz97VrtjHNSf46GC/j
mkIzoy8wrcic5LtM9V+NrTSXRcsvm7mX5MdL/1zSFwPj/NxauTFAcy/Jp++G
b8k7QnN/c0j/BZo1izvYZVYmkvkOx+jjzjQLF3bdigDj73NYol79iOYsu7gF
X8H4/Caf92oM0LxjvqbHIqFE6vpDDsZnyYJxPl6VPfDbCEz9ftNs7VWnwfj+
2lkmmUaBcT6e+XA4+DEYP8/xabqvK8D4eW43vTU2CMbzZ8F3x6SWrCKumNQ/
LA/G9Udwd8p1EzCuX4dvTX5xAeP6+XDYcPZVMJ4fGdW6u+0JGNdvlXg210ow
bh9BvSZpw2C8vvHL9rRGvtWJVPtaHj1tmQIY59+HOsz094Bx+33AeBjgBsbr
GYfCpudFr06k2r9ys0X/UzAe715QeLTuOxiPj8svzrIaBePx87K6/Vf4hROp
+HRgU3bJFjCOZ/f8504zB+Px/UDVgS1nwXh+AK3PcYwF4/mGAE+e27lgnH9/
+nzo5w8wjsd8os95x8E4flud4d0pIJJIxfs7JUc8t4Jx/9C3Mv/xXjDOv7c6
L/5zDozzb7+3DquvgXH+XcL/as9zMH6fuPjY0pCfYLwfdV/B8TcTYPw+OmXh
m/Hla3B97kY9tgKbEBi/P1XIPXnEEozf33rPexd/Hox/v/G9lWDFdfA62Rum
PYH9aGHWqTkv1uD6O4AsZnxQqQVP7V8fRMnmq9xYRPH3D6HONNcHgqKJ1P4d
efbSJgYY5y+eRiIC+8FTv+84ht6lnN3tCcb50ILxMmYCeKp/nEBmumtf5IMX
BZi7nD4N+VXS+YE6MN4P3THwRZxtLW4vLAxZTXFrIXBBwDV43qyM83FeV7eB
SzYbw/NmZbzt+vbRam0itX+HW1WS0xuM92+bRvkqJv0t/z+/TGz7fuIlGO8v
ad8qlVIPxvnqppCAGnaxRGp/yrmGvwvgEql8t1BORksVjPPjuYGBXgfAOL82
/lmX7QOeys84GPEb5TtvgPF+n1afS8KFYrg9cDA2fmswawTj/e5u67aETltH
Pv/SPeStMBjn67PLmifUwDhfNxRWkrEB4/z8mku4nR8Y7z9qKm5LuAXG+5Mk
Vyh/ew3G4w2XE1Fzm8E4P88v7FDlEk+k8vOZfKpn1oBfWmVAvGRj6NtHp6uL
k/sbk9fVfAiMf7+gYb768gAw3h8vYRNncBuM98efetJ74S0Y74/Pm62Z3wJW
d+p6KxnJwuDaFz84XSKR2s+lmzEgsRa8ncsG4tEkusqpfUBDIpHKx3+ZJkUf
liD1a9294VKmBK7v48iJRZcrFYzz8dzdt7a+k8D3bxRNSx472Qaeym9HkM6I
furM9Yn/rz8YQVHaKbVi4Knf+xyeWncAnlo/MoRE+wy17cB4f46j+l3vQDDe
n/M0mu3pnfWJ1PiX/Y9JVzEY74/XUk4T+Q3G4+WI8Gl7Z0smUr+XWt1sFiYu
Sdq3yJaHRVqSiVQ+fuzSdBYHyURq/Ul2nYXsRTBeL8Eq88j+nmQiNZ7XCJiV
9AGM10OEft9f2QHG++O/r8+eN3dDIrX+YbXX3O3rwXh9jcOXA2d1wM/nPIDn
3YGyRHMeHgXjfHziDE/rJTDeH6/+8dCKtA0kHl4Wem74EYz361Q68wZ1biDx
U6joSMG8jYlIZZg1csyqFdktyx+S3EjibcaxxZK6YLxffqzA4eDxjbg+NCO1
Ra9iLoPx+ohLh5eWPdiYSOXnFbnHp38C4/07K7jfKHWD8X55W2sBZx6pRCr/
Ts86eWejVCK1XmJkxrs6PalEaj5bZa/gkhNSpH8JenBKJxSM8/HP7B98Hkol
Uvm4gPGqnDKpRGo+3ybVtbsHjOf708Y/rlkgnUjl50O6IhbS0qT/Y9w4G75b
mvSPzMGydyelE6n8vExzLWu4dCKVj/NfOy+XKU362wPdXxw+S5P++J6q+I0+
MJ4v64/yquLdlEjNpym1f+OW2ZRI5eP+SpLqhptI/18a4nvOeRPJD/gav2dE
bCL5g5W8VNsjMM7HUwMDBL9uIvlG78+fRgNg6vf1pWQuLpIh+Ymvb+BLWZlE
Kv8u+VY3bETzInH5DadlEqn82/L8JZsomm+XNcQ+liH5UrfwlvIKmUQq31Zw
DZkxRLP3+2a0RDaRyr+LVyidkpcl+RfvyfC7JrTyva/bfrnIkvztFp8y31Wa
O+2jdj0B4/xb7kWHb6UsyQc9FqjmDsuSfLHIJrqHT454/tMuUQWazeaoW+6R
I/nmjX1xEW5yJB/9ndFbHA3G+bgMlyZbjhzJX933/J3gIPntm3sDR0fBOP/m
ZtW+yS9PbGqQ9H2LPMmnE5KHecxpbhvZteMszf8B2NRz/A==
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0.01143456, 0},
  Epilog->{{
     RGBColor[1, 0, 0], 
     PointSize[0.02], 
     PointBox[{0.01903104, 2.56}], 
     PointBox[{0.02074368, 2.6}], 
     GrayLevel[0], 
     PointBox[{0.01237824, 1.28}]}},
  Method->{},
  PlotRange->{{0.01143456, 0.0355872}, {0, 2.6}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.0004830528, 0.0004830528}, {0.052000000000000005`, 
   0.052000000000000005`}}]], "Output",
 CellChangeTimes->{3.5849768187341557`*^9, 3.5849773894769554`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"formatedSidebandData2", ",", 
   RowBox[{"Joined", "\[Rule]", "True"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"(", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Red", ",", 
          RowBox[{"PointSize", "[", "0.02", "]"}]}], "}"}], "~", "Join", "~", 
        RowBox[{"(", 
         RowBox[{"Point", "/@", 
          RowBox[{"findCarrierAndSidebands", "[", 
           RowBox[{"formatedSidebandData2", ",", "cal", ",", "0.007"}], 
           "]"}]}], ")"}]}], ")"}], ")"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5849777601074743`*^9, 3.584977766617483*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.24720000000000014`, 0.24, 0.6], LineBox[CompressedData["
1:eJxN3Hk4VU0YAHBbtEdpkZQUSaTIkmSukAgha0RRUqgUhUp2bpTsZSlLJVok
kqJEqaQkKlFCdpJ93763fHPm9E/P75lz3bPMvPPOnJm70uqY/kE2FhaWdZws
LH//f8fRl8Ji54+ir/79V4T+6Gl7e4J7lw4lz3F6h3iu3zJns/dHpVUbMj11
itGm35My3uC15sEF/aLvkfFm03kcDv4oe7lvu152CTrj97DFh+Zr5bMKph31
RzeOb51ZkVSK8gUPxvjR3Ojw3InrmD/6rff3E5/Q9JzFOgHgK6HNwnkmZWjd
dMc1M44T6xi+Y7kArj1ppeAQX45OJK6qmulIHNF5NiMQfIb3vnqd22eUrfg1
aPYJ4h9MSZuL4Jf9onAFX9Dk1wA09ySx0OpfS4LBx2RNrIskvyI1xy0985xI
+eHn4cWXaQ6a9ecGjzNxmom6e6gz+Xz5zXjjBaf8EVzs3ytGAz3DG8Jp5mPs
nrnwtD+yiHQ6zB73FSlevFsfQfO+qmnPFrmQ473XWEZG0XzLKfvYElfid/k8
Glddyec75toJLXUj58dt/mo02o2US6cIfOE/Qz5vPHDqfizNbiql/gJnyfXE
XV67/9pZ8vn8ai+FFedIeYPYjwXxNHO5yHQIupPvFyu89DrBnXxeZ37LdaHz
5HhHS2XXpPPk+PC70fqrPUh59nDvupsepPz7du1pIp7k702E3fp5y5Oc/8q6
ycdrvEi52nrTkNtepNz2zMMja72JA9/OUk31JsenLTwosM6HfH+Z1fOBOz7k
+P60xaXivuT4JePHU+75knJFzXde6/2ILaNWmafR7NVwVmaDvz96vLj89OnT
8Dw3fp2bTnORu2TLxgBy/O/igPyHNM/j+xUtzSSWttnilEmzUUa4tswFcr9c
Wf6IZF0g5xunrc4iF0iu70V0fOXjQHJ8ffPwQ/kg0n44ZXYHPQki7U3M6+5B
hYukfWp/nIZyLpL2fHyZ5RLFS6S9hx/O7s4FD0rOZY+TLUWPs3iKtwb7o/nx
9cOFoR9RFbvdjedgr+qO0sPsH9C47qtz6DLxymsCxi8uk/ij2n5qg3II8SH5
0hkFNAf6rq3fFkri2f0yr9yXoSSefVrxI0I1jLjPXuZYYRg5fsnTSzu2h5P4
uIWrZeUbmi0MlEfVI4jnhglUHrhFLN/v2RCnwqRsvu37s+WqTOrvnw/eFHUd
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
9fFq0ZHdEVS+/XXvp3AFA2JbDnfWMwYk/xpOFTuaY0Dyt0C9iqpRA5LfCQx5
qysaRlD59/1rGzLPGpJyhlq14DNDkk+WtTMvjoPx/Ld1qOzIViNS3i9fb+Nu
RPJTv5rg8uc0L/FTZEzSnCreehcZk/x2S3kEnwfNH1y3+b2g2VKws4fFhOTL
Xa9jLJVNSL7s5bDjvSfNvLz98gU0q+TWXu2WiqZ8aIbCyRPS0dR8+FBaU81D
MD6/C0ZhWr1gfH3LxtET6U3R1PXfS/ot7ATG4xWkeTU0E4zv/6cutck+MB4v
WUX12MnIRFPjr76t1785g3F98W3YqZYFxvVtceBQ+gAY18eUjTeXy8lGU/ms
wje9wNOy0VR9fu8+MfgYjOu7hfCdA0Ng3D46i40/yctFU+uTPE9wKLmCcXtb
8G/BBvGNvL2LR2iWtZnpoyAfjWb/NGxYvPMnejv7cZebfDTVnk0zrPfmgPH7
xXZT7nejYJwPn2V5Jqu4OZqKD3OTDyedpTleexH3MzB+/7ixr+DsOM0vo4+1
blUgxxsqLzNyp7mp+W3Bc5pdLjlLTtI8U0YoFm0hjvleMt1jCzk/Ca8zzi9o
5Xmior9YFMn16H78rKOsSK73l7NnjifNJ5etFy1QJPdn2suqcLat0dR8Q9Rh
f1aVreR+inJvOupN89Os2qqXYDwfobX3ojqHUjQV76rZFTJVaT6W2iToC8bz
D6x6YRcLaYaUeWQaIvVh9bXfNtsRqS9ZqlfL/WhWb1djvEGkvlWG9NzlYkRT
46kj8tf5dtA89nOnXwAYj88u+Q71vAXj+LZC/KblDOVoKp6ll+m916BZxXVC
/gIYx6/PK+7cfEezzWvj+bO2RVPxa8ie4/xOmpkL0tsDwThe8T/da/Ke5nv7
ZhbOViHtVYnr8UZtFdKeS+9ZX7sIxu+/9htwzypRiabiTe9I7um5qtFUvPFN
ONygo0rix6Idi/SC6fZSW2A1J4ZysmjP+USaN3+89vsXzcXOO01XzY2h/r75
sqFC67mk/E/BDakbYByfPA7rXW+gmYd7YpbwPOKkrFSXg2B8/pv2GjfeBON4
9pqdQ78JjK/XJPXBcxFu4lbdvesOgan9PP/Wt8VQ92/OtSyOFjC+v9dUrR1F
eYg3tM/7aQvGz6fg33q4GGp+YLf84cetYBwfp9bHxVDP+7RvweUjYNzfTa2X
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
     "]]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0.01143456, 0},
  Epilog->{{
     RGBColor[1, 0, 0], 
     PointSize[0.02], 
     PointBox[{0.01237824, 1.28}], 
     PointBox[{0.01903104, 2.56}], 
     PointBox[{0.02074368, 2.6}]}},
  ImageSize->{423., Automatic},
  Method->{},
  PlotRange->{{0.01143456, 0.0355872}, {0, 2.6}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.0004830528, 0.0004830528}, {0.052000000000000005`, 
   0.052000000000000005`}}]], "Output",
 CellChangeTimes->{3.584977767887485*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getFeedbackSignals", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0.01237824`", ",", "1.28`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.01903104`", ",", "2.56`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0.02074368`", ",", "2.6`"}], "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.5853345968721848`*^9, 3.5853345973121853`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.01550387596899226`"}], ",", "2.015625`"}], "}"}]], "Output",
 CellChangeTimes->{3.5853345975721855`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Compile Work...", "Subsection",
 CellChangeTimes->{{3.5850707494589276`*^9, 3.5850707553089356`*^9}}],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CCodeGenerator`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.585017594904103*^9, 3.5850176178941345`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.585019606957165*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"functions", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "findCalibrationCompiled", ",", "findCarrierAndSidebandsCompiled", ",", 
      "getFeedbackSignalsCompiled"}], "}"}], "~", "Join", "~", 
    RowBox[{"{", 
     RowBox[{
     "commonestCompiled", ",", "getPeakInfoInSectionCompiled", ",", 
      "gatherByThresholdAndGetPeakInfoInSectionCompiled", ",", 
      "getBiggestPeakFromPeakInfoCompiled", ",", 
      "findClosestPeakToTargetFromPeakInfoCompiled", ",", 
      "findCalibrationUsingAllPeaksCompiled", ",", 
      "findCarrierPeakUsingAllPeaksCompiled", ",", 
      "findSidebandPeaksUsingAllPeaksCompiled"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionNames", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<findCalibration\>\"", ",", "\"\<findCarrierAndSidebands\>\"", ",", 
      "\"\<getFeedbackSignals\>\""}], "}"}], "~", "Join", "~", 
    RowBox[{"{", 
     RowBox[{
     "\"\<commonest\>\"", ",", "\"\<getPeakInfoInSection\>\"", ",", 
      "\"\<gatherByThresholdAndGetPeakInfoInSection\>\"", ",", 
      "\"\<getBiggestPeakFromPeakInfo\>\"", ",", 
      "\"\<findClosestPeakToTargetFromPeakInfo\>\"", ",", 
      "\"\<findCalibrationUsingAllPeaks\>\"", ",", 
      "\"\<findCarrierPeakUsingAllPeaks\>\"", ",", 
      "\"\<findSidebandPeaksUsingAllPeaks\>\""}], "}"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.5850184284704237`*^9, 3.5850184520604568`*^9}, {
  3.5850195830871315`*^9, 3.5850196087371674`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"CCodeGenerate", "[", 
    RowBox[{"functions", ",", "functionNames", ",", 
     RowBox[{"dir", "<>", "\"\<findPeaks.c\>\""}]}], "]"}], 
   RowBox[{"CCodeGenerate", "[", 
    RowBox[{"functions", ",", "functionNames", ",", 
     RowBox[{"dir", "<>", "\"\<findPeaks.h\>\""}], ",", 
     RowBox[{"\"\<CodeTarget\>\"", "\[Rule]", "\"\<WolframRTLHeader\>\""}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.585017587844093*^9, 3.5850176240741434`*^9}, {
  3.5850177111142654`*^9, 3.585017747654317*^9}, {3.5850177803643627`*^9, 
  3.5850178234211683`*^9}, {3.585018056076805*^9, 3.5850180669268208`*^9}, {
  3.5850183528803177`*^9, 3.5850183531803184`*^9}, {3.585018427080422*^9, 
  3.585018466210477*^9}}],

Cell[BoxData[
 RowBox[{"\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\findPeaks.c\"\>", 
  " ", "\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\findPeaks.h\"\>"}]], "Output",
 CellChangeTimes->{
  3.5850178260043163`*^9, 3.5850180705068254`*^9, 3.58501835436032*^9, {
   3.5850184569604635`*^9, 3.5850184672904787`*^9}, 3.5850193823068504`*^9, {
   3.5850195683471107`*^9, 3.585019592027144*^9}, 3.585070496032561*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"CCodeGenerate", "[", 
  RowBox[{"commonestCompiled", ",", "\"\<commonest\>\"", ",", 
   RowBox[{"dir", "<>", "\"\<commonest.h\>\""}], ",", 
   RowBox[{"\"\<CodeTarget\>\"", "\[Rule]", "\"\<WolframRTLHeader\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"CCodeGenerate", "[", 
  RowBox[{"commonestCompiled", ",", "\"\<commonest\>\"", ",", 
   RowBox[{"dir", "<>", "\"\<commonest.c\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5850184876305065`*^9, 3.5850185286205654`*^9}}],

Cell[BoxData["\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\commonest.h\"\>"], "Output",
 CellChangeTimes->{3.585018496170519*^9, 3.585018528990566*^9}],

Cell[BoxData["\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\commonest.c\"\>"], "Output",
 CellChangeTimes->{3.585018496170519*^9, 3.5850185290505657`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"f", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{"2", "x"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f2", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", "y", "}"}], ",", 
     RowBox[{"y", "+", 
      RowBox[{"f", "[", "y", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"f", "[", "_", "]"}], ",", "_Real"}], "}"}], "}"}]}], "]"}]}],
   ";"}]}], "Input",
 CellChangeTimes->{{3.585019062824402*^9, 3.585019074314418*^9}, {
  3.5850191335965023`*^9, 3.5850191967465906`*^9}}],

Cell[BoxData[
 RowBox[{"CompilationOptions", "\[Rule]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
    RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
    RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
   "}"}]}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"CCodeGenerate", "[", 
  RowBox[{"f", ",", "\"\<f\>\"", ",", 
   RowBox[{"dir", "<>", "\"\<f.h\>\""}], ",", 
   RowBox[{"\"\<CodeTarget\>\"", "\[Rule]", "\"\<WolframRTLHeader\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"CCodeGenerate", "[", 
  RowBox[{"f", ",", "\"\<f\>\"", ",", 
   RowBox[{"dir", "<>", "\"\<f.c\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5850190926344433`*^9, 3.5850191224764867`*^9}}],

Cell[BoxData["\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\f.h\"\>"], "Output",
 CellChangeTimes->{{3.5850190971244497`*^9, 3.585019122976487*^9}}],

Cell[BoxData["\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\f.c\"\>"], "Output",
 CellChangeTimes->{{3.5850190971244497`*^9, 3.5850191229964876`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"CCodeGenerate", "[", 
  RowBox[{"f2", ",", "\"\<f2\>\"", ",", 
   RowBox[{"dir", "<>", "\"\<f2.h\>\""}], ",", 
   RowBox[{"\"\<CodeTarget\>\"", "\[Rule]", "\"\<WolframRTLHeader\>\""}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"CCodeGenerate", "[", 
  RowBox[{"f2", ",", "\"\<f2\>\"", ",", 
   RowBox[{"dir", "<>", "\"\<f2.c\>\""}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.5850192021865983`*^9, 3.585019207676606*^9}}],

Cell[BoxData["\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\f2.h\"\>"], "Output",
 CellChangeTimes->{3.5850192089366074`*^9}],

Cell[BoxData["\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\f2.c\"\>"], "Output",
 CellChangeTimes->{3.585019208956608*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"functions", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "findCalibrationCompiled", ",", "findCarrierAndSidebandsCompiled", ",", 
      "getFeedbackSignalsCompiled"}], "}"}], "~", "Join", "~", 
    RowBox[{"{", 
     RowBox[{
     "commonestCompiled", ",", "getPeakInfoInSectionCompiled", ",", 
      "gatherByThresholdAndGetPeakInfoInSectionCompiled", ",", 
      "getBiggestPeakFromPeakInfoCompiled", ",", 
      "findClosestPeakToTargetFromPeakInfoCompiled", ",", 
      "findCalibrationUsingAllPeaksCompiled", ",", 
      "findCarrierPeakUsingAllPeaksCompiled", ",", 
      "findSidebandPeaksUsingAllPeaksCompiled"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionNames", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<findCalibration\>\"", ",", "\"\<findCarrierAndSidebands\>\"", ",", 
      "\"\<getFeedbackSignals\>\""}], "}"}], "~", "Join", "~", 
    RowBox[{"{", 
     RowBox[{
     "\"\<commonest\>\"", ",", "\"\<getPeakInfoInSection\>\"", ",", 
      "\"\<gatherByThresholdAndGetPeakInfoInSection\>\"", ",", 
      "\"\<getBiggestPeakFromPeakInfo\>\"", ",", 
      "\"\<findClosestPeakToTargetFromPeakInfo\>\"", ",", 
      "\"\<findCalibrationUsingAllPeaks\>\"", ",", 
      "\"\<findCarrierPeakUsingAllPeaks\>\"", ",", 
      "\"\<findSidebandPeaksUsingAllPeaks\>\""}], "}"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.5850184284704237`*^9, 3.5850184520604568`*^9}, {
  3.5850195830871315`*^9, 3.5850196087371674`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"functions2", "=", 
   RowBox[{"{", 
    RowBox[{
    "commonestCompiled", ",", "getPeakInfoInSectionCompiled", ",", 
     "gatherByThresholdAndGetPeakInfoInSectionCompiled", ",", 
     "getBiggestPeakFromPeakInfoCompiled", ",", 
     "findClosestPeakToTargetFromPeakInfoCompiled", ",", 
     "findCalibrationUsingAllPeaksCompiled", ",", 
     "findCarrierPeakUsingAllPeaksCompiled", ",", 
     "findSidebandPeaksUsingAllPeaksCompiled", ",", "findCalibrationCompiled",
      ",", "findCarrierAndSidebandsCompiled", ",", 
     "getFeedbackSignalsCompiled"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionNames2", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<commonest\>\"", ",", "\"\<getPeakInfoInSection\>\"", ",", 
     "\"\<gatherByThresholdAndGetPeakInfoInSection\>\"", ",", 
     "\"\<getBiggestPeakFromPeakInfo\>\"", ",", 
     "\"\<findClosestPeakToTargetFromPeakInfo\>\"", ",", 
     "\"\<findCalibrationUsingAllPeaks\>\"", ",", 
     "\"\<findCarrierPeakUsingAllPeaks\>\"", ",", 
     "\"\<findSidebandPeaksUsingAllPeaks\>\"", ",", "\"\<findCalibration\>\"",
      ",", "\"\<findCarrierAndSidebands\>\"", ",", 
     "\"\<getFeedbackSignals\>\""}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.5850184284704237`*^9, 3.5850184520604568`*^9}, {
  3.5850195830871315`*^9, 3.5850196087371674`*^9}, {3.585019644207217*^9, 
  3.5850198496375046`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CCodeGenerate", "[", 
   RowBox[{"functions2", ",", "functionNames2", ",", 
    RowBox[{"dir", "<>", "\"\<findPeaks.c\>\""}]}], "]"}], 
  RowBox[{"CCodeGenerate", "[", 
   RowBox[{"functions2", ",", "functionNames2", ",", 
    RowBox[{"dir", "<>", "\"\<findPeaks.h\>\""}], ",", 
    RowBox[{"\"\<CodeTarget\>\"", "\[Rule]", "\"\<WolframRTLHeader\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.585017587844093*^9, 3.5850176240741434`*^9}, {
  3.5850177111142654`*^9, 3.585017747654317*^9}, {3.5850177803643627`*^9, 
  3.5850178234211683`*^9}, {3.585018056076805*^9, 3.5850180669268208`*^9}, {
  3.5850183528803177`*^9, 3.5850183531803184`*^9}, {3.585018427080422*^9, 
  3.585018466210477*^9}, {3.585019625317191*^9, 3.585019648977224*^9}}],

Cell[BoxData[
 RowBox[{"\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\findPeaks.c\"\>", 
  " ", "\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\findPeaks.h\"\>"}]], "Output",
 CellChangeTimes->{{3.585019672077256*^9, 3.585019852037508*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"includeNum", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functions2", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "commonestCompiled", ",", "getPeakInfoInSectionCompiled", ",", 
      "gatherByThresholdAndGetPeakInfoInSectionCompiled", ",", 
      "getBiggestPeakFromPeakInfoCompiled", ",", 
      "findClosestPeakToTargetFromPeakInfoCompiled", ",", 
      "findCalibrationUsingAllPeaksCompiled", ",", 
      "findCarrierPeakUsingAllPeaksCompiled", ",", 
      "findSidebandPeaksUsingAllPeaksCompiled", ",", 
      "findCalibrationCompiled", ",", "findCarrierAndSidebandsCompiled", ",", 
      "getFeedbackSignalsCompiled"}], "}"}], "//", 
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{"#", ",", "includeNum"}], "]"}], "&"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"functionNames2", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<commonest\>\"", ",", "\"\<getPeakInfoInSection\>\"", ",", 
      "\"\<gatherByThresholdAndGetPeakInfoInSection\>\"", ",", 
      "\"\<getBiggestPeakFromPeakInfo\>\"", ",", 
      "\"\<findClosestPeakToTargetFromPeakInfo\>\"", ",", 
      "\"\<findCalibrationUsingAllPeaks\>\"", ",", 
      "\"\<findCarrierPeakUsingAllPeaks\>\"", ",", 
      "\"\<findSidebandPeaksUsingAllPeaks\>\"", ",", 
      "\"\<findCalibration\>\"", ",", "\"\<findCarrierAndSidebands\>\"", ",", 
      "\"\<getFeedbackSignals\>\""}], "}"}], "//", 
    RowBox[{
     RowBox[{"Take", "[", 
      RowBox[{"#", ",", "includeNum"}], "]"}], "&"}]}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.5850184284704237`*^9, 3.5850184520604568`*^9}, {
   3.5850195830871315`*^9, 3.5850196087371674`*^9}, {3.585019644207217*^9, 
   3.5850198496375046`*^9}, {3.5850198858575554`*^9, 3.5850199692676725`*^9}, 
   3.585020093377846*^9, 3.5850202243780293`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CCodeGenerate", "[", 
   RowBox[{"functions2", ",", "functionNames2", ",", 
    RowBox[{"dir", "<>", "\"\<findPeaks.c\>\""}]}], "]"}], 
  RowBox[{"CCodeGenerate", "[", 
   RowBox[{"functions2", ",", "functionNames2", ",", 
    RowBox[{"dir", "<>", "\"\<findPeaks.h\>\""}], ",", 
    RowBox[{"\"\<CodeTarget\>\"", "\[Rule]", "\"\<WolframRTLHeader\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.585017587844093*^9, 3.5850176240741434`*^9}, {
  3.5850177111142654`*^9, 3.585017747654317*^9}, {3.5850177803643627`*^9, 
  3.5850178234211683`*^9}, {3.585018056076805*^9, 3.5850180669268208`*^9}, {
  3.5850183528803177`*^9, 3.5850183531803184`*^9}, {3.585018427080422*^9, 
  3.585018466210477*^9}, {3.585019625317191*^9, 3.585019648977224*^9}}],

Cell[BoxData[
 RowBox[{"\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\findPeaks.c\"\>", 
  " ", "\<\"C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighPowerSidebandLock\\\\src\\\\mathematica\\\\findPeaks.h\"\>"}]], "Output",
 CellChangeTimes->{{3.5850199136575947`*^9, 3.585019970457674*^9}, 
   3.585020049767785*^9, 3.5850200952678485`*^9, 3.5850202259080315`*^9, 
   3.585065155461552*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CompiledFunctionTools`\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.5850207639907846`*^9, 3.5850207688407917`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompilePrint", "[", "commonestCompiled", "]"}]], "Input",
 CellChangeTimes->{{3.5850207736307983`*^9, 3.5850207794708066`*^9}, 
   3.585020815740857*^9}],

Cell[BoxData["\<\"\\n\\t\\t1 argument\\n\\t\\t10 Integer registers\\n\\t\\t3 \
Real registers\\n\\t\\t5 Tensor registers\\n\\t\\tUnderflow checking \
off\\n\\t\\tOverflow checking off\\n\\t\\tInteger overflow checking \
on\\n\\t\\tRuntimeAttributes -> {}\\n\\n\\t\\tT(R1)0 = A1\\n\\t\\tI3 = \
1\\n\\t\\tR1 = 1.\\n\\t\\tI9 = 2\\n\\t\\tI6 = -1\\n\\t\\tI7 = \
0\\n\\t\\tResult = T(R1)3\\n\\n1\\tT(R1)1 = Union[ T(R1)0]]\\n2\\tI2 = \
Length[ T(R1)1]\\n3\\tI5 = I6\\n4\\tT(R2)3 = Table[ I2, I5]\\n5\\tI4 = I7\\n6\
\\tgoto 14\\n7\\tR0 = GetElement[ T(R1)1, I4]\\n8\\tT(I2)4 = Position[ \
T(R1)0, T(R0)0, R1]]\\n9\\tI8 = Length[ T(I2)4]\\n10\\tR0 = GetElement[ \
T(R1)1, I4]\\n11\\tR2 = I8\\n12\\tT(R1)4 ={ R2, R0 }\\n13\\tElement[ T(R2)3, \
I5] = T(R1)4\\n14\\tif[ ++ I4 <= I2] goto 7\\n15\\tT(R2)1 = Sort[ \
T(R2)3]]\\n16\\tT(R1)3 = Part[ T(R2)1, I6]\\n17\\tR0 = Part[ T(R1)3, I9]\\n18\
\\tT(R1)3 ={ R0 }\\n19\\tReturn\\n\"\>"], "Output",
 CellChangeTimes->{3.5850207802608075`*^9, 3.5850208166808586`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompilePrint", "[", "findPeakWithBiggestValueCompiled", 
  "]"}]], "Input",
 CellChangeTimes->{{3.5850647116009307`*^9, 3.5850647150809355`*^9}, 
   3.5850648746111593`*^9}],

Cell[BoxData["\<\"\\n\\t\\t1 argument\\n\\t\\t2 Boolean registers\\n\\t\\t6 \
Integer registers\\n\\t\\t3 Real registers\\n\\t\\t3 Tensor \
registers\\n\\t\\tUnderflow checking off\\n\\t\\tOverflow checking \
off\\n\\t\\tInteger overflow checking on\\n\\t\\tRuntimeAttributes -> \
{}\\n\\n\\t\\tT(R3)0 = A1\\n\\t\\tI0 = 1\\n\\t\\tR2 = 7.\\n\\t\\tI2 = 2\\n\\t\
\\tResult = T(R2)2\\n\\n1\\tI1 = I0\\n2\\tI3 = I0\\n3\\tI4 = Length[ \
T(R3)0]\\n4\\tB0 = I3 <= I4\\n5\\tif[ !B0] goto 16\\n6\\tR0 = Part[ T(R3)0, \
I3, I0, I2]\\n7\\tR1 = Part[ T(R3)0, I1, I0, I2]\\n8\\tB1 = R0 > R1 (tol \
R2)\\n9\\tif[ !B1] goto 12\\n10\\tI1 = I3\\n11\\tgoto 12\\n12\\tI4 = \
I3\\n13\\tI5 = I4 + I0\\n14\\tI3 = I5\\n15\\tgoto 3\\n16\\tT(R2)2 = Part[ \
T(R3)0, I1]\\n17\\tReturn\\n\"\>"], "Output",
 CellChangeTimes->{
  3.5850647153009357`*^9, 3.5850648749611597`*^9, {3.5850649059612026`*^9, 
   3.5850649564612737`*^9}, {3.5850649932813253`*^9, 3.585065048171402*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<CCompilerDriver`\>\"", "]"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CCompilers", "[", "Full", "]"}]], "Input",
 CellChangeTimes->{{3.585021445178308*^9, 3.585021445208308*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"Intel Compiler\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`IntelCompiler`IntelCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "None"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"Generic C Compiler\"\>"}], ",", 
     RowBox[{"\<\"Compiler\"\>", "\[Rule]", 
      "CCompilerDriver`GenericCCompiler`GenericCCompiler"}], ",", 
     RowBox[{"\<\"CompilerInstallation\"\>", "\[Rule]", "None"}], ",", 
     RowBox[{"\<\"CompilerName\"\>", "\[Rule]", "Automatic"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.5850214231442723`*^9, 3.5850214468683105`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DefaultCCompiler", "[", "]"}]], "Input"],

Cell[BoxData["CCompilerDriver`VisualStudioCompiler`VisualStudioCompiler"], \
"Output",
 CellChangeTimes->{3.585021470278343*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["$CCompiler"], "Input"],

Cell[BoxData["Automatic"], "Output",
 CellChangeTimes->{3.5850216325085707`*^9, 3.5850218239688387`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$CCompiler", " ", "=", "\n", "\t", "Automatic"}]], "Input",
 CellChangeTimes->{{3.5850216167885485`*^9, 3.5850216419885836`*^9}, {
  3.585021681828639*^9, 3.5850216825686407`*^9}, {3.5850217544187407`*^9, 
  3.5850217558487425`*^9}, {3.5850218197488327`*^9, 3.585021821438835*^9}}],

Cell[BoxData["Automatic"], "Output",
 CellChangeTimes->{3.5850216428685846`*^9, 3.5850216830286407`*^9, 
  3.585021756708744*^9, 3.5850218221188354`*^9}]
}, Open  ]],

Cell[BoxData["\"\<Windows-x86-64\>\""], "Input"],

Cell[CellGroupData[{

Cell[BoxData["$SystemID"], "Input",
 CellChangeTimes->{{3.5850219969110804`*^9, 3.5850220082410965`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Remove", "::", "rmlck"}], "MessageName"], ":", 
  " ", "\<\"Symbol \[NoBreak]\\!\\($SystemID\\)\[NoBreak] is Locked and \
cannot be removed. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\
\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/Remove/rmlck\\\", ButtonNote -> \
\\\"Remove::rmlck\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.585021998741083*^9, 3.5850220032710896`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$SystemID", "//", "Attributes"}]], "Input",
 CellChangeTimes->{{3.585021950011015*^9, 3.585021951561017*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Locked", ",", "Protected"}], "}"}]], "Output",
 CellChangeTimes->{3.5850219519510174`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Unprotect", "[", "$SystemID", "]"}]], "Input",
 CellChangeTimes->{{3.5850219005889454`*^9, 3.5850219195499725`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Protect", "::", "locked"}], "MessageName"], ":", 
  " ", "\<\"Symbol \[NoBreak]\\!\\($SystemID\\)\[NoBreak] is locked. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/Protect/locked\\\", \
ButtonNote -> \\\"Protect::locked\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{{3.5850219100389585`*^9, 3.5850219200499725`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.5850219100389585`*^9, 3.5850219200499725`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$SystemID", "=", "\"\<Windows\>\""}]], "Input",
 CellChangeTimes->{{3.5850218761989117`*^9, 3.5850218859389253`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Set", "::", "wrsym"}], "MessageName"], ":", 
  " ", "\<\"Symbol \[NoBreak]\\!\\($SystemID\\)\[NoBreak] is Protected. \
\\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", \
ButtonFrame->None, ButtonData:>\\\"paclet:ref/message/General/wrsym\\\", \
ButtonNote -> \\\"Set::wrsym\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.5850218962389393`*^9}],

Cell[BoxData["\<\"Windows\"\>"], "Output",
 CellChangeTimes->{{3.5850218790789156`*^9, 3.5850218962489395`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Tests", "Subsection",
 CellChangeTimes->{{3.585004797823517*^9, 3.585004798643518*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"commonestCompiled", "[", 
  RowBox[{"{", 
   RowBox[{
   "4", ",", "1", ",", "1", ",", "1", ",", "5", ",", "1", ",", "1", ",", "1", 
    ",", "1", ",", "1", ",", "1", ",", "6", ",", "0", ",", "0", ",", "0", ",",
     "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", 
    "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0",
     ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
    ",", "0", ",", "0"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.5850016883151636`*^9, 3.585001692555169*^9}, {
  3.585001933655507*^9, 3.585001941505518*^9}}],

Cell[BoxData[
 RowBox[{"{", "0.`", "}"}]], "Output",
 CellChangeTimes->{{3.5850016929051695`*^9, 3.585001727275218*^9}, 
   3.5850018190153465`*^9, {3.5850018570053997`*^9, 3.585001942085519*^9}, {
   3.5850025566983795`*^9, 3.585002565068391*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"allPeaks", "=", 
  RowBox[{
  "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", "formatedCalData3",
    "]"}]}]], "Input",
 CellChangeTimes->{{3.5850030907591267`*^9, 3.5850030911491275`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.0058368000000000005`", ",", "1.14666667`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.005720640000000001`", ",", "0.005952000000000001`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.01314816`", ",", "4.06`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.0130032`", ",", "0.01333344`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02039136`", ",", "0.2`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02039136`", ",", "0.02039136`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02049984`", ",", "1.14`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02039424`", ",", "0.02062272`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02777184`", ",", "4.06`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02763552`", ",", "0.02796096`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.034948799999999995`", ",", "0.293333333`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.03494016`", ",", "0.034948799999999995`"}], "}"}]}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{{3.5850011948544726`*^9, 3.5850012006444807`*^9}, 
   3.585002641408498*^9, 3.5850030915791283`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getBiggestPeakFromPeakInfoCompiled", "[", 
  RowBox[{
  "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", "formatedCalData3",
    "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.585002762248667*^9, 3.585002765868672*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.02777184`", ",", "4.06`"}], "}"}]], "Output",
 CellChangeTimes->{3.5850027662786727`*^9, 3.5850029706689587`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
  RowBox[{
   RowBox[{
   "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
    "formatedCalData3", "]"}], ",", "0.1"}], "]"}]], "Input",
 CellChangeTimes->{{3.5850029048988667`*^9, 3.5850029099588737`*^9}, {
  3.5850029556689377`*^9, 3.585002960898945*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.034948799999999995`", ",", "0.293333333`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.5850029103288746`*^9, {3.5850032038992853`*^9, 3.5850032165593033`*^9}, 
   3.585003579409811*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findCalibrationUsingAllPeaksCompiled", "[", 
  RowBox[{"allPeaks", ",", "0.015"}], "]"}]], "Input",
 CellChangeTimes->{{3.5850035960398345`*^9, 3.5850036140898595`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.01314816`", ",", "4.06`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02777184`", ",", "4.06`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5850036017398424`*^9, 3.5850036144998603`*^9}, 
   3.5850042375527325`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
  "formatedCalData3", "]"}]], "Input",
 CellChangeTimes->{3.5850039532213345`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.0058368000000000005`", ",", "1.14666667`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.005720640000000001`", ",", "0.005952000000000001`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.01314816`", ",", "4.06`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.0130032`", ",", "0.01333344`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02039136`", ",", "0.2`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02039136`", ",", "0.02039136`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02049984`", ",", "1.14`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02039424`", ",", "0.02062272`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02777184`", ",", "4.06`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02763552`", ",", "0.02796096`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.034948799999999995`", ",", "0.293333333`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.03494016`", ",", "0.034948799999999995`"}], "}"}]}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{{3.585003949311329*^9, 3.585003953511335*^9}, 
   3.5850040303124423`*^9, {3.585004088092523*^9, 3.585004104732547*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findCalibrationCompiled", "[", 
  RowBox[{"formatedCalData3", ",", "0.015"}], "]"}]], "Input",
 CellChangeTimes->{{3.5850038638812094`*^9, 3.5850038788112307`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.01314816`", ",", "4.06`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02777184`", ",", "4.06`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.5850038794312315`*^9, 3.5850039751213655`*^9, 3.5850040323424454`*^9, {
   3.5850040889325247`*^9, 3.5850041054325476`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
  "formatedCalData3", "]"}]], "Input",
 CellChangeTimes->{{3.5850002740611835`*^9, 3.585000274371184*^9}, {
   3.585000453151434*^9, 3.5850004888114843`*^9}, 3.5850006992417784`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.0058368000000000005`", ",", "1.14666667`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.005720640000000001`", ",", "0.005952000000000001`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.01314816`", ",", "4.06`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.0130032`", ",", "0.01333344`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02039136`", ",", "0.2`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02039136`", ",", "0.02039136`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02049984`", ",", "1.14`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02039424`", ",", "0.02062272`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.02777184`", ",", "4.06`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.02763552`", ",", "0.02796096`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.034948799999999995`", ",", "0.293333333`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.03494016`", ",", "0.034948799999999995`"}], "}"}]}], "}"}]}],
   "}"}]], "Output",
 CellChangeTimes->{{3.5850007433228407`*^9, 3.5850007928129096`*^9}, {
   3.585001127784379*^9, 3.5850011920144687`*^9}, {3.585002133975787*^9, 
   3.5850021776058483`*^9}, 3.585002251255952*^9, 3.5850024949382925`*^9, {
   3.5850025782784095`*^9, 3.585002579348411*^9}, 3.5850026358284903`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cal", "=", 
  RowBox[{"findCalibrationCompiled", "[", 
   RowBox[{"formatedCalData3", ",", "0.015"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5850045865032215`*^9, 3.5850046181832657`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.01314816`", ",", "4.06`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.02777184`", ",", "4.06`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.5850045896432257`*^9, 3.585004618573266*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "dir", "=", 
   "\"\<C:\\\\Users\\\\Jason\\\\Desktop\\\\mathematicaToC\\\\\>\""}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.580507394392742*^9, 3.580507400782751*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"dir", "<>", "\"\<testPeakFun.c\>\""}], ",", 
   "findCarrierAndSidebandsCompiled"}], "]"}]], "Input",
 CellChangeTimes->{{3.5806465801162777`*^9, 3.580646584476527*^9}, {
   3.5850012804845924`*^9, 3.5850013077346306`*^9}, 3.5850017396752353`*^9, 
   3.585001949565529*^9, 3.5850025138683195`*^9, 3.585004569883198*^9}],

Cell[BoxData["\<\"C:\\\\Users\\\\Jason\\\\Desktop\\\\mathematicaToC\\\\\
testPeakFun.c\"\>"], "Output",
 CellChangeTimes->{3.585001311384636*^9, 3.5850017404652367`*^9, 
  3.58500195041553*^9, 3.5850025175783243`*^9, 3.5850025747484045`*^9, 
  3.585004570433199*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"peaks", "=", 
  RowBox[{"findCarrierAndSidebandsCompiled", "[", 
   RowBox[{"formatedSidebandData3", ",", "cal", ",", "0.0066"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.585004565693192*^9, 3.585004565733192*^9}, 
   3.5850046136732593`*^9, {3.5850046917733684`*^9, 3.58500469324337*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.013177920000000001`", ",", "1.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.01966752`", ",", "2.52666667`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.021338879999999998`", ",", "2.48`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.585004620053268*^9, 3.585004694153372*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"getFeedbackSignalsCompiled", "@", "peaks"}]], "Input",
 CellChangeTimes->{{3.585004696663375*^9, 3.585004696973376*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.018641812237921572`", ",", "1.4725490205882352`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5850046972733765`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Convert to C; added carrier offset", "Section",
 CellChangeTimes->{{3.584994586416748*^9, 3.5849945924567566`*^9}, {
  3.599592191808035*^9, 3.5995921942951775`*^9}}],

Cell[CellGroupData[{

Cell["Compiled Functions", "Subsection",
 CellChangeTimes->{{3.5849746921741543`*^9, 3.5849746975241623`*^9}, {
   3.584994707466918*^9, 3.58499470875692*^9}, 3.585000698801778*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"commonest", "[", "data_List", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Last", "[", 
     RowBox[{"Sort", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], ",", 
          RowBox[{
          "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
         "}"}], "&"}], "/@", 
       RowBox[{"Gather", "[", "data", "]"}]}], "]"}], "]"}], 
    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.5850014171147833`*^9, 3.5850014852448792`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"commonestCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"data", ",", "_Real", ",", "1"}], "}"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Last", "[", 
        RowBox[{"Sort", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Length", "[", 
              RowBox[{"Position", "[", 
               RowBox[{"data", ",", "#"}], "]"}], "]"}], ",", "#"}], "}"}], 
           "&"}], "/@", 
          RowBox[{"Union", "[", "data", "]"}]}], "]"}], "]"}], 
       "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "}"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5850015042349052`*^9, 3.5850015335249467`*^9}, {
   3.585001570224998*^9, 3.58500159291503*^9}, {3.5850016698451376`*^9, 
   3.585001726015216*^9}, {3.5850018118353367`*^9, 3.585001925915496*^9}, {
   3.5850025623383875`*^9, 3.585002563898389*^9}, 3.585002595918434*^9, {
   3.5850208802109475`*^9, 3.5850208807009487`*^9}, {3.5850215326684303`*^9, 
   3.585021532918431*^9}, {3.585021600968526*^9, 3.585021625798561*^9}, {
   3.585070870509097*^9, 3.5850708712690983`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getPeakInfoInSectionCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"data", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"peakLoc", ",", "sectionRange"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"peakLoc", "=", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"#", ",", 
              RowBox[{"Max", "[", 
               RowBox[{"#", "\[LeftDoubleBracket]", 
                RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]}],
              "]"}], "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "&"}], "@", 
          "data"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"sectionRange", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Min", "[", "#", "]"}], ",", 
             RowBox[{"Max", "[", "#", "]"}]}], "}"}], "&"}], "@", 
          RowBox[{"data", "\[LeftDoubleBracket]", 
           RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "data", "\[LeftDoubleBracket]", "peakLoc", 
           "\[RightDoubleBracket]"}], ",", "sectionRange"}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5849742848535843`*^9, 3.5849743973337417`*^9}, {
   3.5849744574438257`*^9, 3.584974457833826*^9}, {3.5850022977770166`*^9, 
   3.5850023233370523`*^9}, 3.585002356737099*^9, 3.6018489968262033`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gatherByThresholdAndGetPeakInfoInSectionCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"formatedData", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Combining", " ", "two", " ", "functions", " ", "here"}], ",", 
       " ", 
       RowBox[{
       "to", " ", "avoid", " ", "generating", " ", "an", " ", "illegal", " ", 
        "nontensor", " ", 
        RowBox[{"object", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"deltaXs", ",", "dx", ",", "breaks"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"deltaXs", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "-", 
              RowBox[{"RotateLeft", "[", 
               RowBox[{"#", ",", "1"}], "]"}]}], ")"}], "&"}], "@", 
           RowBox[{"formatedData", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"deltaXs", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"formatedData", "\[LeftDoubleBracket]", 
              RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
             RowBox[{"formatedData", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", 
                  RowBox[{"Length", "[", "formatedData", "]"}]}], "]"}], "+", 
                "1"}], ",", "1"}], "\[RightDoubleBracket]"}]}], ")"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", 
             RowBox[{"Length", "[", "formatedData", "]"}]}], "}"}]}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"dx", "=", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"commonestCompiled", "[", "deltaXs", "]"}], 
           "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"breaks", "=", 
         RowBox[{
          RowBox[{
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "&"}],
           "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", "0", "}"}], "}"}], "~", "Join", "~", 
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Abs", "[", "#", "]"}], ">", 
                    RowBox[{"2", "*", "dx"}]}], ",", "1", ",", "0"}], "]"}], 
                 "&"}], ")"}], "/@", "deltaXs"}], ",", "1"}], "]"}]}], 
           ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"getPeakInfoInSectionCompiled", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"formatedData", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"1", "+", 
                RowBox[{
                "breaks", "\[LeftDoubleBracket]", "i", 
                 "\[RightDoubleBracket]"}]}], ",", 
               RowBox[{"breaks", "\[LeftDoubleBracket]", 
                RowBox[{"i", "+", "1"}], "\[RightDoubleBracket]"}]}], "}"}]}],
             "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{
             RowBox[{"Length", "[", "breaks", "]"}], "-", "1"}]}], "}"}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"getPeakInfoInSectionCompiled", "[", "_", "]"}], ",", 
         "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"commonestCompiled", "[", "_", "]"}], ",", "_Real", ",", 
         "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5849742848535843`*^9, 3.5849743973337417`*^9}, {
   3.5849744574438257`*^9, 3.584974457833826*^9}, {3.584999863580609*^9, 
   3.584999943880721*^9}, {3.584999988040783*^9, 3.5849999967507954`*^9}, {
   3.585000049180868*^9, 3.585000109420953*^9}, {3.5850001807010527`*^9, 
   3.585000195451073*^9}, {3.5850002335111265`*^9, 3.585000259361163*^9}, {
   3.5850003677313147`*^9, 3.5850004175013843`*^9}, 3.5850006992417784`*^9, {
   3.5850007341228275`*^9, 3.5850008083529315`*^9}, {3.5850008404139767`*^9, 
   3.5850008724940214`*^9}, 3.5850009548441367`*^9, {3.5850009876341825`*^9, 
   3.585001024914235*^9}, {3.5850010931643305`*^9, 3.585001124424374*^9}, {
   3.5850021441458015`*^9, 3.585002176425847*^9}, {3.5850022211559095`*^9, 
   3.585002272525981*^9}, {3.585002406748169*^9, 3.5850024882182837`*^9}, {
   3.585002542338359*^9, 3.5850025524683733`*^9}, {3.5850190374143667`*^9, 
   3.5850190384043674`*^9}, {3.585019293026726*^9, 3.5850193123967524`*^9}, {
   3.585352193222913*^9, 3.5853522516729946`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"gatherByThresholdAndGetPeakInfoInSectionWithLimitsCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"formatedData", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Combining", " ", "two", " ", "functions", " ", "here"}], ",", 
       " ", 
       RowBox[{
       "to", " ", "avoid", " ", "generating", " ", "an", " ", "illegal", " ", 
        "nontensor", " ", 
        RowBox[{"object", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"deltaXs", ",", "dx", ",", "breaks", ",", "max", ",", "min"}],
         "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"deltaXs", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "-", 
              RowBox[{"RotateLeft", "[", 
               RowBox[{"#", ",", "1"}], "]"}]}], ")"}], "&"}], "@", 
           RowBox[{"formatedData", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}]}], ";"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"deltaXs", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"formatedData", "\[LeftDoubleBracket]", 
              RowBox[{"i", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
             RowBox[{"formatedData", "\[LeftDoubleBracket]", 
              RowBox[{
               RowBox[{
                RowBox[{"Mod", "[", 
                 RowBox[{"i", ",", 
                  RowBox[{"Length", "[", "formatedData", "]"}]}], "]"}], "+", 
                "1"}], ",", "1"}], "\[RightDoubleBracket]"}]}], ")"}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", 
             RowBox[{"Length", "[", "formatedData", "]"}]}], "}"}]}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"dx", "=", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"commonestCompiled", "[", "deltaXs", "]"}], 
           "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"breaks", "=", 
         RowBox[{
          RowBox[{
           RowBox[{
           "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "&"}],
           "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"{", "0", "}"}], "}"}], "~", "Join", "~", 
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Abs", "[", "#", "]"}], ">", 
                    RowBox[{"2", "*", "dx"}]}], ",", "1", ",", "0"}], "]"}], 
                 "&"}], ")"}], "/@", "deltaXs"}], ",", "1"}], "]"}]}], 
           ")"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"max", "=", 
         RowBox[{"Max", "[", 
          RowBox[{"formatedData", "\[LeftDoubleBracket]", 
           RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{"min", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"formatedData", "\[LeftDoubleBracket]", 
           RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]}], ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"getPeakInfoInSectionCompiled", "[", 
             RowBox[{"Take", "[", 
              RowBox[{"formatedData", ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"1", "+", 
                  RowBox[{
                  "breaks", "\[LeftDoubleBracket]", "i", 
                   "\[RightDoubleBracket]"}]}], ",", 
                 RowBox[{"breaks", "\[LeftDoubleBracket]", 
                  RowBox[{"i", "+", "1"}], "\[RightDoubleBracket]"}]}], 
                "}"}]}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{
               RowBox[{"Length", "[", "breaks", "]"}], "-", "1"}]}], "}"}]}], 
           "]"}], ",", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"#", "\[LeftDoubleBracket]", 
               RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], ">", 
              "min"}], "&&", 
             RowBox[{
              RowBox[{"#", "\[LeftDoubleBracket]", 
               RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "<", 
              "max"}]}], ")"}], "&"}]}], "]"}]}]}], "\[IndentingNewLine]", 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"getPeakInfoInSectionCompiled", "[", "_", "]"}], ",", 
         "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"commonestCompiled", "[", "_", "]"}], ",", "_Real", ",", 
         "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6018446159580264`*^9, 3.60184461855803*^9}, {
  3.601844743708205*^9, 3.6018447788882546`*^9}, {3.60184483270833*^9, 
  3.601844907898435*^9}}],

Cell[BoxData[
 RowBox[{"findPeakWithBiggestValueCompiled", "//", "Clear"}]], "Input",
 CellChangeTimes->{{3.585606693668194*^9, 3.585606694490241*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findPeakWithBiggestValueCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", "biggestPos"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Pick", " ", "the", " ", "starting", " ", "peak", " ", "for", " ", 
          "the", " ", 
          RowBox[{"search", ".", " ", "Make"}], " ", "sure", " ", "it", " ", 
          "has", " ", "at", " ", "least", " ", "the", " ", "minimum", " ", 
          "x", " ", 
          RowBox[{"value", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "1", ",", "1"}], "\[RightDoubleBracket]"}], 
            "<", "minimumX"}], "&&", 
           RowBox[{"i", "<", 
            RowBox[{"Length", "[", "allPeaks", "]"}]}]}], ",", 
          RowBox[{
           RowBox[{"i", "++"}], ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"biggestPos", "=", "i"}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "1"}], ",", 
          RowBox[{"i", "\[LessEqual]", 
           RowBox[{"Length", "[", "allPeaks", "]"}]}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Find", " ", "the", " ", "biggest", " ", "peak"}], ",", 
            " ", 
            RowBox[{
            "making", " ", "sure", " ", "the", " ", "x", " ", "value", " ", 
             "is", " ", "larger", " ", "than", " ", 
             RowBox[{"minimumX", "."}]}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
                RowBox[{"i", ",", "1", ",", "2"}], "\[RightDoubleBracket]"}], 
               ">", 
               RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
                RowBox[{"biggestPos", ",", "1", ",", "2"}], 
                "\[RightDoubleBracket]"}]}], "&&", 
              RowBox[{
               RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
                RowBox[{"i", ",", "1", ",", "1"}], "\[RightDoubleBracket]"}], 
               ">", "minimumX"}]}], ",", 
             RowBox[{
              RowBox[{"biggestPos", "=", "i"}], ";"}]}], "]"}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
        "allPeaks", "\[LeftDoubleBracket]", "biggestPos", 
         "\[RightDoubleBracket]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.585064770881014*^9, 3.585064863841144*^9}, {
   3.5850649034611993`*^9, 3.58506495394127*^9}, {3.585065001681337*^9, 
   3.58506500383134*^9}, 3.585070941379196*^9, {3.585606389897819*^9, 
   3.5856064014714813`*^9}, {3.585606436441481*^9, 3.5856064834581704`*^9}, {
   3.585606518662184*^9, 3.5856066218970885`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getBiggestPeakFromPeakInfoCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"findPeakWithBiggestValueCompiled", "[", 
       RowBox[{"allPeaks", ",", "minimumX"}], "]"}], "\[LeftDoubleBracket]", 
      "1", "\[RightDoubleBracket]"}], "\[IndentingNewLine]", ",", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.585065135291524*^9, 3.5850651368715262`*^9}, {
  3.585606735947612*^9, 3.585606739531817*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findItemWithBiggestValueAtSubindex", "[", 
   RowBox[{"data_List", ",", "subindices_List"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "biggest"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "data", "]"}], ">", "0"}], ",", 
       RowBox[{
        RowBox[{"biggest", "=", 
         RowBox[{
         "data", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
        ";"}], ",", 
       RowBox[{
        RowBox[{"biggest", "=", "0"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"i", "=", "1"}], ",", 
       RowBox[{"i", "\[LessEqual]", 
        RowBox[{"Length", "[", "data", "]"}]}], ",", 
       RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Extract", "[", 
            RowBox[{
             RowBox[{
             "data", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}], 
             ",", "subindices"}], "]"}], ">", 
           RowBox[{"Extract", "[", 
            RowBox[{"biggest", ",", "subindices"}], "]"}]}], ",", 
          RowBox[{
           RowBox[{"biggest", "=", 
            RowBox[{
            "data", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
           ";"}]}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", "biggest"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.585063815125614*^9, 3.585063953094517*^9}, {
  3.5850639850399137`*^9, 3.5850640441099963`*^9}, {3.5850641992002134`*^9, 
  3.585064320550383*^9}}],

Cell[BoxData[
 RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "//", 
  "Clear"}]], "Input",
 CellChangeTimes->{{3.585430334245837*^9, 3.585430335505839*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetXLocation", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetRange", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "i", ",", "smallestLoc", ",", "bestPeakHeight", ",", "searchRange"}], 
        "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"smallestLoc", "=", 
         RowBox[{"-", "1"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bestPeakHeight", "=", "0.0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Min", "[", 
          RowBox[{"Abs", "[", 
           RowBox[{
            RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
             RowBox[{"i", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            "targetXLocation"}], "]"}], "]"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"searchRange", "=", 
         RowBox[{"0.5", "*", "targetRange"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"smallestLoc", " ", "<", "0"}], ")"}], "&&", 
           RowBox[{"(", 
            RowBox[{"searchRange", "<", 
             RowBox[{"100", "*", "targetRange"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"For", "[", 
            RowBox[{
             RowBox[{"i", "=", "1"}], ",", 
             RowBox[{"i", "\[LessEqual]", 
              RowBox[{"Length", "[", "allPeaks", "]"}]}], ",", 
             RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Abs", "[", 
                  RowBox[{
                   RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], "-", "targetXLocation"}], 
                  "]"}], "<", "searchRange"}], ",", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{
                  "Find", " ", "the", " ", "biggest", " ", "peak", " ", 
                   "within", " ", "the", " ", "target", " ", "range"}], ",", 
                  " ", 
                  RowBox[{
                  "making", " ", "sure", " ", "the", " ", "peak", " ", "x", 
                   " ", "value", " ", "is", " ", "larger", " ", "than", " ", 
                   RowBox[{"minimumX", "."}]}]}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], ">", "bestPeakHeight"}], "&&", 
                    RowBox[{
                    RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], ">", "minimumX"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"smallestLoc", "=", "i"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bestPeakHeight", "=", 
                    RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
                    RowBox[{"i", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}]}], ";"}]}], 
                  "\[IndentingNewLine]", "]"}], ";"}]}], 
               "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"searchRange", "+=", 
            RowBox[{"0.5", "*", "targetRange"}]}], ";"}]}], 
         "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"allPeaks", "\[LeftDoubleBracket]", 
         RowBox[{"smallestLoc", ",", "1"}], "\[RightDoubleBracket]"}]}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}], " ", "is", " ", "a", " ", "hack", 
        " ", "to", " ", "make", " ", "the", " ", "intermediate", " ", 
        "tensor", " ", "rectangular"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"Sort", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}], "*", 
                RowBox[{"Min", "[", 
                 RowBox[{"Abs", "[", 
                  RowBox[{
                   RowBox[{
                   "#", "\[LeftDoubleBracket]", "2", 
                    "\[RightDoubleBracket]"}], "-", "targetXLocation"}], 
                  "]"}], "]"}]}]}], "}"}], "&"}], "/@", "allPeaks"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#1", "\[LeftDoubleBracket]", 
              RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "<", 
             RowBox[{"#2", "\[LeftDoubleBracket]", 
              RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], "&"}]}], 
          "]"}], "]"}], "\[LeftDoubleBracket]", "1", 
        "\[RightDoubleBracket]"}], "*)"}], "\[IndentingNewLine]", "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5849753444950676`*^9, 3.5849754015251474`*^9}, {
   3.58497554286237*^9, 3.584975659252533*^9}, {3.584975705692598*^9, 
   3.584975742112649*^9}, 3.585000699261779*^9, {3.585002776808687*^9, 
   3.5850028441287813`*^9}, 3.585002920588889*^9, 3.585002951548932*^9, {
   3.585003181229254*^9, 3.585003196989276*^9}, {3.5850035719998007`*^9, 
   3.585003577069808*^9}, {3.5850680210969286`*^9, 3.585068048066967*^9}, {
   3.58506853243773*^9, 3.585068690038951*^9}, {3.5854230101465826`*^9, 
   3.5854230327466145`*^9}, {3.585423063856658*^9, 3.585423107396719*^9}, {
   3.5854232030968533`*^9, 3.5854232713669486`*^9}, {3.5854267075657597`*^9, 
   3.585426714015768*^9}, {3.5854267768458567`*^9, 3.585426902946033*^9}, {
   3.5854271604973936`*^9, 3.585427163437398*^9}, {3.585427203077453*^9, 
   3.5854272033574533`*^9}, {3.5854303032457933`*^9, 
   3.5854303322058344`*^9}, {3.5854303656058807`*^9, 
   3.5854303859859095`*^9}, {3.585430502657073*^9, 3.5854305151670904`*^9}, {
   3.5854305938472004`*^9, 3.5854305944472017`*^9}, {3.5855126974507813`*^9, 
   3.5855127202320843`*^9}, {3.585514050351163*^9, 3.5855141091925287`*^9}, {
   3.5855141944294033`*^9, 3.585514198178618*^9}, {3.585514344519988*^9, 
   3.585514354467557*^9}, 3.585514410042736*^9, {3.5855144568344126`*^9, 
   3.58551445784947*^9}, {3.5855144925704565`*^9, 3.5855145078383293`*^9}, {
   3.585514554242984*^9, 3.5855145606983533`*^9}, {3.585606759615966*^9, 
   3.585606765760317*^9}, {3.585606832957161*^9, 3.585606838282465*^9}, {
   3.5856069901061487`*^9, 3.585607067590581*^9}}],

Cell[BoxData[
 RowBox[{"findCalibrationUsingAllPeaksCompiled", "//", "Clear"}]], "Input",
 CellChangeTimes->{{3.58560688399008*^9, 3.5856068853261557`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCalibrationUsingAllPeaksCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"fsrXdistance", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "biggestPeak", ",", "bigPeakXVal", ",", "candidatePeaks", ",", "d12", 
         ",", "d32", ",", "d13", ",", "bestPeaks", ",", "skippedPeak"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"biggestPeak", "=", 
         RowBox[{"getBiggestPeakFromPeakInfoCompiled", "[", 
          RowBox[{"allPeaks", ",", "minimumX"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"bigPeakXVal", "=", 
         RowBox[{
         "biggestPeak", "\[LeftDoubleBracket]", "1", 
          "\[RightDoubleBracket]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"candidatePeaks", "=", 
         RowBox[{"{", "biggestPeak", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"(", 
          RowBox[{"Drop", "[", 
           RowBox[{"allPeaks", ",", 
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"allPeaks", ",", 
               RowBox[{"{", 
                RowBox[{"biggestPeak", ",", "_"}], "}"}]}], "]"}], 
             "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "]"}], 
          ")"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"candidatePeaks", ",", "\[IndentingNewLine]", 
          RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
           RowBox[{"allPeaks", ",", 
            RowBox[{"bigPeakXVal", "-", "fsrXdistance"}], ",", 
            RowBox[{"0.1", "*", "fsrXdistance"}], ",", "minimumX"}], "]"}]}], 
         "]"}], ";", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"candidatePeaks", ",", "\[IndentingNewLine]", 
          RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
           RowBox[{"allPeaks", ",", 
            RowBox[{"bigPeakXVal", "+", "fsrXdistance"}], ",", 
            RowBox[{"0.1", "*", "fsrXdistance"}], ",", "minimumX"}], "]"}]}], 
         "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"allPairs", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"#1", ",", "#2"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"#3", ",", "#2"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"#1", ",", "#3"}], "}"}]}], "}"}], "&"}], "@@", 
            RowBox[{"Sort", "[", 
             RowBox[{"candidatePeaks", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                "<", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], "&"}]}], "]"}]}]}], ";"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"allPairs", "=", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
                 ",", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 ",", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "3", 
                  "\[RightDoubleBracket]"}]}], "}"}]}], "}"}], "&"}], "@", 
            RowBox[{"Sort", "[", 
             RowBox[{"candidatePeaks", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#1", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                "<", 
                RowBox[{
                "#2", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], "&"}]}], "]"}]}]}], ";"}], 
         "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Pick", " ", "the", " ", "pair", " ", "that", " ", "has", " ", "the",
           " ", "separation", " ", "most", " ", "similar", " ", "to", " ", 
          RowBox[{"fsrXdistance", "."}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"d12", "=", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
              "candidatePeaks", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}], "-", 
             RowBox[{
              RowBox[{
              "candidatePeaks", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}]}], "]"}], "-", "fsrXdistance"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"d32", "=", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
              "candidatePeaks", "\[LeftDoubleBracket]", "3", 
               "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}], "-", 
             RowBox[{
              RowBox[{
              "candidatePeaks", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}]}], "]"}], "-", "fsrXdistance"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"d13", "=", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"Abs", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
              "candidatePeaks", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}], "-", 
             RowBox[{
              RowBox[{
              "candidatePeaks", "\[LeftDoubleBracket]", "3", 
               "\[RightDoubleBracket]"}], "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}]}], "]"}], "-", "fsrXdistance"}], 
          "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "}"}], " ", "is", " ", "a", 
          " ", "hack", " ", "to", " ", "make", " ", "the", " ", 
          "intermediate", " ", "tensor", " ", "rectangular"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"First", "[", 
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Abs", "[", 
                   RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
                    RowBox[{"#", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    "]"}], "-", "fsrXdistance"}], "]"}], "*", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], ",", "#"}], 
                "}"}], "&"}], "/@", "allPairs"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "1", ",", "1"}], "\[RightDoubleBracket]"}], 
               "<", 
               RowBox[{"#2", "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "1", ",", "1"}], 
                "\[RightDoubleBracket]"}]}], "&"}]}], "]"}], "]"}], 
          "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"bestPeaks", "=", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"d12", "<", "d32"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"d12", "<", "d13"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"d13", "<", "d32"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "3"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"d32", "<", "d13"}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "2"}], "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"d13", "<", "d12"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "3"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"skippedPeak", "=", 
         RowBox[{
          RowBox[{"Complement", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", "bestPeaks"}], 
           "]"}], "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"Abs", "[", 
              RowBox[{
               RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "bestPeaks", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}], ",", "1"}], 
                "\[RightDoubleBracket]"}], "-", 
               RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
                RowBox[{"skippedPeak", ",", "1"}], 
                "\[RightDoubleBracket]"}]}], "]"}], "fsrXdistance"], "<", 
            "0.1"}], "&&", 
           RowBox[{
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "bestPeaks", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], ",", "2"}], 
             "\[RightDoubleBracket]"}], "<", 
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{"skippedPeak", ",", "2"}], "\[RightDoubleBracket]"}]}]}],
           ",", 
          RowBox[{
           RowBox[{"bestPeaks", "=", 
            RowBox[{"{", 
             RowBox[{"skippedPeak", ",", 
              RowBox[{
              "bestPeaks", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}]}], "}"}]}], ";"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            FractionBox[
             RowBox[{"Abs", "[", 
              RowBox[{
               RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
                RowBox[{
                 RowBox[{
                 "bestPeaks", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}], ",", "1"}], 
                "\[RightDoubleBracket]"}], "-", 
               RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
                RowBox[{"skippedPeak", ",", "1"}], 
                "\[RightDoubleBracket]"}]}], "]"}], "fsrXdistance"], "<", 
            "0.1"}], "&&", 
           RowBox[{
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{
              RowBox[{
              "bestPeaks", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], ",", "2"}], 
             "\[RightDoubleBracket]"}], "<", 
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{"skippedPeak", ",", "2"}], "\[RightDoubleBracket]"}]}]}],
           ",", 
          RowBox[{
           RowBox[{"bestPeaks", "=", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
              "bestPeaks", "\[LeftDoubleBracket]", "1", 
               "\[RightDoubleBracket]"}], ",", "skippedPeak"}], "}"}]}], 
           ";"}]}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Arrange", " ", "in", " ", "accending", " ", "X", " ", "order"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "bestPeaks", "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}], ",", "1"}], 
            "\[RightDoubleBracket]"}], "<", 
           RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "bestPeaks", "\[LeftDoubleBracket]", "2", 
              "\[RightDoubleBracket]"}], ",", "1"}], 
            "\[RightDoubleBracket]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{
             "bestPeaks", "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{
             "bestPeaks", "\[LeftDoubleBracket]", "2", 
              "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}]}], "}"}], 
          ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{
             "bestPeaks", "\[LeftDoubleBracket]", "2", 
              "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
            RowBox[{"candidatePeaks", "\[LeftDoubleBracket]", 
             RowBox[{
             "bestPeaks", "\[LeftDoubleBracket]", "1", 
              "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}]}], "}"}]}],
          "]"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"getBiggestPeakFromPeakInfoCompiled", "[", 
          RowBox[{"_", ",", "_"}], "]"}], ",", "_Real", ",", "1"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
          RowBox[{"_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", "_Real", 
         ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.584974802524309*^9, 3.5849748199543333`*^9}, {
   3.58497486026439*^9, 3.584974892304435*^9}, {3.584974929884487*^9, 
   3.5849749583145275`*^9}, {3.584974998814584*^9, 3.5849750287446256`*^9}, {
   3.5849750854347053`*^9, 3.5849751957248597`*^9}, {3.5849752786349754`*^9, 
   3.584975323155038*^9}, {3.584975836252781*^9, 3.5849759050428767`*^9}, {
   3.5849761182331753`*^9, 3.584976260083374*^9}, {3.5849929016723895`*^9, 
   3.584992906072396*^9}, 3.584993045302591*^9, {3.584993739823563*^9, 
   3.5849937451435704`*^9}, {3.584993862903735*^9, 3.5849939908439145`*^9}, {
   3.584994035473977*^9, 3.5849940746940317`*^9}, 3.5850006992717786`*^9, {
   3.585003225829316*^9, 3.5850033223394513`*^9}, {3.585003353839495*^9, 
   3.5850033847495384`*^9}, {3.5850034182195854`*^9, 3.585003472979662*^9}, {
   3.5850035192997265`*^9, 3.585003562199787*^9}, {3.58500420709269*^9, 
   3.5850042328827257`*^9}, {3.585019333526782*^9, 3.5850193340467825`*^9}, {
   3.585069619299333*^9, 3.585069691219434*^9}, {3.585069734069494*^9, 
   3.5850700329899125`*^9}, {3.5850700742899704`*^9, 
   3.5850700751899714`*^9}, {3.585070140641063*^9, 3.585070155522084*^9}, {
   3.58507022424218*^9, 3.5850702383122*^9}, {3.585070269042243*^9, 
   3.5850703057222943`*^9}, {3.5853434869847174`*^9, 3.585343493244726*^9}, {
   3.585343671244975*^9, 3.5853436714749756`*^9}, {3.5853533244864964`*^9, 
   3.585353420766631*^9}, {3.585354272158823*^9, 3.5853543829989786`*^9}, {
   3.5853544254790382`*^9, 3.5853545356101923`*^9}, {3.5853545680402374`*^9, 
   3.5853545715702424`*^9}, {3.5854269128360467`*^9, 3.585426930796072*^9}, {
   3.5854272207374783`*^9, 3.5854272812385626`*^9}, {3.5854297159439716`*^9, 
   3.5854297596740327`*^9}, {3.5856045717838287`*^9, 3.58560457529103*^9}, {
   3.5856068633568993`*^9, 3.58560691476184*^9}, {3.585607085989633*^9, 
   3.585607086406657*^9}, 3.585607267430011*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCalibrationCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"formatedCalibrationData", ",", "_Real", ",", "2"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"fsrXdistance", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "allPeaks", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"allPeaks", "=", 
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
          "formatedCalibrationData", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"findCalibrationUsingAllPeaksCompiled", "[", 
         RowBox[{"allPeaks", ",", "fsrXdistance", ",", "minimumX"}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", "_", "]"}], 
         ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findCalibrationUsingAllPeaksCompiled", "[", 
          RowBox[{"_", ",", "_"}], "]"}], ",", "_Real", ",", "2"}], "}"}]}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.584977438557024*^9, 3.5849774925270996`*^9}, 
   3.5849869725791144`*^9, 3.5850006992717786`*^9, {3.585003680909953*^9, 
   3.585003682159955*^9}, {3.5850037347100286`*^9, 3.585003780230092*^9}, {
   3.5850038170101433`*^9, 3.5850038604712048`*^9}, {3.5850040074224105`*^9, 
   3.585004097472536*^9}, {3.5850050068138094`*^9, 3.5850050199038277`*^9}, {
   3.585019338166789*^9, 3.5850193388367896`*^9}, {3.585019530477058*^9, 
   3.5850195414670734`*^9}, {3.585607115724334*^9, 3.5856071231047564`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "findCarrierPeakUsingAllPeaksCompiled", "]"}]], "Input",
 CellChangeTimes->{{3.6017415220617332`*^9, 3.601741525103739*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCarrierPeakUsingAllPeaksCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"calibrationPeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetRange", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"carrierOffset", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"carrierL", ",", "carrierR"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"carrierL", "=", 
         RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
          RowBox[{"allPeaks", ",", 
           RowBox[{
            RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
            "carrierOffset"}], ",", "targetRange", ",", "minimumX"}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"carrierR", "=", 
         RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
          RowBox[{"allPeaks", ",", 
           RowBox[{
            RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
            "carrierOffset"}], ",", "targetRange", ",", "minimumX"}], "]"}]}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"carrierL", ",", "carrierR"}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
         RowBox[{"_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", "_Real", 
        ",", "1"}], "}"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5849763169234533`*^9, 3.584976322213461*^9}, {
   3.584976368643526*^9, 3.5849764246536045`*^9}, {3.584986728988182*^9, 
   3.5849867369186354`*^9}, {3.5849870172346687`*^9, 3.5849870178777056`*^9}, 
   3.5850006992717786`*^9, {3.5850041189425664`*^9, 3.5850041713126397`*^9}, {
   3.5850042496327496`*^9, 3.5850042703227787`*^9}, {3.585019342466795*^9, 
   3.585019343046796*^9}, {3.585427330708632*^9, 3.5854273549086657`*^9}, {
   3.5854273940087204`*^9, 3.585427405488737*^9}, {3.585512352088028*^9, 
   3.585512404171007*^9}, {3.5856071414338045`*^9, 3.585607152733451*^9}, {
   3.6017415322953515`*^9, 3.601741542294969*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCarriersCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"formatedSidebandData", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"calibrationPeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetRange", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"carrierOffset", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "bothCarriers"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"allPeaks", "=", 
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionWithLimitsCompiled", "[", 
          "formatedSidebandData", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bothCarriers", "=", 
         RowBox[{"findCarrierPeakUsingAllPeaksCompiled", "[", 
          RowBox[{
          "allPeaks", ",", "calibrationPeaks", ",", "targetRange", ",", 
           "minimumX", ",", "carrierOffset"}], "]"}]}], ";", 
        "\[IndentingNewLine]", "bothCarriers"}]}], "\[IndentingNewLine]", 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionWithLimitsCompiled", "[", 
          "_", "]"}], ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findCarrierPeakUsingAllPeaksCompiled", "[", 
          RowBox[{"_", ",", "_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", 
         "_Real", ",", "2"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6017416450835495`*^9, 3.6017417603989525`*^9}, {
  3.6017424547103715`*^9, 3.6017424552563725`*^9}, {3.601845065398656*^9, 
  3.6018450839186816`*^9}}],

Cell[BoxData[
 RowBox[{"Clear", "[", "findSidebandPeaksUsingAllPeaksCompiled", 
  "]"}]], "Input",
 CellChangeTimes->{{3.601741374875475*^9, 3.6017413762170773`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"referencePeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"sidebandSpacing", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetRange", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"carrierOffset", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"sideband1", ",", "sideband2"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"sideband1", "=", 
         RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
          RowBox[{"allPeaks", ",", 
           RowBox[{
            RowBox[{"referencePeaks", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
            "sidebandSpacing", "+", "carrierOffset"}], ",", "targetRange", 
           ",", "minimumX"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"sideband2", "=", 
         RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
          RowBox[{"allPeaks", ",", 
           RowBox[{
            RowBox[{"referencePeaks", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
            "sidebandSpacing", "+", "carrierOffset"}], ",", "targetRange", 
           ",", "minimumX"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
           "sideband1", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}], "<", 
           RowBox[{
           "sideband2", "\[LeftDoubleBracket]", "1", 
            "\[RightDoubleBracket]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"sideband1", ",", "sideband2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"sideband2", ",", "sideband1"}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"findClosestPeakToTargetFromPeakInfoCompiled", "[", 
         RowBox[{"_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", "_Real", 
        ",", "1"}], "}"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5849765625337973`*^9, 3.58497675001406*^9}, {
   3.584977337936883*^9, 3.5849774056069775`*^9}, 3.5850006992717786`*^9, {
   3.58500427873279*^9, 3.5850043408028774`*^9}, {3.5850193465968003`*^9, 
   3.585019347196801*^9}, {3.5854274108487444`*^9, 3.5854274252787647`*^9}, {
   3.585428415800151*^9, 3.5854284431201897`*^9}, {3.5854293275534277`*^9, 
   3.5854293374934416`*^9}, {3.5854296527138824`*^9, 
   3.5854296528838835`*^9}, {3.5854297776540575`*^9, 
   3.5854297780240583`*^9}, {3.58551250283165*^9, 3.5855125079519424`*^9}, {
   3.585514657000861*^9, 3.585514658068922*^9}, {3.585607174894718*^9, 
   3.5856071904126062`*^9}, {3.601741369789866*^9, 3.6017413989931173`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findFirstSidebandsCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"formatedSidebandData", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"calibrationPeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"sidebandSpacing", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetRange", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"carrierOffset", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"allPeaks", ",", "sidebands"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"allPeaks", "=", 
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
          "formatedSidebandData", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"sidebands", "=", 
         RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
          RowBox[{
          "allPeaks", ",", "calibrationPeaks", ",", "sidebandSpacing", ",", 
           "targetRange", ",", "minimumX", ",", "carrierOffset"}], "]"}]}], 
        ";", "\[IndentingNewLine]", "sidebands"}]}], "\[IndentingNewLine]", 
      "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", "_", "]"}], 
         ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
          RowBox[{"_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_"}], 
          "]"}], ",", "_Real", ",", "2"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.601741136303256*^9, 3.6017411462404737`*^9}, {
  3.6017411804201336`*^9, 3.601741204974577*^9}, {3.601741304878152*^9, 
  3.6017413211021805`*^9}, {3.6017413523802357`*^9, 3.6017413562022424`*^9}, {
  3.60174141765075*^9, 3.601741424436762*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findCarrierAndSidebandsCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"formatedSidebandData", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"calibrationPeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"sidebandSpacing", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetRange", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "allPeaks", ",", "bothCarriers", ",", "sidebands", ",", "fsr"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"fsr", "=", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
           RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
            RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"allPeaks", "=", 
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
          "formatedSidebandData", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"bothCarriers", "=", 
         RowBox[{"findCarrierPeakUsingAllPeaksCompiled", "[", 
          RowBox[{
          "allPeaks", ",", "calibrationPeaks", ",", "targetRange", ",", 
           "minimumX", ",", "0"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "Use", " ", "the", " ", "carriers", " ", "as", " ", "reference", 
           " ", "instead", " ", "of", " ", "the", " ", "calibration"}], ",", 
          " ", 
          RowBox[{"since", " ", "things", " ", "might", " ", 
           RowBox[{"drift", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"sidebands", "=", 
         RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
          RowBox[{
          "allPeaks", ",", "bothCarriers", ",", "sidebandSpacing", ",", 
           "targetRange", ",", "minimumX", ",", "0"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "bothCarriers", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}], "}"}], "~", "Join", "~", 
         "sidebands"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", "_", "]"}], 
         ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findCarrierPeakUsingAllPeaksCompiled", "[", 
          RowBox[{"_", ",", "_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", 
         "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
          RowBox[{"_", ",", "_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", 
         "_Real", ",", "2"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.5849775501771803`*^9, 3.584977692487379*^9}, {
   3.5849940810340405`*^9, 3.584994081944042*^9}, 3.5850006992717786`*^9, {
   3.5850043473328867`*^9, 3.5850044853130794`*^9}, {3.5850045153531218`*^9, 
   3.585004545783164*^9}, {3.5850193511868067`*^9, 3.5850193517668076`*^9}, {
   3.5854274468387947`*^9, 3.5854275452689323`*^9}, {3.5855124164767103`*^9, 
   3.5855124842815886`*^9}, {3.585512517582494*^9, 3.585512519581608*^9}, {
   3.5855126184292617`*^9, 3.5855126197713385`*^9}, {3.585514647655327*^9, 
   3.5855146478403373`*^9}, {3.5856072108787766`*^9, 3.585607241689539*^9}, {
   3.590950098273246*^9, 3.590950115850251*^9}, {3.6017414504108076`*^9, 
   3.601741450660408*^9}, {3.601741560266201*^9, 3.6017415652114096`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getFeedbackSignalsCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"peaks", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "carrier", ",", "sidebands", ",", "sidebandDifference", ",", 
         "modulationDepth"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"carrier", "=", 
         RowBox[{
         "peaks", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"sidebands", "=", 
         RowBox[{"Drop", "[", 
          RowBox[{"peaks", ",", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"sidebandDifference", "=", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"sidebands", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"sidebands", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], ")"}], 
          RowBox[{"Mean", "[", 
           RowBox[{"sidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Constructing", " ", "a", " ", "quantity", " ", "that", " ", "is", 
          " ", "linear", " ", "in", " ", "\[Beta]", " ", "up", " ", "to", " ",
           "5", "th", " ", "order", " ", "corrections"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"modulationDepth", "=", 
           SqrtBox[
            FractionBox[
             RowBox[{"Mean", "[", 
              RowBox[{"sidebands", "\[LeftDoubleBracket]", 
               RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
             RowBox[{
              RowBox[{
              "carrier", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], "+", 
              RowBox[{"Mean", "[", 
               RowBox[{"sidebands", "\[LeftDoubleBracket]", 
                RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], 
               "]"}]}]]]}], ";"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"modulationDepth", "=", 
         FractionBox[
          RowBox[{"Mean", "[", 
           RowBox[{"sidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
          RowBox[{
          "carrier", "\[LeftDoubleBracket]", "2", 
           "\[RightDoubleBracket]"}]]}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"sidebandDifference", ",", "modulationDepth"}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5849963985612855`*^9, 3.58499648743141*^9}, {
   3.5849978233857527`*^9, 3.584997833005766*^9}, 3.5849978787058296`*^9, {
   3.584998047526066*^9, 3.5849981192261667`*^9}, {3.5849981543562155`*^9, 
   3.584998156116218*^9}, {3.5849984758366656`*^9, 3.58499849291669*^9}, 
   3.5850006992717786`*^9, {3.585004554263176*^9, 3.585004558743182*^9}, {
   3.5850046428533*^9, 3.585004681463354*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getFeedbackSignalsHighLowCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"sidebandPeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"carrierPeaks", ",", "_Real", ",", "2"}], "}"}]}], "}"}], ",",
      "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "sidebands", ",", "sidebandDifference", ",", "carrierFraction"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"sidebands", "=", "sidebandPeaks"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sidebandDifference", "=", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"sidebands", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"sidebands", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], ")"}], 
          RowBox[{"Mean", "[", 
           RowBox[{"sidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Constructing", " ", "a", " ", "quantity", " ", "that", " ", "is", 
          " ", "linear", " ", "in", " ", "\[Beta]", " ", "up", " ", "to", " ",
           "5", "th", " ", "order", " ", "corrections"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"modulationDepth", "=", 
           SqrtBox[
            FractionBox[
             RowBox[{"Mean", "[", 
              RowBox[{"sidebands", "\[LeftDoubleBracket]", 
               RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
             RowBox[{
              RowBox[{
              "carrier", "\[LeftDoubleBracket]", "2", 
               "\[RightDoubleBracket]"}], "+", 
              RowBox[{"Mean", "[", 
               RowBox[{"sidebands", "\[LeftDoubleBracket]", 
                RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], 
               "]"}]}]]]}], ";"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"carrierFraction", "=", 
         FractionBox[
          RowBox[{"Mean", "[", 
           RowBox[{"carrierPeaks", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
          RowBox[{"Mean", "[", 
           RowBox[{"sidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"modulationDepth", "=", 
           FractionBox[
            RowBox[{"Mean", "[", 
             RowBox[{"sidebands", "\[LeftDoubleBracket]", 
              RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
            RowBox[{
            "carrier", "\[LeftDoubleBracket]", "2", 
             "\[RightDoubleBracket]"}]]}], ";"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"sidebandDifference", ",", "carrierFraction"}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.6017686009823513`*^9, 3.6017686400136194`*^9}, {
  3.6019292706202836`*^9, 3.601929317590349*^9}, {3.601929349530394*^9, 
  3.6019293748104296`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.5909399643246174`*^9, 3.590939966572746*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"findFirstAndSecondOrderSidebandsCompiled", "=", 
    RowBox[{"Compile", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"formatedSidebandData", ",", "_Real", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"calibrationPeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"firstOrderSidebandSpacing", ",", "_Real"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"secondOrderSidebandSpacing", ",", "_Real"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"minimumX", ",", "_Real"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"targetRange", ",", "_Real"}], "}"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "allPeaks", ",", "firstOrderSidebands", ",", "secondOrderSidebands", 
          ",", "fsr"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"fsr", "=", 
          RowBox[{"Abs", "[", 
           RowBox[{
            RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"allPeaks", "=", 
          RowBox[{
          "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
           "formatedSidebandData", "]"}]}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{
           "Use", " ", "the", " ", "carriers", " ", "as", " ", "reference", 
            " ", "instead", " ", "of", " ", "the", " ", "calibration"}], ",", 
           " ", 
           RowBox[{"since", " ", "things", " ", "might", " ", 
            RowBox[{"drift", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
         RowBox[{"firstOrderSidebands", "=", 
          RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
           RowBox[{
           "allPeaks", ",", "calibrationPeaks", ",", 
            "firstOrderSidebandSpacing", ",", "targetRange", ",", 
            "minimumX"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"secondOrderSidebands", "=", 
          RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
           RowBox[{
           "allPeaks", ",", "calibrationPeaks", ",", 
            "secondOrderSidebandSpacing", ",", "targetRange", ",", 
            "minimumX"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{
         "firstOrderSidebands", "~", "Join", "~", 
          "secondOrderSidebands"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
          "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", "_", "]"}],
           ",", "_Real", ",", "3"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"findCarrierPeakUsingAllPeaksCompiled", "[", 
           RowBox[{"_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", "_Real", 
          ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
           RowBox[{"_", ",", "_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", 
          "_Real", ",", "2"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"CompilationOptions", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
         RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
         RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
        "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.590939973706154*^9, 3.590940003725871*^9}, {
  3.5909400762770205`*^9, 3.5909401824360924`*^9}, {3.590950137188472*^9, 
  3.590950146226989*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findFirstAndSecondOrderSidebandsCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"formatedSidebandData", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"calibrationPeaks", ",", "_Real", ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"firstOrderSidebandSpacing", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"secondOrderSidebandSpacing", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"minimumX", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"targetRange", ",", "_Real"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"carrierOffset", ",", "_Real"}], "}"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "allPeaks", ",", "firstOrderSidebands", ",", "secondOrderSidebands", 
         ",", "fsr", ",", "calibrationPeaksOffset"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"fsr", "=", 
         RowBox[{"Abs", "[", 
          RowBox[{
           RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
            RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "-", 
           RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
            RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"allPeaks", "=", 
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", 
          "formatedSidebandData", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"calibrationPeaksOffset", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
               RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
              "carrierOffset"}], ",", 
             RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
              RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
               RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}], "+", 
              "carrierOffset"}], ",", 
             RowBox[{"calibrationPeaks", "\[LeftDoubleBracket]", 
              RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], "}"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "Use", " ", "the", " ", "carriers", " ", "as", " ", "reference", 
           " ", "instead", " ", "of", " ", "the", " ", "calibration"}], ",", 
          " ", 
          RowBox[{"since", " ", "things", " ", "might", " ", 
           RowBox[{"drift", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"firstOrderSidebands", "=", 
         RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
          RowBox[{
          "allPeaks", ",", "calibrationPeaksOffset", ",", 
           "firstOrderSidebandSpacing", ",", "targetRange", ",", "minimumX"}],
           "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"secondOrderSidebands", "=", 
         RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
          RowBox[{
          "allPeaks", ",", "calibrationPeaksOffset", ",", 
           "secondOrderSidebandSpacing", ",", "targetRange", ",", 
           "minimumX"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
        "firstOrderSidebands", "~", "Join", "~", "secondOrderSidebands"}]}]}],
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "gatherByThresholdAndGetPeakInfoInSectionCompiled", "[", "_", "]"}], 
         ",", "_Real", ",", "3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findCarrierPeakUsingAllPeaksCompiled", "[", 
          RowBox[{"_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", "_Real", 
         ",", "2"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"findSidebandPeaksUsingAllPeaksCompiled", "[", 
          RowBox[{"_", ",", "_", ",", "_", ",", "_", ",", "_"}], "]"}], ",", 
         "_Real", ",", "2"}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"CompilationOptions", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ExpressionOptimization\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineCompiledFunctions\>\"", "\[Rule]", "True"}], ",", 
        RowBox[{"\"\<InlineExternalDefinitions\>\"", "\[Rule]", "True"}]}], 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.590939973706154*^9, 3.590940003725871*^9}, {
  3.5909400762770205`*^9, 3.5909401824360924`*^9}, {3.590950137188472*^9, 
  3.590950146226989*^9}, {3.59959196094283*^9, 3.59959197508764*^9}, {
  3.5995920837268534`*^9, 3.599592172257917*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"getFeedbackSignalsFromFirstAndSecondSidebandsCompiled", "=", 
   RowBox[{"Compile", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"peaks", ",", "_Real", ",", "2"}], "}"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "firstOrderSidebands", ",", "secondOrderSidebands", ",", 
         "sidebandDifference", ",", "modulationDepth"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"firstOrderSidebands", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"peaks", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"secondOrderSidebands", "=", 
         RowBox[{"Drop", "[", 
          RowBox[{"peaks", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"sidebandDifference", "=", 
         FractionBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"firstOrderSidebands", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "-", 
            RowBox[{"firstOrderSidebands", "\[LeftDoubleBracket]", 
             RowBox[{"2", ",", "2"}], "\[RightDoubleBracket]"}]}], ")"}], 
          RowBox[{"Mean", "[", 
           RowBox[{"firstOrderSidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]]}], 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"modulationDepth", "=", 
         FractionBox[
          RowBox[{"Mean", "[", 
           RowBox[{"secondOrderSidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}], 
          RowBox[{"Mean", "[", 
           RowBox[{"firstOrderSidebands", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], "]"}]]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"sidebandDifference", ",", "modulationDepth"}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.5909402903062625`*^9, 3.590940414836385*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Export to C", "Subsection",
 CellChangeTimes->{{3.5850049539937353`*^9, 3.5850049584337416`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "dir", "=", 
   "\"\<C:\\\\Users\\\\Jason\\\\Code\\\\sti\\\\devices\\\\\
HighFreqSidebandLock\\\\src\\\\mathematica\\\\\>\""}], ";"}]], "Input",
 CellChangeTimes->{{3.5850048445335827`*^9, 3.5850048797736316`*^9}, {
   3.5850049140136795`*^9, 3.585004943873721*^9}, 3.599592276478878*^9, {
   3.6016751136554785`*^9, 3.60167511485548*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"dir", "<>", "\"\<findCalibration.c\>\""}], ",", 
    "findCalibrationCompiled"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.5850049466837254`*^9, 3.585004946913726*^9}, {
   3.585049677777921*^9, 3.5850497465980177`*^9}, 3.585343655304953*^9, {
   3.585523739819369*^9, 3.585523742310511*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"dir", "<>", "\"\<findCarrierAndSidebands.c\>\""}], ",", 
    "findCarrierAndSidebandsCompiled"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.585004950913731*^9, 3.5850049516937323`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"dir", "<>", "\"\<getFeedbackSignals.c\>\""}], ",", 
    "getFeedbackSignalsCompiled"}], "]"}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"dir", "<>", "\"\<findFirstAndSecondOrderSidebands.c\>\""}], ",", 
    "findFirstAndSecondOrderSidebandsCompiled"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.5909404536296043`*^9, 3.590940458770898*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{
    "dir", "<>", "\"\<getFeedbackSignalsFromFirstAndSecondSidebands.c\>\""}], 
    ",", "getFeedbackSignalsFromFirstAndSecondSidebandsCompiled"}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.590940468909478*^9, 3.590940471552629*^9}}],

Cell["High frequency lock versions:", "Text",
 CellChangeTimes->{{3.601741488069274*^9, 3.601741493498083*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"dir", "<>", "\"\<findFirstSidebands.c\>\""}], ",", 
    "findFirstSidebandsCompiled"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.590940468909478*^9, 3.590940471552629*^9}, {
  3.6017414774768553`*^9, 3.601741482671664*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"dir", "<>", "\"\<findCarriers.c\>\""}], ",", 
    "findCarriersCompiled"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.6017417817865896`*^9, 3.601741785686597*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"dir", "<>", "\"\<getFeedbackSignalsHighLow.c\>\""}], ",", 
    "getFeedbackSignalsHighLowCompiled"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.601770781484581*^9, 3.6017707852909875`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.60177078059538*^9}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.601741780632188*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1147, 545},
WindowMargins->{{50, Automatic}, {Automatic, 26}},
PrivateNotebookOptions->{"VersionedStylesheet"->{"Default.nb"[8.] -> True}},
ShowSelection->True,
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 103, 1, 71, "Section"],
Cell[685, 25, 170, 2, 29, "Text"],
Cell[858, 29, 1442, 24, 52, "Input"],
Cell[CellGroupData[{
Cell[2325, 57, 100, 1, 36, "Subsection"],
Cell[2428, 60, 438, 8, 47, "Text"],
Cell[CellGroupData[{
Cell[2891, 72, 40, 0, 29, "Input"],
Cell[2934, 74, 9596, 133, 70, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12567, 212, 415, 9, 52, "Input"],
Cell[12985, 223, 9434, 132, 70, "Output"]
}, Open  ]],
Cell[22434, 358, 1811, 47, 232, "Input"],
Cell[CellGroupData[{
Cell[24270, 409, 6633, 136, 852, "Input"],
Cell[30906, 547, 628, 10, 70, "Message"],
Cell[31537, 559, 767, 13, 70, "Message"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[32365, 579, 243, 3, 41, "Section"],
Cell[CellGroupData[{
Cell[32633, 586, 129, 2, 31, "Input"],
Cell[32765, 590, 3170, 44, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35972, 639, 806, 21, 52, "Input"],
Cell[36781, 662, 5536, 76, 30, "Output"]
}, Open  ]],
Cell[42332, 741, 248, 6, 31, "Input"],
Cell[42583, 749, 8937, 132, 72, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[51557, 886, 108, 1, 41, "Section"],
Cell[CellGroupData[{
Cell[51690, 891, 101, 1, 43, "Subsection"],
Cell[51794, 894, 2322, 57, 112, "Input"],
Cell[54119, 953, 2797, 67, 112, "Input"],
Cell[56919, 1022, 2568, 67, 132, "Input"],
Cell[59490, 1091, 1290, 35, 112, "Input"],
Cell[60783, 1128, 609, 14, 31, "Input"],
Cell[61395, 1144, 1331, 34, 72, "Input"],
Cell[62729, 1180, 5348, 127, 332, "Input"],
Cell[68080, 1309, 502, 12, 52, "Input"],
Cell[68585, 1323, 824, 17, 92, "Input"],
Cell[69412, 1342, 1489, 35, 152, "Input"],
Cell[70904, 1379, 1234, 30, 132, "Input"],
Cell[72141, 1411, 2811, 65, 266, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[74989, 1481, 96, 1, 35, "Subsection"],
Cell[75088, 1484, 741, 15, 31, "Input"],
Cell[CellGroupData[{
Cell[75854, 1503, 143, 2, 31, "Input"],
Cell[76000, 1507, 292, 8, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76329, 1520, 1733, 36, 72, "Input"],
Cell[78065, 1558, 428, 10, 30, "Output"],
Cell[78496, 1570, 15331, 259, 241, "Output"]
}, Open  ]],
Cell[93842, 1832, 740, 18, 52, "Input"],
Cell[CellGroupData[{
Cell[94607, 1854, 281, 6, 31, "Input"],
Cell[94891, 1862, 26207, 437, 241, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121135, 2304, 517, 11, 31, "Input"],
Cell[121655, 2317, 153, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[121845, 2325, 428, 10, 31, "Input"],
Cell[122276, 2337, 318, 8, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122631, 2350, 201, 3, 31, "Input"],
Cell[122835, 2355, 313, 9, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123185, 2369, 722, 21, 52, "Input"],
Cell[123910, 2392, 20227, 340, 243, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[144174, 2737, 684, 17, 52, "Input"],
Cell[144861, 2756, 20213, 340, 282, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165111, 3101, 392, 10, 31, "Input"],
Cell[165506, 3113, 163, 4, 30, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[165718, 3123, 107, 1, 35, "Subsection"],
Cell[165828, 3126, 148, 2, 31, "Input"],
Cell[165979, 3130, 68, 1, 31, "Input"],
Cell[166050, 3133, 1521, 35, 172, "Input"],
Cell[CellGroupData[{
Cell[167596, 3172, 775, 15, 72, "Input"],
Cell[168374, 3189, 531, 8, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168942, 3202, 508, 9, 52, "Input"],
Cell[169453, 3213, 209, 2, 30, "Output"],
Cell[169665, 3217, 211, 2, 30, "Output"]
}, Open  ]],
Cell[169891, 3222, 640, 20, 52, "Input"],
Cell[170534, 3244, 326, 7, 31, "Input"],
Cell[CellGroupData[{
Cell[170885, 3255, 444, 9, 52, "Input"],
Cell[171332, 3266, 205, 2, 30, "Output"],
Cell[171540, 3270, 207, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[171784, 3277, 448, 9, 52, "Input"],
Cell[172235, 3288, 182, 2, 30, "Output"],
Cell[172420, 3292, 180, 2, 30, "Output"]
}, Open  ]],
Cell[172615, 3297, 1521, 35, 152, "Input"],
Cell[174139, 3334, 1415, 29, 152, "Input"],
Cell[CellGroupData[{
Cell[175579, 3367, 781, 14, 52, "Input"],
Cell[176363, 3383, 353, 5, 50, "Output"]
}, Open  ]],
Cell[176731, 3391, 1849, 41, 172, "Input"],
Cell[CellGroupData[{
Cell[178605, 3436, 781, 14, 52, "Input"],
Cell[179389, 3452, 455, 7, 50, "Output"]
}, Open  ]],
Cell[179859, 3462, 157, 2, 31, "Input"],
Cell[CellGroupData[{
Cell[180041, 3468, 177, 3, 31, "Input"],
Cell[180221, 3473, 1001, 13, 734, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181259, 3491, 197, 4, 31, "Input"],
Cell[181459, 3497, 949, 13, 677, "Output"]
}, Open  ]],
Cell[182423, 3513, 81, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[182529, 3518, 132, 2, 31, "Input"],
Cell[182664, 3522, 856, 18, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183557, 3545, 64, 1, 31, "Input"],
Cell[183624, 3548, 128, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183789, 3555, 36, 0, 31, "Input"],
Cell[183828, 3557, 104, 1, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183969, 3563, 305, 4, 52, "Input"],
Cell[184277, 3569, 153, 2, 30, "Output"]
}, Open  ]],
Cell[184445, 3574, 48, 0, 31, "Input"],
Cell[CellGroupData[{
Cell[184518, 3578, 105, 1, 31, "Input"],
Cell[184626, 3581, 473, 9, 21, "Message"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185136, 3595, 133, 2, 31, "Input"],
Cell[185272, 3599, 130, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185439, 3607, 140, 2, 31, "Input"],
Cell[185582, 3611, 457, 8, 21, "Message"],
Cell[186042, 3621, 115, 2, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186194, 3628, 141, 2, 31, "Input"],
Cell[186338, 3632, 423, 8, 21, "Message"],
Cell[186764, 3642, 112, 1, 30, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[186925, 3649, 93, 1, 36, "Subsection"],
Cell[CellGroupData[{
Cell[187043, 3654, 633, 11, 31, "Input"],
Cell[187679, 3667, 248, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187964, 3676, 223, 5, 31, "Input"],
Cell[188190, 3683, 1439, 42, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189666, 3730, 250, 5, 31, "Input"],
Cell[189919, 3737, 155, 3, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190111, 3745, 342, 7, 31, "Input"],
Cell[190456, 3754, 227, 5, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190720, 3764, 193, 3, 31, "Input"],
Cell[190916, 3769, 297, 8, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191250, 3782, 163, 3, 31, "Input"],
Cell[191416, 3787, 1459, 42, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192912, 3834, 188, 3, 31, "Input"],
Cell[193103, 3839, 348, 9, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[193488, 3853, 263, 4, 31, "Input"],
Cell[193754, 3859, 1615, 44, 50, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195406, 3908, 214, 4, 31, "Input"],
Cell[195623, 3914, 267, 7, 30, "Output"]
}, Open  ]],
Cell[195905, 3924, 205, 6, 31, "Input"],
Cell[CellGroupData[{
Cell[196135, 3934, 381, 7, 31, "Input"],
Cell[196519, 3943, 266, 4, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[196822, 3952, 317, 6, 31, "Input"],
Cell[197142, 3960, 361, 9, 30, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197540, 3974, 144, 2, 31, "Input"],
Cell[197687, 3978, 158, 4, 30, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[197906, 3989, 172, 2, 41, "Section"],
Cell[CellGroupData[{
Cell[198103, 3995, 181, 2, 36, "Subsection"],
Cell[198287, 3999, 615, 17, 31, "Input"],
Cell[198905, 4018, 1280, 30, 72, "Input"],
Cell[200188, 4050, 1820, 46, 152, "Input"],
Cell[202011, 4098, 5671, 130, 272, "Input"],
Cell[207685, 4230, 5857, 143, 352, "Input"],
Cell[213545, 4375, 151, 2, 31, "Input"],
Cell[213699, 4379, 3836, 86, 292, "Input"],
Cell[217538, 4467, 1047, 24, 72, "Input"],
Cell[218588, 4493, 1773, 47, 152, "Input"],
Cell[220364, 4542, 165, 3, 31, "Input"],
Cell[220532, 4547, 7674, 160, 572, "Input"],
Cell[228209, 4709, 156, 2, 31, "Input"],
Cell[228368, 4713, 18394, 419, 1045, "Input"],
Cell[246765, 5134, 2329, 51, 172, "Input"],
Cell[249097, 5187, 161, 2, 31, "Input"],
Cell[249261, 5191, 3062, 64, 212, "Input"],
Cell[252326, 5257, 2401, 56, 212, "Input"],
Cell[254730, 5315, 166, 3, 31, "Input"],
Cell[254899, 5320, 3692, 79, 292, "Input"],
Cell[258594, 5401, 2601, 60, 232, "Input"],
Cell[261198, 5463, 4453, 96, 292, "Input"],
Cell[265654, 5561, 3316, 74, 320, "Input"],
Cell[268973, 5637, 3472, 81, 328, "Input"],
Cell[272448, 5720, 94, 1, 31, "Input"],
Cell[272545, 5723, 4093, 91, 332, "Input"],
Cell[276641, 5816, 5104, 113, 392, "Input"],
Cell[281748, 5931, 2182, 48, 275, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[283967, 5984, 103, 1, 36, "Subsection"],
Cell[284073, 5987, 376, 8, 31, "Input"],
Cell[284452, 5997, 372, 8, 31, "Input"],
Cell[284827, 6007, 264, 6, 31, "Input"],
Cell[285094, 6015, 186, 5, 31, "Input"],
Cell[285283, 6022, 282, 6, 31, "Input"],
Cell[285568, 6030, 314, 8, 31, "Input"],
Cell[285885, 6040, 111, 1, 29, "Text"],
Cell[285999, 6043, 303, 7, 31, "Input"],
Cell[286305, 6052, 242, 6, 31, "Input"],
Cell[286550, 6060, 268, 6, 31, "Input"],
Cell[286821, 6068, 67, 1, 31, "Input"],
Cell[286891, 6071, 68, 1, 31, "Input"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
